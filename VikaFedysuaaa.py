# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Пару вступительных слов по системы счисления
'''
from string import *
alp36 = digits + ascii_uppercase
print(alp36)  # 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

alp2 = alp36[:2]  # '01'
alp8 = alp36[:8]  # '01234567'
alp16 = alp36[:16]  # '0123456789ABCDEF'
'''

# Универсальная функция перевода в различные системы счисления
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLXZCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b]+ r
        n //= b
    return r


n = 8

# Перевод в двоичную систему:
print(bin(n)[2:])  # 1000
print(f'{n:b}')  # 1000
print(convert(n, 2))  # 1000

# Перевод из 2-й обратно в 10-ю:
print(int('1000', 2))  # 8


# Перевод в восьмеричную систему:
print(oct(n)[2:])  # 10
print(f'{n:o}')  # 10
print(convert(n, 8))  # 10

# Перевод из 8-й обратно в 10-ю:
print(int('10', 8))  # 8


# Перевод в шестнадцатеричную систему:
print(hex(n)[2:])  # 8
print(f'{n:x}')  # 8
print(convert(n, 16))  # 8

# Перевод из 16-й обратно в 10-ю:
print(int('8', 16))  # 8


# Перевод в троичную систему:
print(convert(n, 3))  # 22
print(int('22', 3))  # 8
'''

# Ограничение до 36 символьного алфавита
'''
print(int('234532', 37))
# ValueError: int() base must be >= 2 and <= 36, or 0
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
'''
R = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + f'{x:b}'
    r = int(s, 2)
    if r >= 200:
        R.append(n)
print(min(R))
'''


# № 23551 Пересдача 03.07.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1 и справа дописывается 01
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, меньшее, чем 30.

'''
R = []
for n in range(1, 10000):
    s = f'{n:b}'
    if n % 2 == 0:
        s = s + '10'
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r < 30:
        R.append(n)
print(max(R))
'''

# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с
# помощью этого алгоритма получается число R, меньшее 100.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLXZCVBNM')


def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r


R = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        # то остаток от деления на 3 умножается на 4, переводится в троичную запись и дописывается в конец числа.
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 100:
        R.append(n)
print(max(R))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5]
# КЕГЭ = []
# на следующем уроке:
