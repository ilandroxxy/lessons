# region –î–æ–º–∞—à–∫–∞: ******************************************************************

# –†–µ—Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ - —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à: ctrl + alt + L


# https://stepik.org/lesson/1309431/step/13?unit=1324547
'''
k = input()
summa = int(k) + int(k * 2) + int(k * 3)
print(f'–°—É–º–º–∞ —á–∏—Å–µ–ª: {summa}')


k = int(input())
summa = k + k * 11 + k * 111
print(f'–°—É–º–º–∞ —á–∏—Å–µ–ª: {summa}')
'''
from runpy import run_path

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************


'''
# –°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à: ctrl + B (–æ—Ç–∫—Ä—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)

print(help(len))
# len(obj, /)
#     Return the number of items in a container.


import math
print(math.factorial(5))  # 120
print(math.sqrt(16))  # 4.0
'''

# –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ Python
'''
import math  # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(math.sqrt(16))


import math as m  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
print(m.sqrt(16))


from math import sqrt, factorial  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(sqrt(16))


from math import *  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(sqrt(16))
print(factorial(5))
'''


# –ü—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º –∏–º–µ–Ω
'''
count = 0
from itertools import permutations
for p in permutations('abcd'):
    count += 1
    print(count, p)


count = 0
from itertools import *
for p in permutations('abcd'):
    count += 1
    print(count, p)
'''

# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product, permutations

combinations = list(product([1, 2, 3], repeat=3))
for combination in combinations:
    print(combination)
    # (1, 1, 1)
    # (1, 1, 2)
    # (1, 1, 3)
    # (1, 2, 1)
    # (1, 2, 2)
    # (1, 2, 3)
    # (1, 3, 1)
    # (1, 3, 2)
    # (1, 3, 3)
    # (2, 1, 1)
    # (2, 1, 2)
    # (2, 1, 3)
    # (2, 2, 1)
    # (2, 2, 2)
    # (2, 2, 3)
    # (2, 3, 1)
    # (2, 3, 2)
    # (2, 3, 3)
    # (3, 1, 1)
    # (3, 1, 2)
    # (3, 1, 3)
    # (3, 2, 1)
    # (3, 2, 2)
    # (3, 2, 3)
    # (3, 3, 1)
    # (3, 3, 2)
    # (3, 3, 3)

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''


# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(10000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
'''


# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ fnmatch –∏ re –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏ –∏ 24 –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
'''
from fnmatch import *
for x in range(2024, 10**10, 2024):
    if fnmatch(str(x), '1*2322?2'):
        print(x)
        
        
from re import *
for x in range(2024, 10**10, 2024):
    if fullmatch('1[0-9]*2322[0-9]2', str(x)):
        print(x)
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  
# ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@_`{|}~
'''


# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
from math import ceil, floor, dist

print(4 / 3)  # 1.333
print(ceil(4 / 3))  # 2 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
print(floor(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑

print(round(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ (–≤–Ω–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: if, elif, else
'''
n = int(input('n: '))
if n > 0:  # if - –µ—Å–ª–∏ 
    print('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
elif n < 0:  # elif - –∏–Ω–∞—á–µ –µ—Å–ª–∏
    print('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
else:  # else - –∏–Ω–∞—á–µ
    print('–†–∞–≤–Ω–æ –Ω—É–ª—é')
'''


'''
# x = int(input('x: '))
# y = int(input('y: '))
x, y = 5, 0

if x > 0 and y > 0:
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å—è—Ö')

print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''


# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not, in
'''
flag = True
print(not flag)  # False
print(not(not flag))  # True

M = [1, 2, 4, 5, 6, 6]
print(3 in M)  # False - –ª–µ–∂–∏—Ç –ª–∏ 3 –≤ —Å–ø–∏—Å–∫–µ –ú
print(4 not in M)  # False
print(4 in M)  # True

a, b, c = 4, 5, 6
if a > 0 and b > 0 and c > 0:
    print('and - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤–µ—Ä–Ω—ã–µ')
if a > 0 or b > 0 or c > 0:
    print('or - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ–µ')
    
    
print(True + True + True)  # 3

if (a > 0) + (b > 0) + (c > 0) == 3:
    print('–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) == 1:
    print('–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('–¢–æ–ª—å–∫–æ –¥–≤–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) >= 1:
    print('–•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
'''

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
