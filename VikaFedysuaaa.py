# region Домашка: ******************************************************************

# "Ночь" — если время с 00:00 до 05:29.
# "Утро" — если время с 05:30 до 12:14.
# "День" — если время с 12:15 до 17:44.
# "Вечер" — если время с 17:45 до 23:59.
'''
H = int(input())
M = int(input())

if 0 <= H <= 4:
    print('Ночь')
elif H == 5:
    if 0 <= M <= 29:
        print('Ночь')
    else:
        print('Утро')
elif 6 <= H <= 11:
    print('Утро')
elif H == 12:
    if 0 <= M <= 14:
        print('Утро')
    else:
        print('День')
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Цикл for отвечает на запросы: "Повтори 5 раз", "Пробежать от 10 до 100", "Работа с элементами последовательностей"


# Работа цикла for с функцией range()
'''
# range(0, STOP-1, 1)
# range(START, STOP-1, 1)
# range(START, STOP-1, STEP)

for i in range(10):  # Повтори 10 раз
    print(i, end=' ')  # 0 1 2 3 4 5 6 7 8 9
print()

for i in range(2, 10):  # Пробеги от 2 до 9
    print(i, end=' ')  # 2 3 4 5 6 7 8 9
print()

for i in range(2, 10, 2):  # Пробеги от 2 до 9 с шагом 2
    print(i, end=' ')  # 2 4 6 8
print()

for i in range(2, 10+1, 2):  # Пробеги от 2 до 10 с шагом 2
    print(i, end=' ')  # 2 4 6 8 10
print()

for i in range(10, 0, -1):  # Пробежать в убывающем порядке 
    print(i, end=' ')  # 10 9 8 7 6 5 4 3 2 1 
print()
'''


# Работа цикла for с последовательностями (list, str, tuple, ..)
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
T = ('a', 'b', 'c', 'd', 'e')
s = 'abcde'

print(len(L))  # 5 - Функция len() возвращает кол-во элементов в последовательности


# Перебор элементов через индексы удобен, если необходимо изменять элементы списка

for i in range(len(L)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(L[i], end=' ')  # a b c d e
print()

for i in range(len(L)):
    L[i] = L[i] * i
print(L)  # ['', 'b', 'cc', 'ddd', 'eeee']


# Для перебора или фильтрации элементов последовательности можно пробегать элементы напрямую

L = ['a', 'b', 'c', 'd', 'e']

for x in L:
    print(x, end=' ')  # a b c d e
print()

for x in L:
    if x in 'ae':
        print(x, end=' ')  # a e
print()
'''


# Цикл while отвечает на запросы: "Пока условие - делай действие", "Бесконечные циклы"
'''
for i in range(2, 10+1, 2):  # Пробеги от 2 до 10 с шагом 2
    print(i, end=' ')  # 2 4 6 8 10
print()

i = 2
while i <= 10:
    print(i, end=' ')
    i += 2
print()
'''

# № 23558 Пересдача 03.07.25 (Уровень: Базовый)
# На вход приведённой выше программе поступает строка,
# начинающаяся с цифры «4», а затем содержащая n цифр «2» (3 < n < 10 000).

# ПОКА нашлось (42) ИЛИ нашлось (822) ИЛИ нашлось (222)
#   ЕСЛИ нашлось (42)
#     ТО заменить (42, 2)
#   ЕСЛИ нашлось (822)
#     ТО заменить (822, 24)
#   ЕСЛИ нашлось (222)
#     ТО заменить (222, 8)

# Определите наибольшее возможное значение суммы цифр в строке,
# которая может быть получена в результате выполнения программы.
'''
R = []
for n in range(4, 10_000):
    s = '4' + '2' * n

    while '42' in s or '822' in s or '222' in s:
        if '42' in s:
            s = s.replace('42', '2', 1)
        if '822' in s:
            s = s.replace('822', '24', 1)
        if '222' in s:
            s = s.replace('222', '8', 1)

    summa = sum(map(int, s))
    R.append(summa)
print(max(R))
'''

# Перевод из 10-й в 2-ю
'''
n = 8
b = 2  # система счисления
r = ''
while n > 0:
    r = str(n % b) + r
    n //= b
print(r)
'''

# Универсальная функция перевода в различные системы счисления
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLXZCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b]+ r
        n //= b
    return r


print(convert(10**8, 16))  # 5F5E100
print(convert(8, 2))  # 1000
'''

# Бесконечные циклы и операторы: break, continue, exit()
'''
k = 0
while True:
    k += 1
    if k % 2 != 0:
        continue  # Прерывание итерации (шаг) цикла
    if k == 50_000:
        exit()  # Прерываем полностью выполнение программы
    if k == 100_000:
        break  # Прерываем выполнение цикла в котором сейчас лежит
    print(k)

print('Продолжение программы')
'''

# Простенький консольный калькулятор для перевода в различные системы счисления
'''
from string import digits, ascii_uppercase
alp = digits + ascii_uppercase  # 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b]+ r
        n //= b
    return r

while True:
    case = input('\n'
                 'case 1: Перевод из 10-й в b-ю систему \n'
                 'case 2: Перевод из b-й в 10-ю систему \n'
                 'case 3: Перевод из b-й в k-ю систему \n'
                 'case 0: Выход из программы. \n'
                 'case: ')

    if case == '1':
        n = int(input('Введите число n для перевода: '))
        b = int(input('Введите систему счисления b: '))
        print(f'Результат перевода числа {n} в {b}-ю систему: {convert(n, b)}')

    elif case == '2':
        b = int(input('Введите систему счисления b: '))
        r = input(f'Введите число в {b}-й системе: ')
        print(f'Результат перевод числа {r} из {b}-й системы в 10-ю: {int(r, b)}')

    elif case == '3':
        pass  # через int() и convert()

    elif case == '0':
        print('Спасибо, что пользовались нашим калькулятором!')
        exit()

    else:
        print('Я не понимаю никаких команд кроме: 1, 2, 3, 0.')
'''


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
