# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Теория множеств
# P = {2, 3, 5, 7, 11, 13, 17, ..., +int} - Множество простых чисел P ∈ N
# N = {1, 2, 3, ..., 1000, ..., +inf} - Множество натуральных чисел
# Z = {-inf, ..., -1000, ..., -1, 0, 1, ...., 1000, ..., +inf} - Множество целых чисел  P ∈ N ∈ Z
# Q = {+inf, ..., -3/4, ..., 0, .., 1/2, ..., 3/4,..., +inf} - Множество рациональных чисел (обыкновенные дроби)
# I = {+inf, ..., -3.7246372(444), ..., 0, .., pi, ..., +inf} - Множество иррациональных чисел P ∈ N ∈ Z ∈ Q ∈ I
# R = P ∈ N ∈ Z ∈ Q ∈ I - Множество вещественных (действительных) чисел

x = 5  # пременная - это способ быстрого доступа к данным через какое-то имя переменной

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(a))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественное значение (дроби)
print(7 / 2)  # 3.5

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, слова, и тд
print(a * 4, c * 4)  # 20 5555
print('Hello' * 4)  # HelloHelloHelloHello
print('Hello ' + 'world!')  # Hello world! - две строки можно конкатенировать (склеивать) между собой 

d1 = True  # bool (Boolean) - Булева алгебра (Математическая логика)
d0 = False
print(4 > 10)  # False
'''

# Типы данных коллекций (последовательности)
'''
# i  0  1  2
A = [1, 2, 3]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индексы) начиная с 0
# 3. Элементы списка можно брать или изменять через индексы
print([1, 2, 5.4, '24', [4, 5, 6]])  # [1, 2, 5.4, '24', [4, 5, 6]]
print(A[0])  # 1


B = (1, 2, 3)   # tuple (кортеж)
# 1. Полностью идентичные спискам, но нельзя изменять элементы кортежа
print(B[0])


C = {1, 2, 3, 3, 3}  # set (множество)
# 1. Множества удаляют копии элементов
print(C)  # {1, 2, 3}

a = {1, 2, 3, 4}
b = {3, 4, 5, 6}
# Пересечение: {3, 4}
# Объединение: {1, 2, 3, 4, 5, 6}
# разность между а и b: {1, 2}


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элемент словаря разбивается на две части: ключ и значение
# 2. Доступ к значению элемента словаря, осуществляется через его (индивидуальный) ключ

print(D['один'])  # one
D['один'] = 'ONE'
print(D)  # {'один': 'ONE', 'два': 'two'}


for key, value in D.items():
    print(key, value)
    # один ONE
    # два two


car = {'марка': 'honda', 'модель': 'civic', 'год': '2008'}
car['цвет'] = 'черный'
print(car)
print(f'Мой автомобиль: {car["марка"]} {car["модель"]} {car["цвет"]}-го цвета.\n'
      f'Год выпуска: {car["год"]}\n')
# Мой автомобиль: honda civic черный-го цвета.
# Год выпуска: 2008
'''

'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2'*2, 2<10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(x, type(x))
    # 2 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 3.5 <class 'float'>
    # 22 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 'one', 'два': 'two'} <class 'dict'>
'''

# Конвертация (перевод) типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')  # принимает с клавиатуры только строку
x = int(input('Введите число: '))
print(s * 4, x * 4)
# ValueError: invalid literal for int() with base 10: 'ergreg'
'''

# Работа с f-строкой
'''
weather = 'облачно'
temperature = 24
# Сегодня облачно, а температура 24 градуса!

print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
# TypeError: can only concatenate str (not "int") to str
'''

# Базовая арифметика

a, b = 7, 2
print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждом print() есть переход на новую строку '/n'

print(f'{a} + {b} = {a+b}')
print(f'{a} - {b} = {a-b}')
print(f'{a} * {b} = {a*b}')

print()

print(f'{a} / {b} = {a/b} \n'  # 3.5 - обычное вещественное деление (дроби)
      f'{a} // {b} = {a//b} \n'  # 3 - взятие только целой части от деления 
      f'{a} % {b} = {a%b}')  # 1 - взятие остатка от деления

print()

x = 126
print(x % 2 == 0)  # True - Число четное, Делится на 2, Кратно 2
print(x % 2 != 0)  # False - Число нечетное, Не делится на 2, Не кратно 2

print(x % 10 == 6)  # True - число заканчивается цифрой 6
print(x % 100 == 26)  # True - число заканчивается на 26

print()

print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b}')
# Возведем число 7 в степень 2: 49
print(f'Возьмем квадратный корень от числа 16: {16**(1/2)}')
# Возьмем квадратный корень от числа 16: 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')
# Возьмем кубический корень от числа 27: 3.0

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
