# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(a))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения
print(5.0 + 4)  # 9.0
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе тексты
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello  - при умножении строки на число получается дублирование строки

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # Hello, world! - операция конкатенации (склеивание) строк
# print('Привет, мне ' + 24)  # TypeError: can only concatenate str (not "int") to str


d1 = True  # bool (Boolean) - Основы Булевой алгебры (математическая логика)
d0 = False
print(4 == 4)  # True
print(4 == 10)  # False
'''
from os import waitstatus_to_exitcode

# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '4', 5.0, True, [1, 2, 3]]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов
# 2. Элементы могут быть различных типов данных в отличие от массивов
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Индексы могут считаться слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы мы можем изменять элементы списка в отличие от кортежей и строк

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка M: {M[0]}')  # a
print(f'Последний элемент списка M: {M[-1]}')  # e

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичны спискам, но нельзя изменять элементы кортежа

C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. В множестве нельзя хранить копии элементов


D = {'один':'one', 'два':'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через ключ
# 3. Ключи не могут повторяться, иначе старое значение заменится новым

print(D['один'])  # one
D['один'] = '1'
print(D)  # {'один': '1', 'два': 'two'}
'''


# Конвертация типов данных:
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>


# Сколько различных значений получилось?
M = [1, 2, 1, 2, 3, 4, 3, 1, 4, 5, 6, 2]
print(len(M))  # 12 - Возвращает длину списка - кол-во элементов в нем
print(len(set(M)))  # 6 - Возвращает длину множества - (кол-во различных элементов)
'''


# Ввод данных с клавиатуры:
'''
text = input('Введите текст: ')
print(text, type(text))

number = int(input('Введите число: '))
print(number, type(number))
'''


# Пример работы с f-строкой
"""
'''Привет, сегодня облачно, а температура 24 градуса!'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Привет, сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Привет, сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Привет, сегодня {weather}, а температура {temperature} градуса!')
"""


# Базовая арифметика

# a = 7
# b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # любая функция print() содержит в себе переход на новую строку '/n'

# Деление в Пайтон
print(f'{a} / {b} = {a / b} \n'  # 3.5 - обыкновенное вещественное деление (результат всегда float) 
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление (результат всегда int)
      f'{a} % {b} = {a % b}')  # 1 - остаток от деления (результат всегда int)


print()

# n = int(input())
n = 10
if n % 2 == 0:
    print('Число четное | Число делится на 2 | Число кратно 2')
if n % 3 == 0:
    print('Число делится на 3 | Число кратно 3')
if n % 10 == 7:
    print('Число оканчивается на 7')
if n % 100 == 73:
    print('Число оканчивается на 73')
if n % 1000 == 234:
    print('Число оканчивается на 234')

print()

print(f'Возведем число 4 в степень 2: {4 ** 2}')  # 16
print(f'Возведем число 4 в степень 3: {4 ** 3}')  # 64

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Говорим про библиотеки и условные операторы
