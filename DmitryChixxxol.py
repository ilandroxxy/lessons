# region –î–æ–º–∞—à–∫–∞: ******************************************************************


# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************
#

# import math
# print(f'–í–æ–∑—å–º–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {math.sqrt(16)}')  # 4.0
# print(f'–í–æ–∑—å–º–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {16 ** 0.5}')  # 4.0


# –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
'''
import math
print(math.sqrt(16))

import math as m  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É math –≤ m
print(m.sqrt(16))

from math import sqrt, fabs, pow  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
print(sqrt(16))

from math import *  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
print(sqrt(16))
print(gcd(4, 24))
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product, permutations

combinations = list(product([1, 2, 3], repeat=2))
for combination in combinations:
    print(combination)
    # (1, 1)
    # (1, 2)
    # (1, 3)
    # (2, 1)
    # (2, 2)
    # (2, 3)
    # (3, 1)
    # (3, 2)
    # (3, 3)

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''


# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(1000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
'''


# –¢–∏–ø 16 ‚Ññ59760
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n < 11:
        return 10
    if n >= 11:
        return n + F(n - 1)

print(F(2021) - F(2019))

# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded
'''
# –û—Ç–≤–µ—Ç: 4041


# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏:
'''
from fnmatch import fnmatch
if fnmatch('123', '*?3'):
    pass
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
'''


# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
import math as m
print(m.sqrt(16))
print(m.ceil(7/2))
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–≤–µ—Ç–≤–ª–µ–Ω–∏–µ): if, elif, else

# x = int(input('x: '))
# y = int(input('y: '))
'''
x, y = -5, 6
if x > 0 and y > 0:
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å—è—Ö')
print('–ö–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''


# –ö–∞—Å–∫–∞–¥–Ω—ã–µ —É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
'''
x = int(input('x: '))
y = int(input('y: '))

if x > 0:
    if y > 0:  # x > 0, y > 0
        print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
    else:  # x > 0, y <= 0
        print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    if y > 0:  # x <= 0, y > 0
        print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
    else:  # x <= 0, y <= 0
        print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
'''


# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not, ^, in, !=, ==, =
'''
x = 5  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
print(x == 5)  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "—Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏?"
print(x != 5)  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "–Ω–µ —Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏?"

flag = True
print(not flag)  # False
print(not(not flag))  # True

a, b, c = 5, -6, 7

if a > 0 and b > 0:  # and - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    print('YES 1')
if a > 0 or b > 0:  # or - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    print('YES 2')
if (a > 0) ^ (b > 0):  # ^, != - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    print('YES 3')
if (a > 0) != (b > 0):
    print('YES 3')
'''

# –ï—Å—Ç—å —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∏–∑ –Ω–∏—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ

'''
a, b, c = 5, 6, 7

print(True + False + True)  # 2
print((a > 0) + (b > 0) + (c > 0))  # 2

if (a > 0) + (b > 0) + (c > 0) == 2:
    print('–î–∞, —Ç–æ–ª—å–∫–æ –¥–≤–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.')
else:
    print(f'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {(a > 0) + (b > 0) + (c > 0)}')
'''


# –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ø–∏—Å–∫—É/–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ç—Ä–µ–∑–∫—É
'''
x = int(input('x: '))

M = [1, 2, 3, 4, 5]
if x in M:
    print(f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {x} –ª–µ–∂–∏—Ç –≤ —Å–ø–∏—Å–∫–µ M: {M}')

s = '12345'
if str(x) in s:
    print(f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {x} –ª–µ–∂–∏—Ç –≤ —Å—Ç—Ä–æ–∫–µ s: {s}')

# P = [15, 30]
if 15 <= x <= 30:
    print(f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {x} –ª–µ–∂–∏—Ç –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ P: [15, 30]')

# Q = (30, 40]
if 30 < x <= 40:
    print(f'–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {x} –ª–µ–∂–∏—Ç –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ Q: (30, 40]')
'''


'''
pas1 = input()
pas2 = input()
if pas1 == pas2:
    print("–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç")
else:
    print("–ü–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–∏–Ω—è—Ç")
'''

'''
s = input()
if len(s) >= 10 or len(s) % 2 == 0:
    print("–î–ê")
else:
    print('–ù–ï–¢')
'''
# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠  = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
