# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# list() - списки
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка M: {M[0]}')
print(f'Последний элемент списка M: {M[-1]}')

# 1. Могут хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. У каждого элемента списка есть свой порядковый номер: индекс
# 3. Индексы элементов можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно не только брать через индексы, но и изменять их (в отличие от кортежей)

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

B = ('a', 'b', 'c', 'd', 'e')  # tuple() - кортеж
# B[0], B[-1] = 'A', 'E'
# TypeError: 'tuple' object does not support item assignment
'''


# Работа со списками через цикл for:
'''
M = [int(x) for x in '525634623112']
print(M)  # [5, 2, 5, 6, 3, 4, 6, 2, 3, 1, 1, 2]

print(len(M))  # 12 - Возвращает длину списка (кол-во элементов в нем)

for i in range(len(M)):
    # print(i, end=' ')  # 0 1 2 3 4 5 6 7 8 9 10 11
    print(M[i], end=' ')  # 5 2 5 6 3 4 6 2 3 1 1 2
print()

# Через индексы мы можем изменять элементы 
for i in range(len(M)):
    M[i] = M[i] * M.count(M[i])
print(M)  # [10, 6, 5, 18, 6, 4, 18, 4, 3, 2, 1, 4]


M = [int(x) for x in '525634623112']

for x in M:
    print(x, end=' ')   # 5 2 5 6 3 4 6 2 3 1 1 2
print()

# Через прямой for удобно отсеивать (фильтровать) элементы 
for x in M:
    if x % 2 == 0:
        print(x, end=' ')  # 2 6 4 6 2 2  
print()
'''


# Срезы списков
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# M[START : STOP-1 : STEP]

print(M[2:4])  # ['c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd'] - все, что до 4 (не включительно)
print(M[2:])  # ['c', 'd', 'e'] - все, что после 2 (включительно)
print(M[:])  # ['a', 'b', 'c', 'd', 'e']
print(M[::2])  # ['a', 'c', 'e'] - Все элементы под четными индексами
print(M[1::2])  # ['b', 'd']  - Все элементы под нечетными индексами

print(M[1:-1])  # ['b', 'c', 'd'] - Все кроме первого и последнего
print(M[2:])  # ['c', 'd', 'e'] - Все начиная со 2 по индексы (убрали первые 2 символа)
print(M[:-2])  # ['a', 'b', 'c'] - Все элементы кроме последних двух
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - Срез в обратном порядке 
'''


# Функции списков
'''
M = [1, 2, 1, 2, 3, 4, 5]

print(len(M))  # Возвращает длину списка
print(sum(M))  # Возвращает сумму целых элементов
print(max(M), min(M))  # Максимальный и минимальный элементы соответственно
print(sorted(M))  # [1, 1, 2, 2, 3, 4, 5] - по возрастанию
print(sorted(M, reverse=True))  # [5, 4, 3, 2, 2, 1, 1] - по убыванию
print(sorted(M)[::-1])  # [5, 4, 3, 2, 2, 1, 1] - по убыванию
print(list(reversed(M)))  # [5, 4, 3, 2, 1, 2, 1] - по убыванию
print(set(M))  # {1, 2, 3, 4, 5}  # - убирает копии


s = '23456'
print(sorted(s))  # ['2', '3', '4', '5', '6']
print(sorted(s)[::-1])  # ['6', '5', '4', '3', '2']
'''


# Все методы списков в Python, которые понадобятся на ЕГЭ  #tpy
# Метод - это частный случай функции направленной только на один тип данных

# Метод .append() используется для добавления элемента в конец списка. Пример:
'''
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Вывод: [1, 2, 3, 4]

# Можно реализовать через конкатенацию (склеивание) списков:
my_list = [1, 2, 3]
my_list += [4, 5]
print(my_list)  # Вывод: [1, 2, 3, 4, 5]
'''

# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
'''
my_list = [1, 2, 2, 3, 4, 2]
count_of_twos = my_list.count(2)
print(count_of_twos)  # Вывод: 3
'''


# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

# Можно удалить элемент через его индекс используя del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
'''
my_list = [1, 2, 3, 2, 4]
index_of_two = my_list.index(2)
print(index_of_two)  # Вывод: 1
'''


# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном порядке,
# если передан аргумент reverse=True. Пример:
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Генераторы списков
'''
from random import randint

M = []
for i in range(10):
    M.append(randint(0, 100))
print(M)


M = [randint(0, 100) for i in range(10)]
print(M)

chet = [x for x in M if x % 2 == 0]  # все четные элементы
nechet = [x for x in M if x % 2 != 0]  # все четные элементы

copied = [x for x in M if M.count(x) > 1]  # элементы которые имеют копии
not_copied = [x for x in M if M.count(x) == 1]  # элементы которые не имеют копии


M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x ** 2 for x in range(10)]
print(M)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x ** 2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]


M = [int(x) for x in open('17.txt')]

D = [x for x in M if abs(x) % 10 == 3 and len(str(abs(x))) == 3]  # abs() - модуль числа
print(D)  # [793, 693, 333, 183, 703, 393, 593, 603, 283, 393]

for s in open('9.txt'):
    M = [int(x) for x in s.split()]
    print(M)
'''

M = [2, 3, 4, 5, 6]
print(M)
M = M[:4] + [45] + M[4:]
print(M)

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6]
# КЕГЭ  = []
# на следующем уроке: Давайте эксель пораньше, для школы нужно
