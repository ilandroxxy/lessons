# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# - однострочный комментарий (ctrl + /)

''' - Многострочный комментарий, могу хранить тут код:
b = 5.0  # float (число с плавающей точкой)
print(b, type(b))  # 5.0 <class 'float'>
print(4/2, type(4/2))  # 2.0 <class 'float'>
'''


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(4+6, type(4+6))  # 10 <class 'int'>

b = 5.0  # float (число с плавающей точкой)
print(b, type(b))  # 5.0 <class 'float'>
print(4/2, type(4/2))  # 2.0 <class 'float'>

b2 = 5,0
print(b2, type(b2))  # (5, 0) <class 'tuple'>

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы, цифры, слова, тексты и тд тп
print(a * 4, c * 4)  # 20 5555 - строки при умножении на целое число будут дублироваться
new_message = 'hello, ' + 'world!'
print(new_message)  # hello, world! - операция конкатенации строк (склеивание)

d1 = True
d0 = False  # bool (Boolean) - Основы Булевой алгебры (ака Математическая логика) 
print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')


# Вызов документации к функции/библиотеке (можно через сочетание клавиш ctrl + B)
print(help(len))  # Return the number of items in a container.


def prime(x: int) -> bool:
    """
    Функция проверки числа на простое или составное
    :param x: Принимает целое int число для проверки
    :return: True - если число простое, иначе False - если составное
    """
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True


print('Сегодня я читал книгу "Война и мир", она мне очень понравилась')
# Сегодня я читал книгу "Война и мир", она мне очень понравилась
'''


# Типы данных коллекций (последовательности)
'''
A = [1, 2, 3, '3', [1, 2, 3]]  # list (список)
M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# 1. Хранит в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой уникальный порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списков можно не только брать через индексы, но и изменять их значение

print(A[0])  # 1 - первый элемент списка A
print(A[-1])  # 3 - последний элемент списка A
A[0] = 1000
print(A)  # [1000, 2, 3]

B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью дублирует свойства списков, но за одним исключением: нельзя изменять элементы кортежа

C = {1, 2, 3, 2, 3}  # set (множество)
# 1. В множестве элементы не могут имеет двух одинаковых значений
print(C)  # {1, 2, 3}
array = [1, 2, 1, 2, 1, 2, 0, 3, 2, 1, 2]
print(set(array))  # Сколько различных значений будет в результате?  {0, 1, 2, 3}

D = {'один': 'one', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря разбиты на две части: ключ и значения
# 2. Если мы хотим получить значение элемента словаря, то нам необходимо обратиться к его ключу
# 3. Ключи нельзя дублировать иначе старый элемент с этим ключом просто удалится
print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'автобус': 'bus'}

for key, value in D.items():
    print(key, value)
    # один 1
    # автобус bus
'''

# Немного про теорию множеств:
'''
# P = {2, 3, 5, 7, 11, 13, 17, 19, ..., + inf)  - Множество простых чисел
# N = {1, 2, 3, 4, 5, 6, ..., 1000, ..., + inf} - Множество натуральные числа P ∈ N
# Z = {-inf, ..., -3, -2, -1, 0, 1, 2, 3, ...., +inf} - Множество целых чисел P ∈ N ∈ Z
# Q = {нормальные ДРОБИ} - Множество рациональных чисел P ∈ N ∈ Z ∈ Q
# I = {большие бесконечные ДРОБИ) - Множество иррациональных чисел P ∈ N ∈ Z ∈ Q ∈ I
# R = {P + N + Z + Q + I) - Множество вещественных чисел (Действительных) P ∈ N ∈ Z ∈ Q ∈ I ∈ R
# С = {P ∈ N ∈ Z ∈ Q ∈ I ∈ R} - Множество комллексных чисел
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
s = input('Введите строчку: ')
print(s, type(s))

n = int(input('Введите число: '))
print(n, type(n))
'''

# Работа с f-строками
# Выведите текст на экран: "Сегодня облачно, но температура 24 градуса!"
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print("Сегодня ", weather, ", но температура ", temperature, " градуса!")
print("Сегодня " + weather + ", но температура " + str(temperature) + " градуса!")
print("Сегодня {}, но температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, но температура {temperature} градуса!")
'''

# Базовая арифметика

a, b = 7, 2

print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждой функции print() есть переход на новую строку "\n"

print(f'{a} / {b} = {a/b} \n'  # Вещественное деление, то есть результат всегда float (дробь)
      f'{a} // {b} = {a//b} \n'  # Взятие только целой части от деления, то есть даже если 3.99999 // 1 = 3
      f'{a} % {b} = {a%b}')  # Взятие остатка от деления 7 % 2 = 1

print()

print(f'Возведем число {a} в степень {b}: {a ** b}')
print(f'Возьмем квадратный корень от 16: {16 ** (1/2)}')
print(f'Возьмем кубический корень от 27: {27 ** (1/3)}')


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
