# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Переводы в различные системы счисления
'''
n = 8

# Перевод в двоичную систему счисления
print(bin(n))  # 0b1000
print(bin(n)[2:])  # 1000
print(f'{n:b}')  # 1000

# Перевод в восьмеричную систему счисления
print(oct(n)[2:])  # 10
print(f'{n:o}')  # 10

# Перевод в шестнадцетеричную систему счисления
print(hex(n)[2:])
print(f'{n:x}')  # 8 - abcdef
print(f'{n:X}')  # 8 - ABCDEF


from string import *
alp = digits + ascii_uppercase  # 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

# alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r

print(convert(n, 2))
print(convert(n, 8))
print(convert(n, 16))
'''
# A - 10
# B - 11
# C - 12
# D - 13

# № 23742 Демоверсия 2026 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого с
# помощью этого алгоритма получается число R, не меньшее 200
'''
for N in range(1, 1000):
    r = bin(N)[2:]
    if N % 3 == 0:
        r = r + r[-3:]
    else:
        x = (N % 3) * 3
        r = r + bin(x)[2:]
    R = int(r, 2)
    if R >= 200:
        print(N)
        break

# Вариант два (решение через функцию перевода)

alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r


for N in range(1, 1000):
    r = convert(N, 2)
    if N % 3 == 0:
        r = r + r[-3:]
    else:
        x = (N % 3) * 3
        r = r + convert(x, 2)
    R = int(r, 2)
    if R >= 200:
        print(N)
        break
'''


# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с
# помощью этого алгоритма получается число R, меньшее 100.
'''
def convert(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

for N in range(1, 10000):
    r = convert(N, 3)
    if N % 3 == 0:
        r = '1' + r + '02'
    else:
        x = (N % 3) * 4
        r = r + convert(x, 3)
    R = int(r, 3)
    if R < 100:
        print(N)
'''


# № 22272 (Уровень: Средний)
# (О. Лысенков) На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится девятеричная запись числа N.
#
# 2. Далее эта запись обрабатывается по следующему правилу:
#
# а) если девятеричная запись начинается на 7, то  все шестёрки в записи меняются на тройки, а все тройки меняются на  шестёрки после к числу приписывается 34 слева;
#
# б) если девятеричная запись начинается не на 7,то к записи справа приписывается 45, а первый разряд полученной записи заменяется на 3.
#
# Полученная таким образом запись является девятеричной записью искомого числа R.
#
# Укажите  максимальное число N, для которого результатом работы алгоритма
# является наибольшее число R, меньшее 2876.


alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r

M = []
for N in range(1, 10000):
    r = convert(N, 9)
    if r[0] == '7':
        r = r.replace('6', '*')
        r = r.replace('3', '6')
        r = r.replace('*', '3')
        r = '34' + r
    else:
        r = '3' + r[1:] + '45'
    R = int(r, 9)
    if R < 2876:
        if R == 2795:
            print(N)
        M.append([R, N])

print(max(M))


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Посмотреть сложные 2 номера (из практики). Проверить публикацию домашних задач по Степик (5 номер)
