# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************



# ip = '32.54.234.255'
# байт:  1  1   1   1
# бит:   8  8   8   8
# Восьмибитное число: 0 <= x <= 255
# Потому что 255_10 -> 11111111_2 (самое большое восьмибитное число)


# Адрес сети = Узел сети & Маска сети
'''
from ipaddress import *
net = ip_network('Узел/Маска', 0)
'''


# Узел всегда в задачах дан

# Маска сети имеет три варианта записи:
# 1. 255.255.0.0 (в десятичном виде)
# 1. 11111111.11111111.00000000.00000000  (всего 32)
# 1. 10  (10 - единиц)


# № 18966 (Уровень: Базовый)
# Сеть задана IP-адресом 5.2.5.0 и маской сети 255.255.0.0.
# Сколько в этой сети IP-адресов, для которых количество
# нулей в двоичной записи IP-адреса кратно 25?
'''
from ipaddress import *
net = ip_network('5.2.5.0/255.255.0.0', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('0') % 25 == 0:
        cnt += 1
print(cnt)
'''


# № 14358 (Уровень: Базовый)
# Сеть задана IP-адресом 192.168.32.64 и
# сетевой маской 255.255.255.192. Сколько в этой сети IP-адресов,
# двоичная запись которых оканчивается на 101?
'''
from ipaddress import *
net = ip_network('192.168.32.64/255.255.255.192', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s[-3:] == '101':
        cnt += 1
print(cnt)
'''


# № 12922 PRO100 ЕГЭ 26.01.24 (Уровень: Базовый)
# Сеть задана IP-адресом 136.36.240.16 и маской сети 255.255.255.248.
# Сколько в этой сети IP-адресов, в которых
# в двоичной записи IP-адреса не встречается 101?
'''
from ipaddress import *
net = ip_network('136.36.240.16/255.255.255.248', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if '101' not in s:
        cnt += 1
print(cnt)
'''


# № 23751 Демоверсия 2026 (Уровень: Базовый)
# Адрес сети и широковещательный адрес не могут быть
# использованы для адресации сетевых устройств.
# Сеть задана IP-адресом одного из входящих в неё
# узлов 191.128.66.83 и сетевой маской 255.192.0.0.
# Найдите в данной сети наибольший IP-адрес,
# который может быть назначен компьютеру.
# В ответе укажите найденный IP-адрес без разделителей.
'''
from ipaddress import *
net = ip_network('191.128.66.83/255.192.0.0', 0)
for ip in net.hosts():
    print(ip)
# Берем самый последний 
'''


# № 23559 Пересдача 03.07.25 (Уровень: Базовый)
'''
from ipaddress import *
net = ip_network('102.162.200.51/255.255.255.0', 0)
for ip in net.hosts():
    print(ip)
    # 102.162.200.254
# Берем самый последний и суммируем числа
'''


# № 23559 Пересдача 03.07.25 (Уровень: Базовый)
'''
from ipaddress import *
k = 0
net = ip_network('191.128.66.83/255.192.0.0',False)
for ip in net.hosts():
    k += 1
    print(k, ip)
'''


# Варианты маски сети:
# [Единиц: 0, Нулей: 32] 000000....000
# [Единиц: 1, Нулей: 31] 100000....000
# [Единиц: 2, Нулей: 30] 110000....000
# [Единиц: 3, Нулей: 29] 111000....000
# [Единиц: 4, Нулей: 28] 111100....000
# [Единиц: 5, Нулей: 27] 111110....000
# ....
# [Единиц: 31, Нулей: 1] 111111....110
# [Единиц: 32, Нулей: 0] 111111....111

# for mask in range(0, 32+1):
#     print(mask)


# № 11768 (Уровень: Базовый)
# Для узла с IP-адресом 143.172.12.114 адрес сети равен 143.172.8.0.
# Чему равно наименьшее возможное значение третьего слева байта маски?
'''
from ipaddress import *
for mask in range(0, 32+1):
    net = ip_network(f'143.172.12.114/{mask}', 0)
    if '143.172.8.0' in str(net):
        print(net, net.netmask)
'''


# № 11766 (Уровень: Базовый)
# Для узла с IP-адресом 132.243.87.85 адрес сети равен 132.243.64.0.
# Каково наибольшее возможное количество нулей в двоичной записи маски?
'''
from ipaddress import *
for mask in range(0, 32+1):
    net = ip_network(f'132.243.87.85/{mask}', 0)
    if '132.243.64.0' in str(net):
        print(32 - mask, mask)
'''


# № 16260 Джобс 03.05.24 (Уровень: Средний)
# Известно два узла с IP-адресами 123.20.103.136 и 123.20.103.151
# принадлежат разным сетям с одинаковой маской.
# Определите значение 4 байта маски в этих сетях.
'''
from ipaddress import *
for mask in range(0, 32+1):
    net1 = ip_network(f'123.20.103.136/{mask}', 0)
    net2 = ip_network(f'123.20.103.151/{mask}', 0)
    if net1 != net2:
        print(mask, net1.netmask, '1' * mask + '0' * (32 - mask))
'''

# № 15326 Досрочная волна 2024 (Уровень: Базовый)
# Сеть задана IP-адресом 105.224.200.224 и сетевой маской 255.255.255.224.
# Сколько в этой сети IP-адресов, для которых количество единиц в двоичной записи IP-адреса кратно 4?

'''
from ipaddress import*
net = ip_network('105.224.200.224/255.255.255.224', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('1') % 4 == 0:
        cnt += 1
print(cnt)
'''


# № 14948 (Уровень: Базовый)
# Сеть задана IP-адресом 192.168.32.128 и маской сети 255.255.255.192.
# Сколько в этой сети IP-адресов, для которых сумма единиц в двоичной записи IP-адреса чётна?
'''
from ipaddress import *
net = ip_network('192.168.32.128/255.255.255.192',False)
k = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('1') % 2 == 0:
        k += 1
print(k)
'''


# № 14359 (Уровень: Базовый)
# Два узла, находящиеся в разных подсетях, имеют IP-адреса 157.127.172.56 и 157.127.191.78.
# Известно, что в масках обеих подсетей содержится одинаковое количество единиц.
# Определите наименьшее возможное количество единиц в масках этих подсетей.
'''
from ipaddress import *
for mask in range(0,33):
    net1 = ip_network(f"157.127.172.56/{mask}", False)
    net2 = ip_network(f"157.127.191.78/{mask}", False)
    if net1 != net2:
        print(mask)
'''

# № 14360 (Уровень: Базовый)
# Для узла с IP-адресом 153.202.16.37 адрес сети равен 153.202.16.32.
# Определите наибольшее возможное значение суммы последних двух байтов маски.
'''
from ipaddress import *
for mask in range(0,32+1):
    net = ip_network(f'153.202.16.37/{mask}', 0)
    if '153.202.16.32' in str(net):
        print(net, net.netmask)
'''
from ipaddress import *
cnt = 0
for mask in range(0,32+1):
    net1 = ip_network(f'157.127.172.56/{mask}', 0)
    net2 = ip_network(f'157.127.191.78/{mask}', 0)
    if net1 != net2:
        print(mask)



# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 13, 14, 25]
# КЕГЭ = []
# на следующем уроке:
