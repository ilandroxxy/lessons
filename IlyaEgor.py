# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# 25 номер с масками

# № 23764 Демоверсия 2026 (Уровень: Базовый)
# Назовём маской числа последовательность цифр,
# в которой также могут встречаться следующие символы:
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 3?12?14*5, делящиеся на 1917 без остатка.
'''
# Вариант 1

from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x, x // 1917)


# Вариант 2

from re import *  # Библиотека для работы с регулярными выражениями
for x in range(1917, 10**10, 1917):
    if fullmatch('3[0-9]12[0-9]14[0-9]*5', str(x)):
        print(x, x // 1917)
'''


# todo Разобрать № 7897 (Уровень: Базовый)
# – символ «?» означает ровно одну произвольную нечётную цифру;
# – символ «*» означает любое чётное число;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10,
# найдите 5 наибольших чисел, соответствующих маске ?136*1,
# делящихся на 11071 без остатка.
'''
from re import *
for x in range(11071, 10**10, 11071):
    if fullmatch(r'[13579]136[02468]*1', str(x)):
        print(x, x // 11071)


from fnmatch import *
for x in range(11071, 10**10, 11071):
    if fnmatch(str(x), '?136*1'):
        if str(x)[-1] in '13579':
            if str(x)[-2] in '02468':
                print(x, x // 11071)
'''
'''
from re import *
for x in range(53191, 10**10, 53191):
    if fullmatch(r'[2468]136[13579]*', str(x)):
        print(x)
'''


# № 7689 (Уровень: Средний)
'''
from re import *
R = []
for x in range(1323, 3*10**8, 1323):
    if x % 780 == 0:
        if fullmatch(r'[0-9]*[02468]32[0-9][0-9]', str(x)):
            R.append([x, x//780])
R.reverse()
for x in R:
    print(*x)
'''


# Универсальную функцию поиска делителей числа
'''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]
'''


# № 23763 Демоверсия 2026 (Уровень: Базовый)
'''
def divisors(x):
    div = []
    for j in range(2, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


cnt = 0
for x in range(800_000+1, 10**10):
    div = divisors(x)
    if len(div) > 0:
        M = min(div) + max(div)
        if M % 10 == 4:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''


# № 21909 Открытый вариант 2025 (Уровень: Базовый)
'''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


cnt = 0
for x in range(500_000+1, 10**10):
    div = divisors(x)
    R = sum(div)
    if R % 10 == 6:
        print(x, R)
        cnt += 1
        if cnt == 5:
            break
'''


# № 21422 Досрочная волна 2025 (Уровень: Базовый)
'''
def divisors(x):
    div = []
    for j in range(1, int(x ** 0.5)+1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

cnt = 0
for x in range(1_125_000+1, 10**10):
    div = [j for j in divisors(x) if j % 10 == 7 and j != 7 and j != x]
    if len(div) > 0:
        print(x, min(div))
        cnt += 1
        if cnt == 5:
            break
'''


# Егор
# № 20814 Апробация 05.03.25 (Уровень: Базовый)
# Пусть R - сумма различных натуральных делителей целого числа, не считая единицы и самого числа.
# Напишите программу, которая перебирает целые числа, большие 500 000,
# в порядке возрастания и ищет среди них такие, для которых R оканчивается на цифру 9.

# В ответе запишите в первом столбце таблицы первые пять найденных чисел в порядке возрастания,
# а во втором столбце - соответствующие им значения R.
'''
def divisors(x):
    div = []
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))


k = 0
for x in range(500_000 + 1, 10 ** 10):
    div = divisors(x)
    R = sum(div)
    if R % 10 == 9:
        print(x, R)
        k += 1
        if k == 5:
            break
'''


# № 17879 Демоверсия 2025 (Уровень: Базовый)
# Пусть M – сумма минимального и максимального натуральных делителей целого числа,
# не считая единицы и самого числа. Если таких делителей у числа нет, то считаем значение M равным нулю.
# Напишите программу, которая перебирает целые числа, бо́льшие 800 000,
# в порядке возрастания и ищет среди них такие, для которых M оканчивается на 4.

# В ответе запишите в первом столбце таблицы первые пять найденных чисел в порядке возрастания,
# а во втором столбце – соответствующие им значения M.
'''
def Divisors(x):
    div = []
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            div += [j, x // j]
    return sorted(set(div))

cnt = 0
for x in range(800_000+1, 10**10):
    div = Divisors(x)
    if len(div) > 0:
        M = min(div) + max(div)
        if M % 10 == 4:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 14, 25]
# КЕГЭ = []
# на следующем уроке:
