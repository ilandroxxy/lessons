# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

'''
n = int(input('n: '))

if n % 2 == 0:
    print('Делится на 2 | Кратно 2')
if n % 2 != 0:
    print('Делится на 2 | Кратно 2')
'''


# Перевод в различные системы счисления
'''
n = 8

# Перевод из 10-й в 2-ю систему
print(bin(n)[2:])  # 1000
print(f'{n:b}')
# Перевод из 2-й в 10-ю
print(int('1000', 2))

# Перевод из 10-й в 8-ю систему
print(oct(n)[2:])  # 10
print(f'{n:o}')
# Перевод из 8-й в 10-ю
print(int('10', 8))


# Перевод из 10-й в 16-ю систему
print(hex(n)[2:])  # 8
print(f'{n:x}')
# Перевод из 16-й в 10-ю
print(int('8', 16))
# ValueError: int() base must be >= 2 and <= 36, or 0
'''



# Универсальная функция перевода из 10-й в b-ю
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]


print(convert(8, 2))  # 1000
print(convert(10**8, 16))  # 5F5E100
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются
# её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления
# умножается на 3, переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите минимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, не меньшее 200
'''
RES = []
for n in range(1, 10000):
    s = f'{n:b}'
    # s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + f'{x:b}'
    r = int(s, 2)
    if r >= 200:
        RES.append(n)
print(min(RES))
'''


# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
# Укажите максимальное число N, после обработки которого с
# помощью этого алгоритма получается число R, меньшее 100.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 100:
        RES.append(n)
print(max(RES))
'''


# № 23264 Основная волна 11.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то к этой записи дописываются две последние троичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 5, переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
# Укажите минимальное число R, большее 150, которое может быть получено с помощью описанного алгоритма.
# В ответе запишите это число в десятичной системе счисления.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = s + s[-2:]
    else:
        x = (n % 3) * 5
        s = s + convert(x, 3)
    r = int(s, 3)
    if r > 150:
        RES.append(r)
print(min(RES))
 '''


# № 21404 Досрочная волна 2025 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи числа чётная, то к этой записи справа дописывается 0,
# а затем два левых разряда заменяются на 10;
# б) если сумма цифр в двоичной записи числа нечётная, то к этой записи справа дописывается 1,
# а затем два левых разряда заменяются на 11.
# Полученная таким образом запись является двоичной записью искомого числа R.
# Укажите минимальное число N, после обработки которого с помощью этого
# алгоритма получается число R, большее 480. В ответе запишите это число в десятичной системе счисления.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 2)
    if s.count('1') % 2 == 0:
        s = '10' + s[2:] + '0'
    else:
        s = '11' + s[2:] + '1'
    r = int(s, 2)
    if r > 480:
        RES.append(n)
print(min(RES))
'''


# № 21261 (Уровень: Средний)
# (О. Лысенков) На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится четверичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр четверичной записи кратна 3,
# то все нули в записи меняются на 2, а все 2 меняются на нули,
# после к числу приписывается 32 слева;
# б) если сумма цифр четверичной записи не кратна 3,
# то к записи справа приписывается 33, после второй и третий разряд,
# полученной записи, меняются на 1 и 0 соответственно,
# разряды нумеруются слева направо, начиная с 1.
# Полученная таким образом запись является четверичной записью искомого числа R.
# Укажите максимальное число N, для которого результатом
# работы алгоритма является наименьшее число R, превышающее 320.
'''
def convert(n, b):
    alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 4)
    summa = sum(map(int, s))
    if summa % 3 == 0:
        # то все нули в записи меняются на 2, а все 2 меняются на нули
        s = s.replace('2', '*')
        s = s.replace('0', '2')
        s = s.replace('*', '0')
        s = '32' + s
    else:
        s = s[0] + '10' + s[3:] + '33'
    r = int(s, 4)
    if r > 320:  # 335
        if r == 335:
            print(n)
        RES.append(r)
print(min(RES))
'''


# Взятие суммы цифр от строки 
'''  
s = '1212321312'

summa = 0 
for x in s:
    summa += int(x)
print(summa)

summa = sum([int(x) for x in s])

summa = sum(map(int, s))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
