# region –î–æ–º–∞—à–∫–∞: ******************************************************************


# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************


# ctrl + B - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

# –¢–∏–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
'''
import math  # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(math.sqrt(16))

import math as m  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º (–∏–º—è –ª—é–±–æ–µ)
print(m.sqrt(16))

from math import sqrt, factorial  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
print(sqrt(16))

from math import *  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
print(sqrt(16))
print(factorial(5))
'''
from email.base64mime import MISC_LEN
from string import digits

# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ *
'''
count = 0
from itertools import permutations
for p in permutations('abc'):
    count += 1
    print(count, p)
    # 1 ('a', 'b', 'c')
    # 2 ('a', 'c', 'b')
    # 3 ('b', 'a', 'c')
    # 4 ('b', 'c', 'a')
    # 5 ('c', 'a', 'b')
    # 6 ('c', 'b', 'a')


count = 0
from itertools import *
for p in permutations('abc'):
    count += 1
    print(count, p)
    # TypeError: unsupported operand type(s) for +=: 'type' and 'int'
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ!

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import permutations, product

combinations = list(product("abc", repeat=2))
for combination in combinations:
    print(combination)
    # ('a', 'a')
    # ('a', 'b')
    # ('a', 'c')
    # ('b', 'a')
    # ('b', 'b')
    # ('b', 'c')
    # ('c', 'a')
    # ('c', 'b')
    # ('c', 'c')

perms = list(permutations("abc"))
for perm in perms:
    print(perm)
    # ('a', 'b', 'c')
    # ('a', 'c', 'b')
    # ('b', 'a', 'c')
    # ('b', 'c', 'a')
    # ('c', 'a', 'b')
    # ('c', 'b', 'a')
'''

# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
'''
import sys
sys.setrecursionlimit(10000)
'''
# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
'''
from functools import *
@lru_cache(None)
def F(n):
'''


# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏:
'''
from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x, x // 1917)
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@^_`{|}~

alp36 = string.digits + string.ascii_uppercase
print(alp36[:2])  # 01
print(alp36[:8])  # 01234567
'''

# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
from math import ceil, floor, dist

print(4 / 3)  # 1.3333
print(round(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
print(ceil(4 / 3))  # 2 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
print(floor(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑

def d(A, B):
    x1, y1 = A
    x2, y2 = B
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

print(d([4, 3], [5, 6]))
print(dist([4, 3], [5, 6]))
'''


# –¶–∏–∫–ª for –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã: "–ø–æ–≤—Ç–æ—Ä–∏ N —Ä–∞–∑", "–ø—Ä–æ–±–µ–≥–∏ –æ—Ç A –¥–æ B"


# –†–∞–±–æ—Ç–∞ —Ü–∏–∫–ª–∞ for —Å —Ñ—É–Ω–∫—Ü–∏–µ–π range()
'''
# range(0, STOP-1, 1)
# range(START, STOP-1, 1)
# range(START, STOP-1, STEP)

for i in range(10):
    print(i, end=' ')  # 0 1 2 3 4 5 6 7 8 9
print()

for i in range(2, 10):
    print(i, end=' ')  # 2 3 4 5 6 7 8 9
print()

for i in range(2, 10, 2):
    print(i, end=' ')  # 2 4 6 8
print()

for i in range(2, 10+1, 2):
    print(i, end=' ')  # 2 4 6 8 10
print()


for i in range(10, 0, -1):
    print(i, end=' ')  # 10 9 8 7 6 5 4 3 2 1
print()
'''

# –†–∞–±–æ—Ç–∞ —Ü–∏–∫–ª–∞ for —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

for x in M:
    print(x, end=' ')  # a b c d e
print()

for x in M:
    if x in 'ae':
        print(x, end=' ')  # a e
print()


print(len(M))  # 5 - –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ M

for i in range(len(M)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()


for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''



# –¶–∏–∫–ª while –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã: "–ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ–µ - –¥–µ–ª–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ", "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª"
'''
for i in range(2, 10+1, 2):
    print(i, end=' ')  # 2 4 6 8 10
print()


i = 2
while i <= 10:
    print(i, end=' ')
    i += 2
print()
'''

# –ü–µ—Ä–µ–≤–æ–¥—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
'''
n = 8
b = 2
r = ''
while n != 0:
    r += str(n % b)
    n //= b
r = r[::-1]
print(r)
'''


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: break, continue, exit()
'''
k = 0
while True:
    k += 1
    if k % 2 != 0:
        continue  # - –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é (—à–∞–≥) —Ü–∏–∫–ª–∞
    if k == 50_000:
        exit()  # - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if k == 100_000:
        break  #  - –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –≤ –∫–æ—Ç–æ—Ä–º –º—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏–º—Å—è
    print(k)

print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''


# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
'''
from random import randint
from time import sleep

password = 'qwerty'
count = 1
pas = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')
while True:
    if password == pas:
        print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        break
    pas = input('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: ')
    count += 1
    if count == 3:
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–±–æ—Ç–∞, —Ä–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: ')
        a = randint(0, 100)
        b = randint(0, 100)
        x = int(input(f'{a} + {b} = '))
        if x == a + b:
            print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. ')
            count = 0
        else:
            print('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç')
            sleep(5 * 60)
            
print('–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª')
'''
# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
