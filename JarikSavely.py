# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - это однострочный комментарий

'''
- это многострочный комментарий
'''


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(a))  # <class 'int'>
print(2 + 2, type(2 + 2))  # 4 <class 'int'>


b = 5.0  # float (число с плавающей точкой) - вещественные значения/дроби
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

B = 5,0
print(B, type(B)) # (5, 0) <class 'tuple'>


c = '5'  # str (string) - строковый тип данных хранит текст
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555

# При умножении строки на целое число - строка дублируется
print('hello ' * 4)  # hello hello hello hello

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # 'Hello, world!' - конкатенация строк / склеивание строк


d1 = True  # bool (Boolean) - Булева алгебра / математическая логика
d0 = False
print(4 < 10)  # True
'''


# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# 1. Могут содержать неограниченное кол-во элементов
# 2. Элементы могут принимать различные типы данных (в отличие от массивов)
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 и справа-налево начиная -1
# 5. Через индексы мы можем изменять элементы списка (в отличие от кортежей и строк)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print('Первый элемент списка L:', L[0])
print('Последний элемент списка L:', L[-1])

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']


M = [2, '2', 2.0, True, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один':'one', 'два':'two'}]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'str'> 2
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}



B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичный списка, но нельзя изменять элементы кортежа


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. Не могут содержать два одинаковых элементы (все элементы различные)


D = {'один':'one', 'два':'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи не могут дублироваться, в таком случае происходит перезапись значения

print(D['один'])  # one
D['три'] = 3
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two', 'три': 3}
'''


# Конвертация типов данных
'''
a = 5
print(type(a), a)  # <class 'int'> 5

a = str(a)
print(type(a), a)  # <class 'str'> 5
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(type(a), a)  # <class 'float'> 5.0

a = int(a)
print(type(a), a)  # <class 'int'> 5


A = [1, 2, 2, 3, 3, 3]
print(type(A), A)  # <class 'list'> [1, 2, 2, 3, 3, 3]

A = tuple(A)
print(type(A), A)  # <class 'tuple'> (1, 2, 2, 3, 3, 3)

A = set(A)
print(type(A), A)  # <class 'set'> {1, 2, 3}

A = list(A)
print(type(A), A)  # <class 'list'> [1, 2, 3]
'''


# Ввод данных с клавиатуры
'''
number = int(input('Введите число: '))
print(number, type(number))

text = input('Введите текст: ')
print(text, type(text))
'''


# Работа с f-строками
"""
''' Привет, Илья! Сегодня облачная погода, а температура 24 градуса..  '''

name = input('Введите свое имя: ')
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Привет, ', name,'! Сегодня ', weather, ' погода, а температура ', temperature, ' градуса..')
print('Привет, ' + name + '! Сегодня ' + weather + ' погода, а температура ' + str(temperature) + ' градуса..')
print('Привет, {}! Сегодня {} погода, а температура {} градуса..'.format(name, weather, temperature))
print(f'Привет, {name}! Сегодня {weather} погода, а температура {temperature} градуса..')
"""


# Базовая арифметика
'''
a = 7
b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'  # \n - переход на новую строку 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку \n

# Три типа делений в программировании
print(f'{a} / {b} = {a / b}')  # 3.5 - обыкновенное вещественное деление (всегда float) 
print(f'{a} // {b} = {a // b}')  # 3 - взятие только целой части от деления (всегда int) 
print(f'{a} % {b} = {a % b}')  # 1 - взятие остатка от деления (всегда int) 
# 7 / 2 = 3 целых и 1/2 - остаток 1

print()

n = 123
print(n // 10)  # 12
print(n % 10)  # 3

n = int(input('n: '))
if n % 2 == 0:
    print('Число делится на 2 | Кратно 2 | Четное')
if n % 2 != 0:
    print('Число не делится на 2 | не кратно 2 | нечетное')
if n % 3 == 0:
    print('Число делится на 3 | кратно 3')
if n % 10 == 3:
    print('Число оканчивается на 3')
if n % 100 == 23:
    print('Число оканчивается на 23')
  
print()

print(f'Возведем число 7 в степень 2: {7 ** 2}')
print(f'Возведем число 7 в степень 3: {7 ** 3}')

print()

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')
'''

'''
print(2, 3, 4, 5, 6)  # 2 3 4 5 6

print(2, 3, 4, 5, 6, sep='\n')
# 2
# 3
# 4
# 5
# 6

for x in [1, 2, 3, 4, 5, 6]:
    print(x)
    # 1
    # 2
    # 3
    # 4
    # 5
    # 6

for x in [1, 2, 3, 4, 5, 6]:
    print(x, end=' ')  # 1 2 3 4 5 6 
'''


# Условные операторы: if, elif, else
'''
n = int(input('n: '))
if n > 0:  # if - если 
    print('Положительное')
elif n < 0:  # elif - иначе если 
    print('Отрицательное')
else:  # else - иначе 
    print('Равно нулю')
'''

'''
x = int(input('x: '))
y = int(input('y: '))

if x > 0 and y > 0:
    print('Первая четверть')
elif x < 0 and y > 0:
    print('Вторая четверть')
elif x < 0 and y < 0:
    print('Третья четверть')
elif x > 0 and y < 0:
    print('Четвертая четверть')
else:
    print('Лежит на осях ')
'''


# Логические связки: and, or, not, in, not in
'''
flag = True
print(not flag)  # False
print(not(not flag))  # True

M = '5134562145362516'
for x in M:
    if x in '02468':
        print(x, end=' ')  # 4 6 2 4 6 2 6
print()

for x in M:
    if x not in '02468':
        print(x, end=' ')  # 5 1 3 5 1 5 3 5 1
print()


a, b, c = 4, 5, 6

if a > 0 and b > 0 and c > 0:
    print('and - все условия верные')
if a > 0 or b > 0 or c > 0:
    print('or - хотя бы одно условие верное')
    
print(True + True + True)  # 3
    
if (a > 0) + (b > 0) + (c > 0) == 1:
    print('Выполняется только одно условие')
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('Выполняется только два условия')
if (a > 0) + (b > 0) + (c > 0) <= 2:
    print('Выполняется не более двух условий')
 '''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Библиотеки и циклы
