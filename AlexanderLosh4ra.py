# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

X = 5  # Переменная - это уцдобный способ взаимодействия с ячейкой памяти, где хранятся данные

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
A: int = 55  # Явное указание типа данных называется аннотацией данных
print(type(a))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные числа (дроби)
print(4 / 2)  # 2.0 - Вещественное деление всегда возвращает float
print(7 // 2)  # 3

c = '5'  # "5"
print(a * 4, c * 4)  # 20 5555 - строка при умножении на целое число просто дублируется
print('Hello, ' + 'world!')  # Hello, world! - строки можно конкатенировать (склеивать)
# print('5' + 4)  # TypeError: can only concatenate str (not "int") to str

d1 = True  # bool (Boolean) - Булева алгебра
d0 = False 
print(4 < 10)  # True
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Может хранить в себе неограниченное кол-во элементов разных типов данных
# 2. У каждого элемента есть свой порядковый номер (индекс) начинающийся с нуля
# 3. Через индексы можно брать элементы списка и изменять их
print(A[0])  # 1
A[0] = '0'
print(A)  # ['0', 2, 3]


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью удовлетворяет спискам, но элементы кортежа менять нельзя


C = {1, 2, 3, 2, 3}  # set (множество)
# 1. Не может хранить копии одинаковых элементов
print(C)  # {1, 2, 3}


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Не имеет индексов, но элементы словаря делятся на две части: ключ и значение
# 2. Доступ к значению словаря осуществляется через его (индивидуальный) ключ

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(x, type(x))
    # 2 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 2.0 <class 'float'>
    # 22 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 'one', 'два': 'two'} <class 'dict'>
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку с клавиатуры: ')
print(type(s))  # <class 'str'>
x = int(input('Введите число: '))
print(type(x))
'''

# Работы с f-строками
'''
weather = input('Введите погоду: ')
temperature = int(input('Введите погоду: '))
# Сегодня облачно, а температура 24 градуса!
print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''


# Базовая арифметика
'''
a = 5.4  # float
b = 5,4  # (5, 4) - tuple
print(b)
'''

# a = 7
# b = 2
a, b = 7, 2

print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

print(f'{a} + {b} = {a+b}')
print(f'{a} - {b} = {a-b}')
print(f'{a} * {b} = {a*b}')

print()

print(f'{a} / {b} = {a/b}')  # 3.5 – Обычное вещественное деление (всегда float)
print(f'{a} // {b} = {a//b}')  # 3 - Взятие только целой части
print(f'{a} % {b} = {a%b}')  # 1 - Взятие остатка от деления

print(12324 // 100)  # 123
print(12324 % 100)  # 24

# Важный момент про %
print(119 % 10)  # 9
print(119 % 10 == 9)  # True - спрашиваем оканчивается ли число на 9
print(-119 % 10 == 9)  # False
print(-119 % 10)  # 1

print()

print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b}')
# Возведем число 7 в степень 2: 7 ** 2 = 49

import math
print(math.sqrt(16))  # 4.0

print(f'Возьмем квадратный корень от числа 16: 16**(1/2) = {16**(1/2)}')
# Возьмем квадратный корень от числа 16: 16**(1/2) = 4.0

print(f'Возьмем кубический корень от числа 27: 27**(1/3) = {27**(1/3)}')
# Возьмем кубический корень от числа 27: 27**(1/3) = 3.0

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
