# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

'''
# Способ чтения файла для 17 номера:
M = [int(x) for x in open('17.txt')]


# Рассмотрим три прототипы 17 номера:
M = [1, 2, 3, 4, 5]

# 1. В данной задаче под парой подразумевается два идущих подряд элемента последовательности.
# 12 23 34 45
for i in range(len(M)-1):
    x, y = M[i], M[i+1]


# 2. В данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
# 123 234 345
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]


# 3. В данной задаче под парой подразумевается два различных элемента последовательности.
# 12 13 14 15
# 23 24 25
# 34 35
# 45
for i in range(len(M)):
    for j in range(i+1, len(M)):
        x, y = M[i], M[j]
'''


# Тип 17 №38951
# Файл содержит последовательность неотрицательных целых чисел, не превышающих 10000.
# Назовём парой два идущих подряд элемента последовательности.
# Определите количество пар, в которых хотя бы один из двух элементов делится на 3,
# а их сумма делится на 5. В ответе запишите два числа: сначала количество найденных пар,
# а затем — максимальную сумму элементов таких пар.
'''
M = [int(x) for x in open('17.txt')]
R = []
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    if x % 3 == 0 or y % 3 == 0:
        if (x + y) % 5 == 0:
            R.append(x + y)
print(len(R), max(R))  
'''

# Тип 17 №68250
# Файл содержит последовательность натуральных чисел, не превышающих 100000.
# Назовём четвёркой четыре идущих подряд элемента последовательности.
#
# Определите количество четвёрок, для которых выполняются следующие условия:
# — в четвёрке есть хотя бы два пятизначных числа и хотя бы одно не пятизначное;
# — в четвёрке больше чисел, кратных 3, чем чисел, кратных 7;
# — сумма элементов четвёрки больше максимального элемента последовательности,
# запись которого заканчивается на 538, но меньше удвоенного значения этого элемента.
# Гарантируется, что в последовательности есть хотя бы один элемент, запись которого заканчивается на 538.

M = [int(x) for x in open('17.txt')]
D = [x for x in M if x % 1000 == 538]
R = []
for i in range(len(M)-4):
    x, y, z, w = M[i:i+4]
    if len([p for p in (x, y, z, w) if len(str(p)) == 5]) >= 2:
        if len([p for p in (x, y, z, w) if len(str(p)) != 5]) >= 1:
            num_3 = [p for p in (x, y, z, w) if p % 3 == 0]
            num_7 = [p for p in (x, y, z, w) if p % 7 == 0]
            if len(num_3) > len(num_7):
                if max(D) < (x + y + z + w) < max(D) * 2:
                    R.append(x + y + z + w)

print(len(R), max(R))

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 9, 8, 12, 13, 14, 15, 16, 17, 23, 25]
# КЕГЭ  = []
# на следующем уроке:
