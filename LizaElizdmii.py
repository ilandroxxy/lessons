# region –î–æ–º–∞—à–∫–∞: ******************************************************************


# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************

'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ú
print(M[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ú

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

# 1. –ú–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–∞—Å—Å–∏–≤–æ–≤ –∏ —Å—Ç—Ä–æ–∫)
# 2. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: –∏–Ω–¥–µ–∫—Å—ã
# 3. –ò–Ω–¥–µ–∫—Å—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å 0 –∏–ª–∏ —Å–ø—Ä–∞–≤–∞-–Ω–∞–ª–µ–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å -1
# 4. –ß–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã –º—ã –º–æ–∂–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–æ–≤, –Ω–æ –∏ –∏–∑–º–µ–Ω—è—Ç—å –∏—Ö (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ—Ä—Ç–µ–∂–µ–π –∏ —Å—Ç—Ä–æ–∫)


s = 'abcde'

print(s[0])  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ s
print(s[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ s
'''

# –°—Ä–µ–∑—ã —Å–ø–∏—Å–∫–æ–≤/—Å—Ç—Ä–æ–∫
'''

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# [START : STOP-1 : STEP]
print(M[2:4])  # ['c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd'] - –í—Å–µ, —á—Ç–æ —Å–ª–µ–≤–∞ –¥–æ 4 –∏–Ω–¥–µ–∫—Å–∞ (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
print(M[2:])  # ['c', 'd', 'e'] - –í—Å–µ, —á—Ç–æ —Å–ø—Ä–∞–≤–∞ –æ—Ç 2 –∏–Ω–¥–µ–∫—Å–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
print(M[:])  # ['a', 'b', 'c', 'd', 'e'] - –í—ã–≤–æ–¥–∏–º –≤—Å–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
print(M[::])  # ['a', 'b', 'c', 'd', 'e']
print(M[0::2])  # ['a', 'c', 'e'] - –í—Å–µ —á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
print(M[1::2])  # ['b', 'd'] - –í—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã

# i  01234
s = 'abcde'
print(s[2:4])  # cd
print(s[2:])  # cde - –°–æ –≤—Ç–æ—Ä–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞ (–≤—Å–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö)
print(s[1:-1])  # bcd - –í—Å–µ, —á—Ç–æ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
print(s[::-1])  # edcba - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ 
'''

# –§—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –∏ —Å—Ç—Ä–æ–∫
'''
M = [1, 2, 2, 3, 7, 4, 7]
s = '1223747'

print(len(M), len(s))  # 7 7 - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞/—Å—Ç—Ä–æ–∫–∏ (–∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
print(sum(M))  # 26
print(min(M), max(M))  # 1 7
print(min(s), max(s))  # 1 7

print(sorted(M))  # [1, 2, 2, 3, 4, 7, 7] - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
print(sorted(s))  # ['1', '2', '2', '3', '4', '7', '7'] - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

print(sorted(M, reverse=True))  # [7, 7, 4, 3, 2, 2, 1] - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é

print(set(M))  # {1, 2, 3, 4, 7}  # –£–±–∏—Ä–∞—é –∫–æ–ø–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞/—Å—Ç—Ä–æ–∫
print(set(s))  # {'2', '4', '7', '1', '3'}

print(eval('4+2'))  # 6
print(eval('(4+2) * 5'))  # 30
'''


# –í—Å–µ –º–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤ –≤ Python, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–∞ –ï–ì–≠

# –ú–µ—Ç–æ–¥ .append() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.
'''
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4]

# –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é (—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ) —Å–ø–∏—Å–∫–æ–≤:
my_list = [1, 2, 3]
my_list += [4, 5]
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4, 5]
'''


# –ú–µ—Ç–æ–¥ .reverse() –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π.
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]

# –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É —á–µ—Ä–µ–∑ —Å—Ä–µ–∑:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''


# –ú–µ—Ç–æ–¥ .count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫.
'''
my_list = [1, 2, 2, 3, 4, 2]
count_of_twos = my_list.count(2)
print(count_of_twos)  # –í—ã–≤–æ–¥: 3
'''


# –ú–µ—Ç–æ–¥ .remove() —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # –ø–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –¥–≤–æ–π–∫–∞
print(my_list)  # –í—ã–≤–æ–¥: [1, 3, 2, 4]

# –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É—è del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # –∏–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
print(my_list)  # –í—ã–≤–æ–¥: [1, 3, 2, 4]
'''


# –ú–µ—Ç–æ–¥ .index() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.
'''
my_list = [1, 2, 3, 2, 4]
index_of_two = my_list.index(2)
print(index_of_two)  # –í—ã–≤–æ–¥: 1
'''


# –ú–µ—Ç–æ–¥ .sort() —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
# –∏–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç reverse=True.
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]

# –°–∫–∞–∂—É —á–µ—Å—Ç–Ω–æ —è –Ω–µ –ª—é–±–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞, —Å—á–∏—Ç–∞—é, —á—Ç–æ —É–¥–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''


# üêç –í—Å–µ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ Python, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–∞ –ï–ì–≠


# 1‚É£ .strip()
# –ú–µ—Ç–æ–¥ strip() —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã (–∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã) –∏–∑ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏.
# –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
'''
text = "    –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!   "
cleaned_text = text.strip()
print(cleaned_text)  # "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
'''

# 2‚É£ .lower() –∏ .upper()
# –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä —Å—Ç—Ä–æ–∫–∏. lower()
# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∞ upper() ‚Äì –≤ –≤–µ—Ä—Ö–Ω–∏–π.
'''
text = "–ü—ÄIvEt"
print(text.lower())  # "–ø—Ä–∏–≤–µ—Ç"
print(text.upper())  # "–ü–†–ò–í–ï–¢"
'''


# 3‚É£ .replace()
# –ú–µ—Ç–æ–¥ replace(old, new, count) –∑–∞–º–µ–Ω—è–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É old –Ω–∞ new –≤ —Å—Ç—Ä–æ–∫–µ count —Ä–∞–∑.
'''
text = "–Ø –ª—é–±–ª—é Python!"
new_text = text.replace("Python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
print(new_text)  # "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ!"

text = "–Ø –ª—é–±–ª—é Python! Python –ª—É—á—à–∏–π —è–∑—ã–∫."
new_text = text.replace("Python", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
print(new_text)  # "–Ø –ª—é–±–ª—é –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏–π —è–∑—ã–∫."


text = "–Ø –ª—é–±–ª—é Python! Python –ª—É—á—à–∏–π —è–∑—ã–∫."
new_text = text.replace("Python", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 1)
print(new_text)  # "–Ø –ª—é–±–ª—é –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ! Python –ª—É—á—à–∏–π —è–∑—ã–∫."
'''


# 4‚É£  .split()
# –ú–µ—Ç–æ–¥ split(separator) —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é.
# –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª.
'''
text = "—è–±–ª–æ–∫–æ –≥—Ä—É—à–∞ –±–∞–Ω–∞–Ω"
fruits = text.split()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
print(fruits)  # ['—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–±–∞–Ω–∞–Ω']


ip = '23.43.234.4'
print(ip.split('.'))  # ['23', '43', '234', '4']
'''


# ctrl + /

# 5‚É£ .join()
# –ú–µ—Ç–æ–¥ join(iterable) —Å–æ–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞) –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.
'''
fruits = ['—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–±–∞–Ω–∞–Ω']
result = ', '.join(fruits)
print(result)  # "—è–±–ª–æ–∫–æ, –≥—Ä—É—à–∞, –±–∞–Ω–∞–Ω"
'''

# 6‚É£ .find()
# –ú–µ—Ç–æ–¥ find(substring) –∏—â–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å,
# —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞. –ï—Å–ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1.
'''
text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
index = text.find("–º–∏—Ä")
print(index)  # 8
'''

# 7‚É£ .count()

# –ú–µ—Ç–æ–¥ count(substring) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É.
'''
text = "—è–±–ª–æ–∫–æ, –≥—Ä—É—à–∞, —è–±–ª–æ–∫–æ"
count = text.count("—è–±–ª–æ–∫–æ")
print(count)  # 2
'''

# 8‚É£ .startswith() –∏ .endswith()
# –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –µ—é.
'''
text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
print(text.startswith("–ü—Ä–∏–≤–µ—Ç"))  # True
print(text.endswith("–º–∏—Ä!"))  # True
'''


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
'''
# –ì–ï–ù–ï–†–ê–¢–û–†–´ = [—á—Ç–æ –∫–ª–∞–¥–µ–º | –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ–º | –ø—Ä–∏ –∫–∞–∫–æ–º —É—Å–ª–æ–≤–∏–∏]

M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

M = [x**2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]

print()

from random import randint
N = [randint(0, 100) for x in range(10)]
print(N)

chet = [x for x in N if x % 2 == 0]
nechet = [x for x in N if x % 2 != 0]
print(chet, nechet)

not_copied = [x for x in N if N.count(x) == 1]
copied = [x for x in N if N.count(x) > 1]
print(copied, not_copied)
'''

# –ü—Ä–∏–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ï–ì–≠

# –¢–∏–ø 17 ‚Ññ63066
# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ–µ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:
# ‚Äî —Ä–æ–≤–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ —Ç—Ä–æ–π–∫–µ –ø—è—Ç–∏–∑–Ω–∞—á–Ω—ã–µ;
# ‚Äî —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —á–∏—Å–ª–æ –≤ —Ç—Ä–æ–π–∫–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 5;
# ‚Äî —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–æ–π–∫–∏ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
# –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 321.

# –í –æ—Ç–≤–µ—Ç–µ –∑–∞–ø–∏—à–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞: —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–æ–µ–∫,
# –∑–∞—Ç–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É —Å—É–º–º—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–∏—Ö —Ç—Ä–æ–µ–∫.
'''
M = [int(x) for x in open('files/17.txt')]
D = [x for x in M if abs(x) % 1000 == 321]
R = []
for i in range(len(M)-2):
    x, y, z = M[i:i+3]
    if len([p for p in (x, y, z) if len(str(abs(p))) == 5]) == 2:
        if any(p % 5 == 0 for p in (x, y, z)):
            if (x + y + z) > max(D):
                R.append(x + y + z)
print(len(R), max(R))
'''

# –¢–∏–ø 24 ‚Ññ27691
'''
# –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –±–æ–ª–µ–µ —á–µ–º –∏–∑ 106 —Å–∏–º–≤–æ–ª–æ–≤ A, B –∏ C. 
# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ —Å–∏–º–≤–æ–ª–æ–≤ A.
s = open('files/24.txt').readline()
s = s.replace('B', ' ').replace('C', ' ')
print(max([len(x) for x in s.split()]))


s = 'AA A AAA A AAAA AA A'
print(max([len(x) for x in s.split()]))  # 4
M = ['AA', 'A', 'AAA', 'A', 'AAAA', 'AA', 'A']
N = [2, 1, 3, 1, 4, 2, 1]
print(max(N))  # 4
'''

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = [2, 6]
# –ö–ï–ì–≠  = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
