# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Несколько слов про коллекции (последовательности) в Пайтон
'''
T = (1, 2, 3)  # tuple - кортеж
# 1. Полностью идентичны спискам, кроме: НЕЛЬЗЯ ИЗМЕНЯТЬ ЭЛЕМЕНТЫ КОРТЕЖА

S = {1, 2, 2, 3, 3, 3}  # set - множество
print(S)  # {1, 2, 3}
# 1. Не могут содержать копий числа

D = {'ключ': 'значение', 'один': 'one'}  # dict - словарь
# 1. Элемент словаря разбивается на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через ключ
print(D['один'])  # one
# 3. Ключи повторяться не могут иначе произойдет перезапись

D['один'] = 1
print(D)  # {'ключ': 'значение', 'один': 1}
'''


# Основные свойства списков
'''
L = [1, 2, 3] # list - список
# 1. Могут содержать в себе неограниченное кол-во элементов
# 2. Эти элементы могут быть различных типов данных (в отличие от массивов)
# 3. Каждый элемент списка имеет свой порядковый номер: индекc
# 4. Индексы элементов можно считать слева-направо начиная с 0 или права налево начиная с -1
# 5. В отличие от множеств/кортежей/строк через индексы элементов мы можем изменять значение элементов списка

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка M: {M[0]}')
print(f'Последний элемент списка M: {M[4]}')
print(f'Последний элемент списка M: {M[len(M)-1]}')
print(f'Последний элемент списка M: {M[-1]}')

M[0], M[-1] = 'e', 'a'
print(M)  # ['e', 'b', 'c', 'd', 'a']
'''


# Срезы списков/строк и других последовательностей
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# СРЕЗ[START : STOP-1 : STEP]
# СРЕЗ[START : STOP-1]

print(M[1:4])  # ['b', 'c', 'd']
print(M[:4])  # все элементы слева от 4 (не включительно)
print(M[2:])  # все элементы справа от 2 индекса

print(M[2:])  # Все элементы кроме первых двух
print(M[-3:])  # Последние три элементы

print(M[:])
print(M[::])  # берем все элементы (слева на право)

print(M[::2])  # - Все элементы с четными индексами
print(M[1::2])  # - Все элементы с нечетными индексами

print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - Все элементы в обратном порядке 
'''


# Функции списков
'''
L = [1, 3, 3, 3, 2, 2]

print(len(L))  # - Возвращает кол-во элементов в списке
print(sum(L))  # - Возвращает сумму элементов в списке (должны быть числа)

print(max(L), min(L))

print(sorted(L))  # [1, 2, 2, 3, 3, 3] - Возвращает отсортированный список в порядке возрастания
print(sorted(L, reverse=True))  # [3, 3, 3, 2, 2, 1] - Возвращает отсортированный список в порядке убывания

print(reversed(L))  # <list_reverseiterator object at 0x104bfb010>
print(list(reversed(L)))  # [2, 2, 3, 3, 3, 1] - переворачивает элементы списка

print(set(L))  # {1, 2, 3} - При переводе в set мы убираем копии элементов 
'''


'''
M = [2, '2', 2.0, True, 2+2, 7/2, '2'*2, 4<10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'ключ': 'значение', 'один': 'one'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'str'> 2
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 3.5
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'ключ': 'значение', 'один': 'one'}
'''


# Все методы списков в Python, которые понадобятся на ЕГЭ

# .APPEND()
# Метод .append() используется для добавления элемента в конец списка. Пример:
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)
my_list.append([1, 2, 3])
print(my_list)  # Вывод: [1, 2, 3, 4, 5, [1, 2, 3]]
'''
# Можно реализовать через конкатенацию (склеивание) списков:
'''
my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]
'''


# .REVERSE()
# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# Можно записать по другому через срез:
'''
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# .COUNT()
# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3
'''


# .REMOVE()
# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # Первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

my_list = [1, 2, 3, 2, 4]
while 2 in my_list:
    my_list.remove(2)
print(my_list)  # [1, 3, 4]
'''
# Можно удалить элемент через его индекс используя del:
'''
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # Индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# .INDEX()
# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # Вывод: 1
'''


# .SORT()
# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном порядке, если передан аргумент reverse=True. Пример:
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
'''
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]


alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
print(alp)  # ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
'''


# Вставляет элемент
M = [1, 2, 3, 4]
M.insert (1, 14)
print(M)  # [1, 14, 2, 3, 4]


# Генераторы списков
'''
# ГЕНЕРАТОР[что_кладем_в_список откуда_это_берем]
# ГЕНЕРАТОР[что_кладем_в_список откуда_это_берем при_каком_условии]

M = [x for x in range(10)]  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x**2 for x in range(10)]  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x / 4 for x in range(10)]  # [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25]

M = [x**2 for x in range(10) if x % 2 == 0]  # [0, 4, 16, 36, 64]


from random import randint
n = randint(5, 15)
R = [randint(0, 100) for _ in range(n)]
print(R)

chet = [x for x in R if x % 2 == 0]
nechet = [x for x in R if x % 2 != 0]
'''

# Решение 17 номера
'''
M = [int(x) for x in open('0. files/17.txt')]
A = [x for x in M if len(str(abs(x))) == 4]
B = [x for x in M if abs(x) % 100 == 25]
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if (x in A) + (y in A) + (z in A) <= 2:
        if (x + y + z) <= max(B):
            R.append(x + y + z)
print(len(R), max(R))
'''

# Создание списка с клавиатуры в одну строку
'''
# M = [int(input()) for _ in range(int(input()))]
# print(M)

M = [int(input(f'Элемент по индексу {i}: ')) for i in range(int(input('Сколько элементов: ')))]
print(M)
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Ника посмотреть подключение библиотек
