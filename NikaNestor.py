# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# № 23764 Демоверсия 2026 (Уровень: Базовый)
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10,
# найдите все числа, соответствующие маске 3?12?14*5,
# делящиеся на 1917 без остатка.
'''
# Вариант 1
from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x, x // 1917)

# Вариант 2
from re import *
for x in range(1917, 10**10, 1917):
    if fullmatch('3[0-9]12[0-9]14[0-9]*5', str(x)):
        print(x, x // 1917)

print(eval('2 + 2'))
print(eval('3 * (2 + 2)'))
'''

'''
import time
start = time.time()

def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
            # d.append(j)
            # d.append(x // j)
    return sorted(set(d))


print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]
print(divisors(1_000_000_000))

end = time.time()
print(end - start)
'''


# № 23763 Демоверсия 2026 (Уровень: Базовый)
# Пусть M – сумма минимального и максимального натуральных
# делителей целого числа, не считая единицы и самого числа.

# Напишите программу, которая перебирает целые числа, бо́льшие 800 000,
# в порядке возрастания и ищет среди них такие, для которых
# M оканчивается на 4.
#
# В ответе запишите в первом столбце таблицы первые пять
# найденных чисел в порядке возрастания,
# а во втором столбце – соответствующие им значения M.
'''
def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):  # не считая единицы и самого числа.
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

cnt = 0
for x in range(800_000+1, 10**10):
    d = divisors(x)
    if len(d) >= 2:
        M = min(d) + max(d)
        if M % 10 == 4:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''


# № 21909 Открытый вариант 2025 (Уровень: Базовый)
# Пусть R – сумма всех различных натуральных делителей целого числа.
# Напишите программу, которая перебирает целые числа, бо́льшие 500 000,
# в порядке возрастания и ищет среди них такие, для которых
# значение R оканчивается на цифру 6. В ответе запишите в первом столбце
# таблицы первые пять найденных чисел в порядке возрастания,
# а во втором столбце – пять соответствующих этим числам значений R.
'''
def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))


cnt = 0
for x in range(500_000+1, 10**10):
    d = divisors(x)
    if len(d) > 0:
        R = sum(d)
        if R % 10 == 6:
            print(x, R)
            cnt += 1
            if cnt == 5:
                break
'''



# № 21422 Досрочная волна 2025 (Уровень: Базовый)
# Напишите программу, которая перебирает целые числа, бóльшие 1 125 000,
# в порядке возрастания и ищет среди них такие, у которых
# есть натуральный делитель, оканчивающийся на цифру 7 и не равный ни самому числу, ни числу 7.
# В ответе запишите в первой строке таблицы первые пять найденных чисел в порядке возрастания,
# а во втором столбце – наименьший делитель для каждого из них, оканчивающийся цифрой 7,
# не равный ни самому числу, ни числу 7.
'''
def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))


cnt = 0
for x in range(1_125_000+1, 10**10):
    d = [j for j in divisors(x) if j % 10 == 7 and j != 7 and j != x]
    if len(d) > 0:
        print(x, min(d))
        cnt += 1
        if cnt == 5:
            break
'''


# № 18148 (Уровень: Базовый)
# (В. Колчев) Пусть M – сумма минимального и максимального натуральных
# делителей целого числа, не считая единицы и самого числа.
# Если таких делителей у числа нет, то считаем значение M равным нулю.
# Напишите программу, которая перебирает целые числа, бо́льшие 900 000,
# в порядке возрастания и ищет среди них такие, для которых
# M оканчивается на 46. В ответе запишите в первом столбце таблицы
# первые пять найденных чисел в порядке возрастания, а во втором
# столбце – соответствующие им значения M.
'''
def devisors(x):
    d = []
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            d += [j, x // j]

    return sorted(set(d))


k = 0
for x in range(900_000+1, 10 ** 10):
    d = devisors(x)
    if len(d) > 0:
        m = min(d) + max(d)
        if m % 100 == 46:
            k += 1
            print(x, m)
            if k == 5:
                break
'''

# № 17642 Основная волна 19.06.24 (Уровень: Базовый)
# Напишите программу, которая перебирает целые числа, большие 800000,
# в порядке возрастания и ищет среди них такие, у которых есть натуральный делитель,
# оканчивающийся на цифру 9 и не равный ни самому числу, ни числу 9.
# В ответе запишите в первом столбце таблицы первые пять найденных
# чисел в порядке возрастания, а во втором столбце — соответствующий
# минимальный делитель для каждого числа, оканчивающийся цифрой 9,
# не равный ни самому числу, ни числу 9.
# Строки выводятся в порядке возрастания найденных чисел.

def div(x):
    d = []
    for i in range(1,int(x**0.5)+1):
        if x % i == 0:
            d += [i, x // i]
    return sorted(set(d))

k = 0
for x in range(800000+1, 10**10):
    d = div(x)
    M = [j for j in d if j % 10 == 9 and j != x and j != 9]
    if len(M) > 0:
        k += 1
        print(x, min(M))
        if k == 5:
            break


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [5, 8, 9, 14, 17, 25]
# КЕГЭ = []
# на следующем уроке: Посмотреть 25 номер на простые множители
