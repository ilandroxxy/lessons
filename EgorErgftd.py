# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Теория множеств:
# P: {2, 3, 5, 7, 11, 13, 17, 19, ...} - множество простых чисел
# N: {1, 2, 3, ..., 1000, ..., +inf} - множество натуральных чисел
# Z: {-inf, ..., -1000, ..., -2, -1, 0, 1, 2, ..., 1000, ..., +inf} - множество целых чисел  N ∈ Z
# Q: {-inf,..., -3.4, -1/2, 0, 2, 1/2, 3/4,..., 1000/1, ..., +inf} - множество рациональных чисел N ∈ Z ∈ Q
# I: {-inf,..., -pi, 0, pi, 0.12321321312321.., ..., +inf} - множество иррациональных чисел N ∈ Z ∈ Q ∈ I
# R: N ∈ Z ∈ Q ∈ I ∈ R - множество вещественных/действительных значений
# C: множество комплексных чисел

# Типы данных переменных
'''
a = 5  # int (integer) - Целочисленные значения
print(type(a))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - Вещественные значения
print(7 / 2)  # 3.5
print(4 / 2)  # 2.0

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, тексты, и тд
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello

d1 = True  # bool (Boolean) Булева алгебра (Математическая логика)
d0 = False
print(True + True + True + False)  # 3
'''


# Типы данных коллекций (последовательностей):
'''
A = [1, 2, 3]  # list (список) - наиболее приближенный к понятию массив
# 1. Могут хранить в себе неограниченное кол-во элементов разных типов данных
# 2. У каждого элемента есть порядковый номер. Если счет слева направо, то он начинается с 0
# Если же счет справа налево, то он начинается с -1
# 3. Элементы списка можно не только брать, но и изменять по индексу
print(f'Первый элемент списка: {A[0]}')

B = (1, 2, 3)  # tuple (кортеж) - полностью идентичен списку, но нельзя изменять элементы

C = {1, 2, 3, 1, 2, 3}  # set (множество) - не может содержать двух одинаковых элементов.
print(C)  # {1, 2, 3}

D = {'один': 1, 'два': 2, 'три': 3}  # dict (словари)
# Элемент словаря состоит из двух частей: ключ и значение
# Доступ к значению элемента осуществляется через ключ
print(D['один'])  # 1
D['один'] = 'one'

for key, value in D.items():
    print(key, value)
    # один one
    # два 2
    # три 3
'''

# Комментарии к коду программы:
"""
# - это однострочный комментарий
'''
- многострочный комментароий
'''

# region Комментарий расширенный с именем
# endregion Комментарий расширенный с именем
"""

# f-строка
'''
weather = 'облачно'
temperature = 24
# Сегодня облачно, а температура 24 градуса!
print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''

# Конвертирование типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>


a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]  # [1, 2, 3, 2, 3] <class 'list'>
print(A, type(A))

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)  
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Интересный пример
'''
#    0   1    2     3     4      5       6       7          8         9          10                 11
M = [1, 2.0, '2', True, 4 + 2, 7 / 2, '2' * 4, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 1, 'два': 2, 'три': 3}]
#   -12 -11  -10  -9     -8     -7       -6     -5        -4         -3          -2                   -1

for elem in M:
    print(elem, type(elem))
    # 1 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 6 <class 'int'>
    # 3.5 <class 'float'>
    # 2222 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 1, 'два': 2, 'три': 3} <class 'dict'>
'''


# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
x = int(input('Ведите число: '))
'''

# Ввод списка с клавиатуры:
'''
print([int(x) for x in input('Введите числа через пробел: ').split()])

n = int(input('Введите длину списка: '))
M = []
for i in range(n):
    x = int(input('Введите элемент: '))
    M.append(x)
print(M)
'''

# Базовая арифметика:
'''
a = 7
b = 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку

print(f'{a} / {b} = {a / b} \n'  # Обычное вещественное деление
      f'{a} // {b} = {a // b} \n'  # Взятие только целой части от деления
      f'{a} % {b} = {a % b} \n')  # Остаток от деления

print(12345 // 100)  # 123
print(12345 % 100)  # 45

print()

print(f'Возвести число {a} в степень {b}: a ** b = {a ** b}')
# Возвести число 7 в степень 2: a ** b = 49
print(f'Взять квадрат от числа 16: 16 ** 0.5 = {16 ** 0.5}')
# Взять квадрат от числа 16: 16 ** 0.5 = 4.0
print(f'Взять кубический корень от числа 27: 27 ** (1/3): {27 ** (1/ 3)}')
# Взять кубический корень от числа 27: 27 ** (1/3): 3.0
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
