# region Домашка: ************************************************************


# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************

'''

    n = 1: Первый шаг Пети
    n = 2: Первый шаг Вани
    n = 3: Второй шаг Пети
    n = 4: Второй шаг Вани

    s - это кол-во камней в куче
    n - это шаг игры
'''


# № 20811 Апробация 05.03.25 (Уровень: Базовый)
'''
def F(s, n):
    if s >= 51:
        return n % 2 == 0  # False/True
    if n == 0:
        return 0  # False
    h = [F(s+1, n-1), F(s+4, n-1), F(s*2, n-1)]
    if (n - 1) % 2 == 0:
        return any(h)
    else:
        return all(h)


# Укажите минимальное значение S, при котором Петя не может выиграть за один ход,
# но при любом ходе Пети Ваня может выиграть своим первым ходом
print([s for s in range(1, 51) if F(s, 2)])

# найдите два наименьших значения S, при которых одновременно выполняются два условия:
# − Петя не может выиграть за один ход;
# − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
print([s for s in range(1, 51) if F(s, 3) and not F(s, 1)])

# найдите значение S, при котором одновременно выполняются два условия:
# – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
print([s for s in range(1, 51) if F(s, 4) and not F(s, 2)])
'''


# № 17682 Пересдача 04.07.24 (Уровень: Базовый)
'''
def F(s, n):
    if s >= 67:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(s+1, n-1), F(s+3, n-1), F(s*2, n-1)]
    if (n - 1) % 2 == 0:
        return any(h)
    else:
        #return all(h)  # При любом ходе Пети Ваня может выиграть своим первым ходом
        return any(h)   # Ваня выиграл своим первым ходом после неудачного первого хода Пети

print([s for s in range(1, 67) if F(s, 2)])
print([s for s in range(1, 67) if F(s, 3) and not F(s, 1)])
print([s for s in range(1, 67) if F(s, 4) and not F(s, 2)])
'''
# [33]
# [30, 32]
# [29, 31]


# № 17532 Основная волна 07.06.24 (Уровень: Базовый)
# В начальный момент в первой куче было шесть камней

# s1 + 1 | s2
# s1 | s2 + 1
# s1 * 3 | s2
# s1 | s2 * 3
'''
def F(s1, s2, n):
    if s1 + s2 >= 65:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(s1+1, s2, n-1), F(s1, s2+1, n-1), F(s1*3, s2, n-1), F(s1, s2*3, n-1)]
    if (n - 1) % 2 == 0:
        return any(h)
    else:
        return all(h)  # При любом ходе Пети Ваня может выиграть своим первым ходом
        return any(h)  # Ваня выиграл своим первым ходом после неудачного первого хода Пети


# print([s for s in range(1, 66) if F(6, s, 2)])  # [7,
print([s for s in range(1, 66) if F(6, s, 3) and not F(6, s, 1)])
print([s for s in range(1, 66) if F(6, s, 4) and not F(6, s, 2)])
'''

'''
from math import ceil, floor

print(ceil(7 / 2))  # 4 - округляет строго вверх
print(floor(7 / 2))  # 3 - округляет строго вниз
'''


# № 17875 Демоверсия 2025 (Уровень: Базовый)
# 1 куча: -2, -5, /3  |  <= 19   S ≥ 20.
'''
from math import ceil, floor

print(ceil(7 / 2))  # 4 - округляет строго вверх
print(floor(7 / 2))  # 3 - округляет строго вниз

def F(s, n):
    if s <= 19:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(s-2, n-1), F(s-5, n-1), F(floor(s/3), n-1)]
    if (n - 1) % 2 == 0:
        return any(h)
    else:
        return all(h)

print([s for s in range(20, 1000) if F(s, 2)])  # 1
print([s for s in range(20, 1000) if F(s, 3) and not F(s, 1)])
print([s for s in range(20, 1000) if F(s, 4) and not F(s, 2)])
'''

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19-21]
# КЕГЭ = []
# на следующем уроке: 6, 5, 22, 13, 17, 9, 19-21


# Первый пробник 7.03.25:
# Арина 12/29 -> 56 вторичных баллов +[1, 2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 23] -[7, 13, 17, 19-21, 18, 25]
