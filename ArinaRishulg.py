# region Домашка: ************************************************************


# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************


# № 20905 Апробация 05.03.25 (Уровень: Базовый)
# На числовой прямой даны два отрезка: P = [17; 58] и Q = [29; 80].
# Укажите наименьшую возможную длину такого отрезка A, что логическое выражение
# (x∈P)→(((x∈Q)∧¬(x∈A))→¬(x∈P))
'''
def F(x, a1, a2):
    P = 17 <= x <= 58
    Q = 29 <= x <= 80
    A = a1 <= x <= a2
    return P <= ((Q and (not A)) <= (not P))


R = []
M = [x / 5 for x in range(10*5, 100*5)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)
print(min(R))
'''
import tokenize

'''
M = []
# range(start = 0: stop = 5-1: step = 1)
for i in range(5):  # 0, 1, 2, 3, 4
    M.append(i)
    print(M)
'''


# № 12469 (Уровень: Базовый)
# На числовой прямой даны два отрезка: D = [7; 68] и C = [29; 100].
# Укажите наименьшую возможную длину такого отрезка A, для которого логическое выражение
# (x∈D)→((¬(x∈C)∧¬(x∈A))→¬(x∈D))
'''
def F(x, a1, a2):
    D = 7 <= x <= 68
    C = 29 <= x <= 100
    A = a1 <= x <= a2
    return D <= (((not C) and (not A)) <= (not D))


R = []
M = [x / 10 for x in range(5*10, 120*10)]
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) == True for x in M):
            R.append(a2 - a1)
print(min(R))  # 21.75 -> 21.8 -> 21.9 -> 22 
'''

'''
print(all(x % 2 == 0 for x in range(1, 10)))  # False
print(all(x % 2 == 0 for x in range(2, 10, 2)))  # True
print(all(x % 2 == 0 for x in [2, 4, 6, 8]))  # True
print(all(x % 2 == 0 for x in [2, 4, 6, 3, 8]))  # False
print(any(x % 2 != 0 for x in [2, 4, 6, 3, 8]))  # True
print(any(x % 2 != 0 for x in [2, 4, 6, 8]))  # False
'''


# № 20904 Апробация 05.03.25 (Уровень: Базовый)
# Значение арифметического выражения 3**100 – x, где x – целое положительное число,
# не превышающее 2030, записали в троичной системе счисления.
# Определите наибольшее значение x, при котором в троичной записи числа,
# являющегося значением данного арифметического выражения, содержится ровно один нуль.
'''
for x in range(1, 2030+1):
    n = 3 ** 100 - x
    r = []
    while n > 0:
        r.append(n % 3)
        n //= 3
    if r.count(0) == 1:
        print(x)
'''


# № 20906 Апробация 05.03.25 (Уровень: Базовый)
#
# Алгоритм вычисления значения функции
# F(n), где n – натуральное число, задан следующими соотношениями:
# F(n) = 1 при n=1;
# F(n) = n×F(n−1), если n>1.
# Чему равно значение выражения (F(2024)/4+F(2023))/F(2022)?

'''
import sys
sys.setrecursionlimit(100000)
def F(n):
    if n == 1:
        return 1
    if n > 1:
        return n * F(n-1)


print((F(2024) // 4 + F(2023)) // F(2022))
#     ~~~~~~~~^~~
# OverflowError: integer division result too large for a float

# [Previous line repeated 996 more times]
# RecursionError: maximum recursion depth exceeded
'''
# Ответ: 1025661


# № 14338 (Уровень: Средний)
# (Л. Шастин) Алгоритм вычисления значений функций
# F(n) и G(n) , где n – целое число, задан следующими соотношениями:

# F(n)=G(n)=n, если n<10;
# F(n)=3⋅n+G(n−2), если n>9;
# G(n)=n−2+F(n−1), если n>9.
#
# Чему равно значение выражения F(2204)−G(2200)?
'''
import sys
sys.setrecursionlimit(10000)

def F(n):
    if n < 10:
        return n
    if n > 9:
        return 3*n + G(n-2)


def G(n):
    if n < 10:
        return n
    if n > 9:
        return n - 2 + F(n-1)


print(F(2204) - G(2200))
'''


# № 18931 Новогодний вариант 2025 (Уровень: Базовый)
# (М. Попков) Снежная Королева создала волшебную функцию

# F(n), которая помогает ей вычислять силу зимы. Эта функция определяется следующим образом:
# F(n)=n−1, при n⩽3;
# F(n)=F(n−2)+n/2−F(n−4), если n>3 и n чётно;
# F(n)=F(n−1)×n+F(n−2), если n>3 и n нечётно, где n – целое неотрицательное число.
#
# Королева решила узнать, насколько велика сила зимы в её королевстве.
# Для этого вычислите значение выражения: F(4952)+2×F(4958)+F(4964).
'''
from functools import *
import sys
sys.setrecursionlimit(10000)


@lru_cache(None)
def F(n):
    if n <= 3:
        return n - 1
    if n > 3 and n % 2 == 0:
        return F(n - 2) + n / 2 - F(n - 4)
    if n > 3 and n % 2 == 0:
        return F(n - 1) * n + F(n - 2)


for n in range(5000):
    F(n)

print(F(4952)+2 * F(4958)+F(4964))
'''
# F(100) = 20  # 2сек
# F(100) = 20  # 2сек
# F(100) = 20  # 2сек
# F(100) = 20  # 2сек
# F(100) = 20  # 2сек
# F(100) = 20  # 2сек
#
# 20 F(100) = 20  # 2сек
# F(100), F(100),F(100), F(100), F(100)  = 20



import sys
sys.setrecursionlimit(10000)


def F(n):
    if n <= 3:
        return n - 1
    if n > 3 and n % 2 == 0:
        return F(n - 2) + n / 2 - F(n - 4)
    if n > 3 and n % 2 == 0:
        return F(n - 1) * n + F(n - 2)



print(F(4952)+2 * F(4958)+F(4964))

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 19-21]
# КЕГЭ = []
# на следующем уроке: 5, 22, 13, 17, 9, 10, 18, 19-21


# Первый пробник 7.03.25:
# Арина 12/29 -> 56 вторичных баллов +[1, 2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 23] -[7, 13, 17, 19-21, 18, 25]
