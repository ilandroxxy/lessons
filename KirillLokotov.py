# region Домашка: ************************************************************

# № 5747 (Уровень: Средний)
'''
import turtle as t
t.screensize(-5000, 5000)
t.tracer(0)
l = 40
for i in range(6):
    for i in range(3):
        t.forward(7 * l)
        t.right(120)
    t.right(60)

t.up()
for x in range(-50, 50):
    for y in range(-50, 50):
        t.goto(x * l, y * l)
        t.dot(2, 'red')

t.update()
t.done()
'''


# № 5186 (Уровень: Базовый)
#  Повтори 3 [Вперёд 10 Направо 120]
#  Поднять хвост
#  Вперёд 10 Направо 90 Вперёд 3
#  Опустить хвост
#  Повтори 4 [Вперёд 10 Направо 90]
'''
import turtle as t
t.screensize(-5000, 5000)
t.tracer(0)
l = 100

for i in range(3):
    t.fd(10 * l)
    t.rt(120)
t.up()
t.fd(10 * l)
t.rt(90)
t.fd(3 * l)
t.down()
for i in range(4):
    t.fd(10 * l)
    t.rt(90)


t.up()
for x in range(-50, 50):
    for y in range(-50, 50):
        t.goto(x * l, y * l)
        t.dot(2, 'red')

t.update()
t.done()
'''

# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************


# Списки list()

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# 1. Имеют неограниченное кол-во элементов различных типов данных
# 2. Каждый элемент имеет порядковый номер: индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списков можно не только брать через индексы, но и изменять их (это отличие от кортежей tuple())
'''
print(M[0], M[-1])  # 'a', 'e' - Взяли через индексы первый и последний элемент списка
M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

print(len(M))  # 5 - Возвращает длину списка (кол-во символов в нем)

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

for x in M:  # Пробежали элементы списка напрямую
    print(x, end=' ')  # a b c d e
print()

for i in range(len(M)):  # Пробежали элементы списка через индексы
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()

for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']
'''


# Что делать, если необходимо найти кол-во различных элементов списка
'''
from random import randint
N = [randint(0, 20) for _ in range(10)]

# Выводим список из 10 элементов:
print(N)  # [2, 5, 14, 11, 1, 11, 10, 9, 9, 11]

# При конвертации списка в множество set() копии элементов удаляются
print(set(N))  # {1, 2, 5, 9, 10, 11, 14}
'''

# Функции списков
'''
N = [1, 3, 4, 2, 3, 6, 7, 2]

print(sum(N))  # 28 - Возвращает сумму элементов списка
print(len(N))  # 8 - Возвращает длину списка (кол-во элементов в нем)
print(max(N), min(N))  # 7 1 - Возвращают максимальный и минимальный элемент списка
print(set(N))  # {1, 2, 3, 4, 6, 7} - Возвращает множество различных элементов (удаляет копии)
print(list(set(N)))  # {1, 2, 3, 4, 6, 7} - Возвращает список различных элементов (удаляет копии)

print(sorted(N))  # [1, 2, 2, 3, 3, 4, 6, 7] - Сортировка по возрастанию
print(sorted(N, reverse=True))  # [7, 6, 4, 3, 3, 2, 2, 1] - Сортировка по убыванию
'''


# Срезы элементов списка
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

# M[START : STOP-1 : STEP]
print(M[1:4])  # ['b', 'c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd']  - все, что слева
print(M[2:])  # ['c', 'd', 'e'] - все, что справа
print(M[::])  # Все, что слева и справа (слква на право)
print(M[::-1])  # Все, что слева и справа (справа на лево) - аналог .reverse()
print(M[0::2])  # ['a', 'c', 'e']
print(M[1::2])  # ['b', 'd']
'''

# Методы списков (Метод - это функции, которые работают только с одним типам данных)
'''
# N = [1, 3, 4, 2, 3, 6, 7, 2]

N = [1, 3, 4]

N.append(2)  # .append() добавляет элементы в конец списка
N.append(3)
print(N)  # [1, 3, 4, 2, 3]

N += [6, 7, 2]  # Конкатенация (склеивание) списков (справа)
print(N)  # [1, 3, 4, 2, 3, 6, 7, 2]

N = [0, 2] + N  # Добавили два элемента слева
print(N)  # [0, 2, 1, 3, 4, 2, 3, 6, 7, 2]

# Метод .append() используется для добавления элемента в конец списка. Пример:
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # Вывод: [1, 2, 3, 4]

# Можно реализовать через конкатенацию (склеивание) списков:
my_list = [1, 2, 3]
my_list += [4]
print(my_list)  # Вывод: [1, 2, 3, 4]


# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]


# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
my_list = [1, 2, 2, 3, 4, 2]
count_of_twos = my_list.count(2)
print(count_of_twos)  # Вывод: 3


# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

# Можно удалить элемент через его индекс используя del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
my_list = [1, 2, 3, 2, 4]
index_of_two = my_list.index(2)
print(index_of_two)  # Вывод: 1

# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном 
# порядке, если передан аргумент reverse=True. Пример:
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''

# Генераторы списков
'''
from random import randint
N = [randint(0, 20) for _ in range(10)]

M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x**2 for x in range(10)]
print(M)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

M = [x**2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]
'''

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6]
# КЕГЭ = []
# на следующем уроке:
