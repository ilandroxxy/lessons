# region –î–æ–º–∞—à–∫–∞: ************************************************************

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2<4, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'–æ–¥–∏–Ω': 'one', '–¥–≤–∞': 'two'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'–æ–¥–∏–Ω': 'one', '–¥–≤–∞': 'two'}
'''


'''
# x = int(input())
x = 23453
print(x % 10)  # 3
x = x // 10  # x //= 10
# x = 2345
print(x % 10)  # 5
x = x // 10
# x = 234
'''

'''
x = int(input())
a = x // 10000
b = (x // 1000) % 10
c = (x // 100) % 10
d = (x // 10) % 10
e = x % 10
print(a * b * c * d * e)
print(a + b + c + d + e)
'''

'''
s = int(input())
A = []
for i in str(s):
    A.append(int(i))
a = A[0]
b = A[1]
c = A[2]
d = A[3]
e = A[4]
print(a * b * c * d * e)
print(a + b + c + d + e)
'''

'''
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–∑ –Ω–µ–µ —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
print([int(x) for x in list(input()) if int(x) % 2 == 0])
'''


# A = tuple(input())
# a = int(A[0])
# b = int(A[1])
# c = int(A[2])
# d = int(A[3])
# e = int(A[4])
# print (a * b * c * d * e)
# print (a + b + c + d + e)

'''
from math import prod  
M = [int(x) for x in input()]
print(prod(M))  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print(sum(M))
'''

# endregion –î–æ–º–∞—à–∫–∞: ************************************************************
# #
# #
# region –£—Ä–æ–∫: ************************************************************

# –°–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ Python
'''
M = [2, 3, 4]

import math
print(math.prod(M))  # 24

import math as m  # –î–∞–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ math —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è m
print(m.prod(M))  # 24

from math import prod, gcd, sqrt  # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ math
print(prod(M))  # 24
print(gcd(24, 4))  # 4

from math import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å—Ä–∞–∑—É –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
print(prod(M))  # 24
print(gcd(24, 4))  # 4
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful

#  1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''

# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 2, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product
from itertools import permutations

combinations = list(product([1, 2, 3], repeat=2))
for combination in combinations:
    print(combination)

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
'''
import sys
sys.setrecursionlimit(10000)
'''


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
'''
from functools import *
@lru_cache(None)
def F(n):
'''

# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏:
'''
from fnmatch import fnmatch
if fnmatch('123', '*?3'):
    pass
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
'''


# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
import math as m
print(m.sqrt(16))
print(m.ceil(7/2))
'''

# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: if, elif, else

# x = int(input('x: '))
# y = int(input('y: '))
'''
x, y = -5, 6
if x > 0 and y > 0:
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    print('–õ–µ–∂–∞—Ç –Ω–∞ –æ—Å—è—Ö')
'''

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: not, or, and, ^, !=
'''
d = True
print(not d)  # False
print(not(not d))  # True

a, b = 5, -7
if a > 0 and b > 0:  # and - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    print('YES 1')
if a > 0 or b > 0:  # or - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ
    print('YES 2')
if (a > 0) ^ (b > 0):  # ^, != - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 
    print('YES 3')
if (a > 0) != (b > 0):
    print('YES 3')

a, b, c = 5, -7, 6
if (a > 0) + (b > 0) + (c > 0) == 1:
    print('–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) <= 2:
    print('–ù–µ –±–æ–ª–µ–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
'''

# endregion –£—Ä–æ–∫: ************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
