# region Домашка: ************************************************************


# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************

X = 5  # переменная - это удобный способ взаимодействия с памятью компьютера
print('Hello, world!')

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(a, type(a))  # 5 <class 'int'>
print(type(2+2))  # <class 'int'>
a2: int = 5

b = 5.0  # float (число с плавающей точкой) - Вещественные значения (дроби)
print(4/2, type(4/2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы, слова, тексты, ...
print(a * 4, c * 4)  # 20 5555 - при умножении строки на целое число строка дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello
print('Hello, ' + 'world!')  # Hello, world! - конкатенация строк, строки между собой можно склеивать через +

d1 = True  # bool (Boolean) - логические значения из математической логики: истинна и ложь
d0 = False
print(4 < 10)  # 4 меньше 10?  # True

n = 4
if n % 2 == 0:
    print('четное')
else:
    print('нечетное')
'''

# Основные математические множества
'''
P = {2, 3, 5, 7, 11, 13, 17, 19, ... + inf}  # Простые числа - имеют всего лишь два делителя: 1 и само на себя
N = {1, 2, 3, 4, 5, ..., 1000, ..., +inf}  # Натуральные числа (P ∈ N)
Z = {-inf, ..., -2, -1, 0, 1, 2, ..., +inf}  # Целые числа (P ∈ N ∈ Z) "Множество натуральные принадлежат в множеству целых"
Q = {-inf, ..., -4.0, -2.5, -1/2, 0, 1/2, 2.5, 5/1, ..., +inf}  # Рациональное число - дроби (P ∈ N ∈ Z ∈ Q)
I = {-inf, ..., -4.000000(1), -2.555(5), 0, число пи, ..., +inf}  # Иррациональное число - дроби (P ∈ N ∈ Z ∈ Q ∈ I)
R = {P, N, Z, Q, I}  # Вещественны (действительные) числа
Q = {a+ib, 4+2b, -4+3b, 4-6b, 4-b}  # Комплексные числа  (P ∈ N ∈ Z ∈ Q ∈ I ∈ R ∈ Q)

A*x**2 + B*x + C = 0  - квадратное уравнение 
D = B**2 - 4 * A * C
if D > 0: два корня
if D == 0: один корень
if D < 0: корней нет (на самом деле они есть, но лежат в множестве комплексных чисел)
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Хранит в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы списка мы можем не только брать его элементы, но и изменять их

B = (1, 2, 3)  # tuple (кортеж)
# 1. Менять элементы кортежа нельзя - в остальном идентичны спискам

C = {1, 2, 3, 2, 3}  # set (множества)
# 1. Не могут хранить дубликаты элементов - копии удаляются
print(C)  # {1, 2, 3}

D = {'один': 'one', 'два': 'two', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря делятся на две части: ключ и значение
# 2. Чтобы получить значение элемента словаря необходим его ключ
# 3. Ключи повторяться не могут, иначе происходит замена значения
print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two', 'автобус': 'bus'}

for key, value in D.items():
    print(key, value)
    # один 1
    # два two
    # автобус bus


A = []  # Это создание пустого списка
A = list()  # Это создание пустого списка

B = ()  # Это создание пустого кортеж
B = tuple()  # Это создание пустого кортеж

D = {}  # Это создание пустого словаря
D = dict()  # Это создание пустого словаря

C = set()   # Это создание пустого множества
C = {}  # Это создание пустого словаря
'''

# Красивый пример с типами данных в списке
'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2<4, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)  
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
s = input('Сюда можно ввести только строку: ')
print(s, type(s))

n = int(input('Сюда можно ввести только число: '))
print(n, type(n))
'''


# Работа с f-строками
'''
# Сегодня облачно, но температура 24 градуса!
weather = 'облачно'
temperature = 24
print('Сегодня ', weather, ', но температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', но температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, но температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, но температура {temperature} градуса!')
'''

# Базовая арифметика

x = 5.0
print(x, type(x))  # 5.0 <class 'float'>

y = 5,0
print(y, type(y))  # (5, 0) <class 'tuple'>

a, b = 7, 2
print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждом print() есть переход на новую строку

print(f'{a} / {b} = {a/b} \n'  # 3.5 - обыкновенное вещественное деление (всегда float)
      f'{a} // {b} = {a//b} \n'  # 3 - взятие только целой части от деления (всегда int) 
      f'{a} % {b} = {a%b}')  # 1 - взятие остатка от деления (всегда int)

print(123 // 10)  # 12
print(123 % 10)  # 3
print(-123 % 10)  # 7

print(f'Чтобы возвести число 3 в квадрат нужно использовать **: {3**2}')  # 9
print(f'Чтобы получить квадратный корень от числа 16 можно сделать так: {16 ** (0.5)}')  # 4.0
print(f'Чтобы получить кубический корень от числа 27 можно сделать так: {27 ** (1/3)}')  # 3.0


# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
