# region Домашка: ************************************************************


# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************

# Строчный тип данных str (string)
'''
# i  01234
s = 'abcde'

print(f'Первый элемент строки s: {s[0]}')
print(f'Последний элемент строки s: {s[-1]}')

for x in s:
    print(x, end=' ')  # a b c d e
print()
'''

# В отличии от списков в строках нельзя изменять элементы через индексы


# Задача изменить букву 'c' на 'CCC' (пересоздав ее)
'''
s = 'abcde'

# s[2] = 'CCC'
# TypeError: 'str' object does not support item assignment

s = s[:2] + 'CCC' + s[3:]
print(s)  # abCCCde
'''

# Срезы строк:
'''
# i  01234
s = 'abcde'
print(s[2:4])  # cd
print(s[:4])  # abcd - Все, что до 4 не включая его
print(s[2:])  # cde - Все, что после 2 включительно
print(s[::])  # abcde - Все элементы
print(s[::2])  # ace - Все элементы с четными индексом
print(s[1::2])  # bd - Все элементы с нечетными индексами
print(s[::-1])  # edcba - Все элементы в обратном порядке
'''


# Функции строк
'''
s = '2183397'
print(len(s))  # Возвращает длину строки s
print(max(s), min(s))  # Возвращает максимальный и минимальный элементы
print(sorted(s))  # ['1', '2', '3', '3', '7', '8', '9'] - Возвращает сортировку по возрастанию
print(sorted(s, reverse=True))  # ['9', '8', '7', '3', '3', '2', '1'] - Возвращает сортировку в обратном порядке
print(set(s))  # {'3', '1', '9', '8', '7', '2'} - Удалят копии элементов

s = input('Введите строку: ')
if len(s) == len(set(s)):
    print('Копий нет')
else:
    print('Копии есть')


# Как можно найти элементы без копий

s = '12321231212321'
r = ''
for x in s:
    if x not in r:
        r += x
print(r)  # 123

print(eval('1+3+1*31*1*3*1'))  # 97 - Считает выражение записанное в виде строки
n = 3 * 216**4 + 2 * 36**6 - 648
print(n)  # 10883911032

n = eval('3 * 216**4 + 2 * 36**6 - 648')
print(n)  # 10883911032
'''


# Методы строк
'''
s = '12321231212321'

print(s.count('2'))  # 6 - кол-во вхождений этого элемента в строку

print(s.index('2'))  # 1 - Возвращает индекс первого найденного элемента
print(s.rindex('2'))  # 12 - Возвращает индекс последнего найденного элемента

s = 'feprjkio342j3324'

for x in s:
    if x.isdigit():
        print(x, end=' ')  # 3 4 2 3 3 2 4
print()


for x in s:
    if x.isalpha():
        print(x, end=' ')  # f e p r j k i o j
print()

s = 'Hello, world!'
print(s.upper())  # HELLO, WORLD!

s = '12321231212321'

s = s.replace('2', '*')  # Заменили сразу все '2' на '*'
print(s)  # 1*3*1*31*1*3*1

s = s.replace('*', '+', 2)  # Заменили первые две "*" на '+'
print(s)  # 1+3+1*31*1*3*1


ip = '34.234.54.212'  # На каждое число выделяется по 1 байту (8 бит) поэтому числа лежат в диапазоне от 0 до 255
# 255_10 = 11111111_2

# Метод .split() разбивает строку на список строк через определенный символ
print(ip.split('.'))  # ['34', '234', '54', '212']

# В строке не должно рядом с цифрой 5 стоять четного числа
s = input('Введите строку: ')
if all(p not in s for p in '50 05 25 52 45 54 56 65 58 85'.split()):
    print('Верной')
else:
    print('Неверно')


# ''.join() - Преобразует список строк в строку 
IP = ['34', '234', '54', '212']
print('.'.join(IP))  # 34.234.54.212
print(','.join(IP))  # 34,234,54,212
print('* *'.join(IP))  # 34* *234* *54* *212
print(' '.join(IP))  # 34 234 54 212
'''

# Сумма цифр строки:
'''
s = '2390482309'

summa = 0
for x in s:
    summa += int(x)
print(summa)  # 40


summa2 = sum([int(x) for x in s])
print(summa2)  # 40


summa3 = sum(map(int, s))
print(summa3)  # 40


s = '23uyyu90482309'
summa2 = sum([int(x) for x in s if x.isdigit()])
print(summa2)  # 40
'''


# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6, 12]
# КЕГЭ = []
# на следующем уроке:
