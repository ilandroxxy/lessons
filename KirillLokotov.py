# region Домашка: ************************************************************


# endregion Домашка: ************************************************************
# #
# #
# region Урок: ************************************************************

# № 21716 ЕГКР 19.04.25 (Уровень: Базовый)
# A. Прибавь 3
# B. Прибавь 7
# C. Умножь на 3
# Сколько существует таких программ, которые исходное число 12 преобразуют в 89,
# и при этом траектория вычислений программы содержит числа 40 и 72 и не содержит 56?
'''
def F(a, b):
    if a > b or a == 56:
        return 0
    if a == b:
        return 1
    else:
        return F(a+3, b) + F(a+7, b) + F(a*3, b)

print(F(12, 40) * F(40, 72) * F(72, 89))
'''


# № 21604 (Уровень: Базовый)
# A. Вычти 1
# B. Вычти 4
# C. Найди целую часть от деления на 2
# Сколько существует таких программ, которые исходное число 34 преобразуют в число 9,
# при этом траектория вычислений содержит числа 20 и 30, и не содержит числа 24?
'''
def F(a, b):
    if a < b or a == 24:
        return 0
    if a == b:
        return 1
    else:
        return F(a-1, b) + F(a - 4, b) + F(a // 2, b)

print(F(34, 30) * F(30, 20) * F(20, 9))
'''


# № 19784 (Уровень: Базовый)
# A. Вычти 2
# B. Если число чётное, раздели на 2, иначе вычти 3

# Сколько существует программ, которые преобразуют
# исходное число 98 в число 1 и при этом траектория вычислений не содержит число 28?
'''
def F(a, b):
    if a < b or a == 28:
        return 0
    if a == b:
        return 1
    h = [F(a - 2, b)]
    if a % 2 == 0:
        h += [F(a // 2, b)]
    else:
        h += [F(a - 3, b)]
    return sum(h)

print(F(98, 1))



def F(a, b):
    if a < b or a == 28:
        return 0
    if a == b:
        return 1
    if a % 2 == 0:
        return F(a - 2, b) + F(a // 2, b)
    else:
        return F(a - 2, b) + F(a - 3, b)

print(F(98, 1))
'''


# № 19712 (Уровень: Средний)
# А. Вычесть 2
# В. Если число четное, Разделить на 2, Иначе Вычесть 7
#
# Сколько существует программ, для которых при исходном числе 40 результатом
# является число 1 и при этом никакая команда не повторяется более двух раз подряд?


'''
def F(a, b, c):
    if a < b:
        return 0
    if a == b:
        return 1 and 'BBB' not in c and 'AAA' not in c
    if a % 2 == 0:
        return F(a - 2, b, c+'A') + F(a // 2, b, c+'B')
    else:
        return F(a - 2, b, c+'A') + F(a - 7, b, c+'B')

print(F(40, 1, ''))
'''


# № 19711 (Уровень: Базовый)
# А. Прибавить 1
# В. Умножить на 2
# C. Возвести в квадрат
#
# Сколько существует последовательностей команд, для которых
# при исходном числе 3 результатом является число 48
# и при этом траектория вычислений не содержит число 36?


# № 19487 (Уровень: Средний)

# A. Прибавить 2
# B. Прибавить 3
# C. Умножить на 2
# Сколько существует программ, для которых при исходном числе 8 результатом является число 35,
# и при этом траектория вычислений не содержит чисел 20 и 30 одновременно?
'''
def F(a, b):
    if a > b :
        return 0
    if a == b:
        return 1
    else:
        return F(a+2, b) + F(a+3, b) + F(a*2, b)

print(F(8, 35) - F(8, 20) * F(20, 30) * F(30, 35))
'''


# № 18600 (Уровень: Базовый)
# A. Прибавь 1
# B. Умножь на 2
# C. Умножь на 3
# Сколько существует программ, для которых при исходном
# числе 10 результатом является число 70 и при этом траектория
# вычислений содержит число 30 или число 60, но не оба числа одновременно?

def F(a, b):
    if a > b or a == 30:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 2, b) + F(a * 3, b)

print(F(10, 60) * F(60, 70))


def F(a, b):
    if a > b or a == 60:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 1, b) + F(a * 2, b) + F(a * 3, b)

print(F(10, 30) * F(30, 70))



# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19-21, 23, 25]
# КЕГЭ = []
# на следующем уроке: 17, 8  {22, 24, 26, 27}
