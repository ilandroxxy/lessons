# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(a))  # <class 'int'>


b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>


c = '5'  # str (string) - строковый тип данных, хранит в себе текст

print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555

# При умножении строки на целое число - строка дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello

c1 = 'Hello'
c2 = ', '
c3 = 'world!'
print(c1 + c2 + c3)  # Hello, world!
# Операция конкатенции строк - склеивание нескольких строк в одну


d1 = True  # bool (Boolean) - основы Булевой алгебры, так же известной как "Математическая логика"
d0 = False
print(4 == 4)  # True

n = int(input('n:'))
m = int(input('m:'))
if n == m:
    print('Они равны')
else:
    print('Не равны')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '234', [1, 2, 3]]  # list (список)
# 1. Хранят в себе неограниченное кол-во элементов - различных типов данных
# 2. Каждый элемент списка имеет свой порядковый номер - индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа налево начиная с -1
# 4. В отличие от строк и кортежей в списках можно изменять значения элементов через индекс

# i   0    1    2    3
M = ['a', 'b', 'c', 'd']
# -i -4   -3   -2   -1

print(M[0])  # a - вывели первый элемент списка
print(M[-1])  # d - вывели последний элемент списка

M[0], M[-1] = 'A', 'D'
print(M)  # ['A', 'b', 'c', 'D']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, но нельзя изменять элементы

from itertools import product, permutations
for p in permutations('abcd'):
    print(p)


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. В множестве не может быть копий, поэтому он их удаляет

M = [1, 2, 2, 3, 3, 3]
print(len(M))  # 6 - длина списка М
print(len(set(M)))  # 3 - кол-во различных значений внутри списка М

# len() - это функция, которая возвращает кол-во элементов в последовательности (длину)


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
print(D['один'])  # one
# 1. Элементы словаря разбиваются на две части: ключи и значение
# 2. Ключ у каждого элемента индивидуальный, если использовать два одинаковых ключа, то значение перезапишется
# 3. Доступ к значению элемента словаря осуществляется через его ключ

D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}

for key, value in D.items():
    print(key, value)
    # один 1
    # два two
'''

'''
M = [4, 4.0, '4', True, 4+4, 4/2, '4'*4, 4==4, [1, 2, 3], (1, 2, 3), {1, 2, 3},  {'один': 'one', 'два': 'two'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 4
    # <class 'float'> 4.0
    # <class 'str'> 4
    # <class 'bool'> True
    # <class 'int'> 8
    # <class 'float'> 2.0
    # <class 'str'> 4444
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите текст: ')
print(s)

x = int(input('Введите число: '))
print(x)
'''


# Работа с f-строками
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Сегодня', weather, ', а температура: ', temperature, 'градусов!')
print('Сегодня ' + weather + ', а температура: ' + str(temperature) + ' градусов!')
print('Сегодня {}, а температура: {} градусов!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура: {temperature} градусов!')
'''

# Базовая арифметика

a, b = 7, 2


# \n - переход на новую строку
print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть один переход на новую строку /n

# Все виды деления в Python
print(f'{a} / {b} = {a / b} \n'  # 3.5 - вещественное деление, то есть результат всегда float() 
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление, то есть взятие только целая часть 3.99999 / 1 == 3
      f'{a} % {b} = {a % b}')  # 1 - взятие остатка от деления 7 / 2 это 3 целых и 1/2 -> остаток 1

print()

n = int(input('n: '))
if n % 2 == 0:
    print('Делится на два / Кратно двум / Число n четное')
elif n % 3 == 0:
    print('Делится на три / Кратно трем')
elif n % 10 == 7:
    print('Число n оканчивается на 7')
elif n % 100 == 12:
    print('Число n оканчивается на 12')
elif n % 1000 == 125:
    print('Число n оканчивается на 125')

print()

from math import ceil, floor, sqrt

print(4/3)  # 1.33333333333

# floor - это функция округления вниз
print(floor(4/3))  # 1

# ceil - это функция округления вверх
print(ceil(4/3))  # 2

print()

print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b}')
print(4 ** 2)  # 16
print(3 ** 3)  # 27
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Библиотеки перечислить, Условные операторы, Циклы
