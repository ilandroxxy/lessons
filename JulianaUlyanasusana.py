# region Домашка: ******************************************************************

'''
import turtle as t
t.screensize(-2000, 2000)
t.tracer(0)
t.lt(90)  # обязательно
size = 100  # обязательно

t.rt(120)
for i in range(8):
    t.fd(4 * size)
    t.rt(60)


t.up()
for x in range(-50, 50):
    for y in range(-50,  50):
        t.goto(x*size, y*size)
        t.dot(3, "red")
t.update()  # обязательно
t.done()  # обязательно
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1
'''
print(f'Первый элемент списка M: {M[0]}')  # a
print(f'Последний элемент списка M: {M[-1]}')  # e

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

# 1. Могут хранить в себе неограниченное кол-во элементов, причем различных типов данных (в отличие от строк и массивов)
# 2. Каждый элемент имеет свой порядковый номер: индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы мы можем не только брать элементы списка, но и изменять их значения (в отличие от строк и кортежей)
'''

# Работа с циклами for:
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

# range(start, stop-1, step)
for i in range(len(M)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(M[i], end=' ')  # a b c d e
print()

for i in range(len(M)):
    M[i] = M[i] * i
print(M)  # ['', 'b', 'cc', 'ddd', 'eeee']


# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

for x in M:  # Пробегаем элементы списков напрямую
    print(x, end=' ')  # a b c d e
print()

for x in M:
    if x in 'ae':
        print(x, end=' ')  # a e - Взяли только гласные элементы
print()


s = '345213213215434521'
for x in s:
    if x in '02468':
        print(x, end=' ')  # 4 2 2 2 4 4 2 
print()
'''


# Срезы списков list()
'''
# range(start , stop-1 , step)
#  срез[start : stop-1 : step]

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

print(M[1:4])  # ['b', 'c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd'] - Все элементы слева от 4 (не включая)
print(M[2:])  # ['c', 'd', 'e'] - Все элементы справа от 2 (включая)
print(M[:])   # ['a', 'b', 'c', 'd', 'e'] - Все элементы слева-направо
print(M[::])   # ['a', 'b', 'c', 'd', 'e'] - Все элементы слева-направо
print(M[0::2])   # ['a', 'c', 'e'] - Все элементы с четными индексами
print(M[1::2])   # ['b', 'd'] - Все элементы с нечетными индексами

# Особенно важные для нас срезы:

print(bin(8))  # 0b1000
print(bin(8)[2:])  # 1000 - Все элементы кроме первых двух

print(M[1:-1])  # ['b', 'c', 'd'] - Все элементы кроме первого и последнего

print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - Все элементы в обратном порядке
'''

# Функции списков:
'''
M = [1, 2, 1, 2, 3, 4]

print(len(M))  # 6 - Функция len() - возвращает длину списка (кол-во элементов в нем)
print(sum(M))
print(min(M), max(M))
print(sorted(M))  # [1, 1, 2, 2, 3, 4] - Сортирует по возрастанию
print(sorted(M)[::-1])  # [4, 3, 2, 2, 1, 1] - Сортирует по убыванию возрастанию
print(sorted(M, reverse=True))  # [4, 3, 2, 2, 1, 1] - Сортирует по убыванию возрастанию

print(set(M))  # {1, 2, 3, 4} - Конвертируем в множество, то есть убираем копии
'''

# Все методы списков в Python, которые понадобятся на ЕГЭ
# Методы - это те же функции, но локально для определенных типов данных


# Метод .append() используется для добавления элемента в конец списка.
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(0)
print(my_list)  # Вывод: [1, 2, 3, 4, 0]

# Можно реализовать через конкатенацию (склеивание) списков:
my_list = [1, 2, 3]
my_list += [4, 5]
print(my_list)  # Вывод: [1, 2, 3, 4]
'''


# Метод .reverse() изменяет порядок элементов в списке на обратный.
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Метод .count() возвращает количество вхождений заданного элемента в список.
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3
'''


# Метод .remove() удаляет первое вхождение указанного элемента из списка.
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

my_list = [1, 2, 3, 2, 4]
while 2 in my_list:
    my_list.remove(2)
print(my_list)  # [1, 3, 4]

# Можно удалить элемент через его индекс используя del:

# i        0  1  2  3  4
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке.
'''
my_list = [1, 2, 3, 2, 4]
index_of_two = my_list.index(2)
print(index_of_two)  # Вывод: 1


# i        0  1  2  3  4
my_list = [1, 2, 3, 2, 4]

for i in range(len(my_list)):
    if my_list[i] == 2:
        print(i, end=' ')  # 1 3
print()
'''

# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном порядке,
# если передан аргумент reverse=True.
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''

# .insert() добавляет на определенный индекс новый элемент
'''
my_list = [1, 2, 4, 5]
my_list.insert(2, 3)  # index = 2, value = 3
print(my_list)  # [1, 2, 3, 4, 5]
'''


# Генераторы списков
'''
# генератор [что кладем | откуда берем]

M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# генератор [что кладем | откуда берем | при каком условии]
M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

M = [x**2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]


from random import randint
M = [randint(0, 100) for x in range(10)]
print(M)  # [11, 41, 34, 61, 41, 98, 22, 89, 55, 99]

chet = [x for x in M if x % 2 == 0]
print(chet)  # [34, 98, 22]
nechet = [x for x in M if x % 2 != 0]
print(nechet)  # [11, 41, 61, 41, 89, 55, 99]

copied = [x for x in M if M.count(x) > 1]
print(copied)  # [41, 41]
not_copied = [x for x in M if M.count(x) == 1]
print(not_copied)  # [11, 34, 61, 98, 22, 89, 55, 99]
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6]
# КЕГЭ  = []
# на следующем уроке:
