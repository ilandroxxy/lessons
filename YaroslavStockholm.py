# region –î–æ–º–∞—à–∫–∞: ******************************************************************

# –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –ø—è—Ç–∏–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
'''
n = 123
print(n // 100)  # 1
print((n // 10) % 10)  # 2
print(n % 10)  # 3

p = int(input())
a = p // 10000
b = (p // 1000) % 10
c = (p // 100) % 10
d = (p // 10) % 10
e = p % 10

print(a * b * c * d * e)
print(a + b + c + d + e)
'''

'''
# i  01234
s = '34256'
print(int(s[0]))  # 3

A = input()  # 34256

a = int(A[0])
b = int(A[1])
c = int(A[2])
d = int(A[3])
e = int(A[4])
print(a * b * c * d * e)
print(a + b + c + d + e)
'''

'''
import string
print(string.digits)  # 0123456789
print(string.ascii_uppercase)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ
print(string.punctuation)  # !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~


from string import digits, ascii_uppercase
alphabet = digits + ascii_uppercase  
# 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
alphabet = sorted('01234567890QWERTYUIOPASDFGHJKLZXCVBNM')

M = []
for x in input():
    if x.isdigit() and x in '02468':
        M.append(int(x))
print(M)

M = [int(x) for x in input() if x.isdigit() and x in '02468']
print(M)

from math import *
M = [int(x) for x in input()]
print(prod(M))
print(sum(M))
'''

# PEP8 - –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –Ω–æ—Ä–º—ã –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∫–æ–¥–∞ –Ω–∞ –ü–∞–π—Ç–æ–Ω

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************


# –°–ø–æ—Å–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏
'''
M = [1, 2, 3, 4, 5]

import math
print(math.prod(M))  # 120


import math as m  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É math –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –µ–µ –≤ m
print(m.prod(M))  # 120


# ctrl + B - –ø–æ–∏—Å–∫ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º/—Ñ—É–Ω–∫—Ü–∏—è–º python
from math import prod, sqrt  # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
print(prod(M))  # 120


from math import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å—Ä–∞–∑—É –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(prod(M))  # 120
print(sqrt(16))  # 4.0
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product, permutations

combinations = list(product("abc", repeat=3))
for combination in combinations:
    print(''.join(combination))
    # aaa
    # aab
    # aac
    # aba
    # abb
    # abc
    # aca
    # acb
    # acc
    # baa
    # bab
    # bac
    # bba
    # bbb
    # bbc
    # bca
    # bcb
    # bcc
    # caa
    # cab
    # cac
    # cba
    # cbb
    # cbc
    # cca
    # ccb
    # ccc


perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''


# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(10000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
    pass
'''


# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏:
'''
from fnmatch import fnmatch
if fnmatch('123', '*?3'):
    pass
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
'''


# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
import math as m
print(m.sqrt(16))
print(m.ceil(7/2))
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–≤–µ—Ç–≤–ª–µ–Ω–∏–µ): if, elif, else

# if - –µ—Å–ª–∏
# elif - –∏–Ω–∞—á–µ –µ—Å–ª–∏
# else - –∏–Ω–∞—á–µ

# x = int(input('x: '))
# y = int(input('y: '))
'''
x, y = -5, 6

if x > 0 and y > 0:
    print(1)
elif x < 0 and y > 0:
    print(2)
elif x < 0 and y < 0:
    print(3)
elif x > 0 and y < 0:
    print(4)
else:
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å—è—Ö')

print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, in, not, ^, !=, ==
'''
flag = True
print(not flag)  # False
print(not (not flag))  # True

s = '2132134231'
for x in s:
    if x in '02468':
        print(x, end=' ')  # 2 2 4 2
print()

a, b, c = 5, -6, 7
if a > 0 and b > 0:
    print(1)  # and - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
if a > 0 or b > 0:
    print(2)  # or - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–µ—Ä–Ω–æ
if (a > 0) ^ (b > 0):
    print(3)  # ^, != - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
if (a > 0) != (b > 0):
    print(3)
    
print(True + True + False)  # 2

a, b, c = 5, -6, 7
#    True  +  False  +  True
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('–¢–æ–ª—å–∫–æ –¥–≤–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) <= 2:
    print('–ù–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
'''

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠  = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
