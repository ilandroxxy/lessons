# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - это однострочный комментарий ctrl + /
'''
- Многострочный комментарий
"""
Сегодня я читал роман 'Война и мир'
"""
'''

print('Сегодня я читал роман "Война и мир"')
# Сегодня я читал роман "Война и мир"

x = 5
print(x, type(x))  # 5 <class 'int'>

# Переменная - это удобный способ хранения данных

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(2 + 2, type(2 + 2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>
b2 = 5,0
print(b2, type(b2))  # (5, 0) <class 'tuple'>

c = '5'
print(a * 4, c * 4)  # 20 5555 - Строка при умножении на целое число дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello
print('1' * 99)  # 11111111111111111111111111111111111...
new_message = 'Hello, ' + 'world!'  # Операция конкатенации (склеивание) строк
print(new_message)  # Hello, world!
# TypeError: can only concatenate str (not "int") to str

d1 = True
d0 = False  # bool (Boolean) - Основы Булевой алгебры (Математическая логика)
print(4 < 10)  # True
flag = True
print(not flag)  # False
print(not(not flag))  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # Первый элемент списка М
print(M[-1])  # Последний элемент списка М


A = [1, 2, 3, 'True', True, [1, 2, 3]]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во значений, различных типов данных
# 2. Каждый элемент списка имеет свой порядковый номер: индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индесы мы можем брать элементы списка или изменять их


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, кроме: нельзя изменять элементы кортежа


C = {1, 2, 3, 2, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. В множествах не может лежать двух одинаковых значений

# N = {1, 2, 3, ..., + inf} - множество натуральных чисел
# Z = {-inf, ..., -2, -1, 0, 1, 2, ..., +inf}  - множество целых чисел

# A = {1, 2, 3, 4}
# B = {3, 4, 5, 6}
# Объединение: {1, 2, 3, 4, 5, 6}
# Пересечение: {3, 4}
# Разность A / B: {1, 2}

D = {'один': 'one', 'два': 'two'}  # dict (словарь)
print(D)  # {'один': 'one', 'два': 'two'}
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через ключ
# 3. Ключ элемента не может дублироваться, если это происходит, то значение перезаписывается

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}

# print(D['три'])  # KeyError: 'три'

print(D.get('три'))  # None
D['три'] = 'three'
if D.get('три') == None:
    D['три'] = 'three'
    print(D)  # {'один': 1, 'два': 'two', 'три': 'three'}
else:
    print('Такой ключ уже существует')
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')
print(s, type(s))  # 56 <class 'str'>

n = int(input('Введите число: '))
print(n, type(n))
'''


# Работа с f-строками
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
# Напишите текст: "Сегодня облачно, а температура 24 градуса!"
print("Сегодня ", weather, ", а температура ", temperature, " градуса!")
print("Сегодня " + weather + ", а температура " + str(temperature) + " градуса!")
print("Сегодня {}, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а температура {temperature} градуса!")
'''


# Арифметические действия
'''
a, b = 7, 2
# a = 7
# b = 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

for i in range(10):
    print(i, end='*%*')  # 0*%*1*%*2*%*3*%*4*%*5*%*6*%*7*%*8*%*9*%*
print()

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обычное вещественное деление (результат всегда float)
      f'{a} // {b} = {a // b} \n'  # 3 - Взятие целой части от деления
      f'{a} % {b} = {a % b}')  # 1 - Взятие остатка от деления

print(123 // 10)  # 12
print(123 % 10)  # 3 - Таким образом мы можем проверять на какую цифру/число заканичивается число
print(-123 % 10)   # 7

print(1234 // 100)  # 12
print(1234 % 100)  # 34

print()

print(f'Возведем число {a} в степень {b}: {a ** b}')
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
