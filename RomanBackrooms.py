# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

'''
x = 15  # переменная - это удобный способ взаимодействия с ячейками памяти
print(x, type(x))  # 15 <class 'int'>

s = '12345'
summa = sum(map(int, s))
print(summa)  # 15
'''

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(2+2, type(2+2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'> - всегда вещественное деление дает значения типа float

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы, слова, текст и тд тп
print(a * 4, c * 4)  # 20 5555 - При умножении строки на целое число сторка дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello
new_message = 'Hello, ' + 'world!'  # Строки между собой можно конкатенировать (склеивать)
# TypeError: can only concatenate str (not "int") to str
print(new_message)  # Hello, world!
print('Сегодня я читал книгу "Война и мир"')

d0 = False
d1 = True  # bool (Boolean) - элементы Булевой алгебры (Математическая логика) 
'''

# Типы данных коллекций (последовательности)
'''
A = [1, 2, 3, '4', True, [1, 2, 3]]  # list (список)
print(type(A))  # <class 'list'>

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # 'a' - первый элемент списка
print(M[-1])  # 'e' - последний элемент списка

M[0], M[-1] = 'A', 'E'
print(M)

# Использование индексов через срезы
print(M[1:3])  # ['b', 'c']
print(M[::-1])  # ['e', 'd', 'c', 'b', 'a']


M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

# 1. Хранят в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начиная с 0, а можно справа-налево начиная с -1
# 4. Через индексы мы можем не только брать значение элементов, но и изменять его


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичны спискам за исключением: нельзя изменять элементы кортежа


C = {1, 2, 3}  # set (множества)
# 1. В множестве элементы не могу повторяться, то есть копии будут удалены

M = [1, 2, 1, 2, 3, 3, 4, 0]  # Сколько различных значений есть в списке?
print(set(M))  # {0, 1, 2, 3, 4}


D = {'один': 'one', 'два': 'two', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря состоят из двух частей: ключ и значение
# 2. Взятие значения элемента словаря осуществляется через его ключ
# 3. Ключи не могут дублироваться, то есть при использовании двух одинаковых ключей, произойдет перезапись значения

print(D['один'])  # one
D['один'] = 'ONE'
print(D)  # {'один': 'ONE', 'два': 'two', 'автобус': 'bus'}
'''

name = 'Роман'
print(f'Привет, {name}')  # Привет, Роман


# Работа с f-строки
# Напишите текст на экране: "Сегодня облачно, а погода 24 градуса!"
'''
weather = 'облачно'
temperature = 24
print("Сегодня ", weather, ", а погода ", temperature, " градуса!")
print("Сегодня " + weather + ", а погода " + str(temperature) + " градуса!")
# TypeError: can only concatenate str (not "int") to str
print("Сегодня {}, а погода {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а погода {temperature} градуса!")
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Базовая арифметика
'''
a, b = 7, 2
print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b} ')

print()  # В каждой функции print() есть переход на новую строку '\n'

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обычное вещественное деление (дроби - результат всегда float) 
      f'{a} // {b} = {a // b} \n'  # 3 - Взятие только лишь целой части от деления (3.9999 // 1 == 3) 
      f'{a} % {b} = {a % b}')  # 1 - Взятие остатка от деления

print(123 // 10)  # 12
print(123 % 10)  # 3 - таким образом мы можем проверять, какая цифра стоит в конце числа

print(-123 % 10)  # 7
print(abs(-123) % 10)  # 3 - Функция abs() - взятие модуля от числа (то есть убирает знак - )

print(f'Возведем число {a} в степень числа {b}: {a ** b}')  # 49

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0
'''

'''
import math
print(math.sqrt(16))

import math as m  # Подключаем библиотеку с коротки именем m
print(m.sqrt(16))

from math import sqrt, pow  # Подключаем конкретные функции из библиотеки
print(sqrt(16))

from math import *  # Подключаем сразу все содержимое библиотеки
print(sqrt(16))
print(prod([1, 2, 3]))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
