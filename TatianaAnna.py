# region Домашка: ******************************************************************

'''
import sys
sys.setrecursionlimit(10**8)

def F(n):
    if n == 1:
        return 1
    if n > 1:
        return (n + 1) * F(n - 1)

print((F(2024) - 3 * F(2023)) // F(2022))
'''


# https://stepik.org/lesson/1038709/step/4?unit=1062775
'''
import time
start = time.time()

import sys
sys.setrecursionlimit(10**8)
def F(n):
    if n > 1000000:
        return n
    if n <= 1000000:
        return n + F(2 * n)

def G(n):
    return F(n) / n

r = G(2000)

cnt = 0
for n in range(1, 10**6 + 1):
    if G(n) == G(2000):
        cnt += 1
print(cnt)

end = time.time()
print(end - start)
'''


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# № 21907 Открытый вариант 2025 (Уровень: Базовый)
# A. Прибавить 1
# B. Прибавить 2
# C. Умножить на 2
# Сколько существует программ, для которых при исходном
# числе 3 результатом является число 18, при этом траектория
# вычислений содержит число 14 и не содержит 8?
'''
# Вариант 1
def F(a, b):
    if a > b or a == 8:
        return 0
    if a == b:
        return 1
    else:
        return F(a+1, b) + F(a+2, b) + F(a*2, b)

print(F(3, 14) * F(14, 18))

# Вариант 2
def F(a, b):
    if a >= b or a == 8:
        return a == b  
    return F(a+1, b) + F(a+2, b) + F(a*2, b)

print(F(3, 14) * F(14, 18))
'''


# № 23761 Демоверсия 2026 (Уровень: Базовый)
# A. Вычесть 1
# B. Вычесть 4
# C. Найти целую часть от деления на 3
# Сколько существует программ, для которых при исходном числе 19 результатом является 2,
# при этом траектория вычислений не содержит числа 7 и содержит 13?
'''
def F(a, b):
    if a < b or a == 7:
        return 0
    if a == b:
        return 1
    else:
        return F(a-1, b) + F(a-4, b) + F(a//3, b)

print(F(19, 13) * F(13, 2))

# Вариант 2
def F(a, b):
    if a <= b or a == 7:
        return a == b
    return F(a-1, b) + F(a-4, b) + F(a//3, b)

print(F(19, 13) * F(13, 2))
'''


# № 21420 Досрочная волна 2024 (Уровень: Базовый)
# A. Прибавить 1
# B. Прибавить 2
# C. Умножить на 2
# Сколько существует программ, которые преобразуют число 7 в число 51,
# и при этом траектория
# вычислений содержит числа 13 и 15, но не содержит числа 35?
'''
def F(a, b):
    if a > b or a == 35:
        return 0
    if a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 2, b) + F(a * 2, b)

print(F(7, 13) * F(13, 15) * F(15, 51))
'''


# № 21716 ЕГКР 19.04.25 (Уровень: Базовый)
# A. Прибавь 3
# B. Прибавь 7
# C. Умножь на 3
# Сколько существует таких программ, которые исходное
# число 12 преобразуют в 89, и при этом траектория вычислений
# программы содержит числа 40 и 72 и не содержит 56?
'''
def F(a, b):
    if a >= b or a == 56:
        return a == b
    return F(a+3, b) + F(a+7, b) + F(a*3, b)
print(F(12, 40) * F(40, 72) * F(72, 89))
'''


# № 20967 (Уровень: Базовый)

# A. вычти 2
# B. вычти 3
# C. найди целую часть от деления на 3

# Сколько существует таких программ, которые исходное
# число 48 преобразуют в число 4, и при этом траектория вычислений
# содержит числа 17 и 25 и не содержит числа 15?
'''
def F(a, b):
    if a < b or a == 15:
        return 0
    if a == b:
        return 1
    else:
        return F(a - 2, b) + F(a - 3, b) + F(a // 3, b)

print(F(48, 25) * F(25, 17) * F(17, 4))
'''


# № 19253 ЕГКР 21.12.14 (Уровень: Базовый)
# A. вычти 1
# B. вычти 6
# C. найди целую часть от деления на 2

# Сколько существует таких программ, которые исходное число 34 преобразуют
# в число 6, и при этом траектория вычислений содержит числа 19 и 29 и не
# содержит числа 24?
'''
def F(a, b):
    if a <= b or a == 24:
        return a == b
    return F(a-1, b) + F(a-6, b) + F(a // 2, b)
print(F(34,29) * F(29, 19) * F(19, 6))
'''


# № 19784 (Уровень: Базовый)
# A. Вычти 2
# B. Если число чётное, раздели на 2, иначе вычти 3
# Сколько существует программ, которые преобразуют
# исходное число 98 в число 1 и при этом траектория
# вычислений не содержит число 28?
'''
def F(a, b):
    if a < b or a == 28:
        return 0
    if a == b:
        return 1
    else:
        return F(a-2, b) + F(a // 2 if a % 2 ==0 else a-3, b)

print(F(98, 1))
'''


# № 19783 (Уровень: Базовый)
# A. Вычти 2
# B. Если число чётное, раздели на 2, иначе вычти 3
# Сколько существует программ, которые преобразуют исходное
# число 55 в число 3 и при этом траектория вычислений не содержит число 18?
'''
def F(a, b):
    if a <= b or a == 18:
        return a == b
    return F(a-2, b)  + F(a // 2 if a % 2 ==0 else a-3, b)
print(F(55,3))
'''


# № 19712 (Уровень: Средний)
# А. Вычесть 2
# В. Если число четное, Разделить на 2, Иначе Вычесть 7
# Сколько существует программ, для которых при исходном числе 40
# результатом является число 1 и при этом никакая команда не повторяется
# более двух раз подряд?
'''
def F(a, b, c):
    if a <= b:
        return a == b and 'AAA' not in c and 'BBB' not in c
    else:
        return F(a-2, b, c+'A') + F(a // 2 if a % 2 == 0 else a - 7, b, c+'B')

print(F(40, 1, ''))
'''


# № 7011 (Уровень: Средний)
# A. Прибавь 2
# B. Прибавь 3
# С. Умножь на 2
# Сколько существует программ, для которых при исходном
# числе 2 результатом будет являться число 40, при этом траектория
# вычисления не содержит число 28, а также не содержит
# подпоследовательность команд BACA.


def F(a, b, c):
    if a >= b or a == 28:
        print(a == b, c)
        return a == b and 'BACA' not in c
    return F(a + 2, b, c+"A") + F(a + 3, b, c+'B') + F(a * 2, b, c+"C")

print(F(2, 40, ' '))


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 13, 14, 16, 23, 25]
# КЕГЭ = []
# на следующем уроке: В идеале на выходные взять повторение всех номером
