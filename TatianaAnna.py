# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# № 23742 Демоверсия 2026 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N.

# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются
# её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, не меньшее 200
'''
L = []
for n in range(1, 10000):
    s = f'{n:b}'  # s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]  # - её три последние двоичные цифры
    else:
        x = (n % 3) * 3  # - то остаток от деления умножается на 3
        s = s + f'{x:b}'  # - переводится в двоичную запись и дописывается в конец числа.
    r = int(s, 2)
    if r >= 200:
        L.append(n)
print(min(L))
'''


# № 23551 Пересдача 03.07.25 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1
# и справа дописывается 01
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, меньшее, чем 30.
'''
L = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r < 30:
        L.append(n)
print(max(L))
'''

# № 21891 Открытый вариант 2025 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи, и остаток от деления суммы на 2
# дописывается в конец числа (справа).
# б) над этой записью производятся те же действия – справа дописывается остаток от деления суммы цифр на 2.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите такое наименьшее число N, для которого результат работы алгоритма больше числа 253.
'''
L = []
for n in range(1, 10000):
    s = bin(n)[2:]
    for i in range(2):
        s = s + str(s.count('1') % 2)
    r = int(s, 2)
    if r > 253:
        L.append(n)
print(min(L))
'''

# Пару слов про метод .replace()
'''
s = '1232132312313213' 
s = s.replace('2', '*')  # '1*3*13*31*313*13'
s = s.replace('*', '+', 3)  # '1+3+13+31*313*13'
'''

# Замена через третью переменную
'''
a = 7
b = 2
a, b = b, a

x = a
a = b
b = x
'''

# № 22271 (Уровень: Средний)

# (О. Лысенков) На вход алгоритма подаётся натуральное число N.
# 1. Строится восьмеричная запись числа N.

# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если восьмеричная запись начинается на 5,
# то  все двойки в записи меняются на единицы, а все единицы меняются на  двойки
# после к числу приписывается 11 слева;

# б) если восьмеричная запись начинается не на 5,
# то к записи справа приписывается 10, а первый разряд полученной записи заменяется на 2.

# Укажите  максимальное число N, для которого результатом
# работы алгоритма является наибольшее  число R, меньшее 1354.
'''
L = []
for n in range(1, 10000):
    s = f'{n:o}'  # s = oct(n)[2:]
    if s[0] == '5':
        s = s.replace('2', '*')
        s = s.replace('1', '2')
        s = s.replace('*', '1')
        s = '11' + s
    else:
        s = s + '10'
        s = '2' + s[1:]  # а первый разряд полученной записи заменяется на 2.
    r = int(s, 8)
    if r < 1354:
        L.append((r, n))
print(max(L))  # (1352, 61)
'''

'''
L = []
for n in range(1, 10000):
    s = f'{n:o}'  # s = oct(n)[2:]
    if s[0] == '5':
        s = s.replace('2', '*')
        s = s.replace('1', '2')
        s = s.replace('*', '1')
        s = '11' + s 
    else:
        s = s + '10'
        s = '2' + s[1:]  # а первый разряд полученной записи заменяется на 2.
    r = int(s, 8)
    if r < 1354:
        if r == 1352:
            print(n, r)
        L.append(r)
print(max(L))
 '''

# Максимальный r: 1352

#  n   r
# 13 1352
# 21 1352
# 29 1352
# 37 1352
# 53 1352
# 61 1352


# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, меньшее 100.
'''
def G(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

L = []
for n in range(1, 10000):
    s = G(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + G(x, 3)
    r = int(s, 3)
    if r < 100:
        L.append(n)
print(max(L))
'''

# Универсальная функция перевода в различные системы счисления
# alp = '0123456789ABC...'
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def G(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r

print(G(100000000, 16))  # 5F5E100
print(int('5F5E100', 16))  # 100000000


# Но для ЕГЭ хватит и короткой версии:

def G(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

print(G(8, 2))  # 1000
print(int('1000', 2))  # 8


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6]
# КЕГЭ = []
# на следующем уроке:
