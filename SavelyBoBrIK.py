# region –î–æ–º–∞—à–∫–∞: ******************************************************************


# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************

# –°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à ctrl + B - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

# –°–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
'''
import math  # –°–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏
print(math.sqrt(16))  # 4.0

import math as m  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä m
print(m.sqrt(16))

from math import sqrt, factorial, dist  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(sqrt(16))
print(factorial(5))

from math import *  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
print(sqrt(16))
print(factorial(5))
'''


# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω
'''
count = 0
from itertools import permutations
for p in permutations('abc'):
    count += 1
    print(count, p)
    # 1 ('a', 'b', 'c')
    # 2 ('a', 'c', 'b')
    # 3 ('b', 'a', 'c')
    # 4 ('b', 'c', 'a')
    # 5 ('c', 'a', 'b')
    # 6 ('c', 'b', 'a')

count = 0
from itertools import *
for p in permutations('abc'):
    count += 1
    print(p)
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ!

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''

# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import permutations, product

combinations = list(product('abc', repeat=2))
for combination in combinations:
    print(combination)
    # ('a', 'a')
    # ('a', 'b')
    # ('a', 'c')
    # ('b', 'a')
    # ('b', 'b')
    # ('b', 'c')
    # ('c', 'a')
    # ('c', 'b')
    # ('c', 'c')

perms = list(permutations("abc", r=3))
for perm in perms:
    print(perm)
    # ('a', 'b', 'c')
    # ('a', 'c', 'b')
    # ('b', 'a', 'c')
    # ('b', 'c', 'a')
    # ('c', 'a', 'b')
    # ('c', 'b', 'a')
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:

# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
'''
import sys
sys.setrecursionlimit(10000)
'''

# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
'''
from functools import *
@lru_cache(None)
def F(n):
'''

# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ fnmatch –∏ re –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è 24 –Ω–æ–º–µ—Ä–∞ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏:
'''
from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x)

from re import *
for x in range(1917, 10**10, 1917):
    if fullmatch('3[0-9]12[0-9]14[0-9]*5', str(x)):
        print(x)
'''

# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@]^_`{|}~
'''

# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
from math import ceil, floor, dist

print(4 / 3)  # 1.3333
print(round(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
print(ceil(4 / 3))  # 2 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
print(floor(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑

print(dist([4, 5], [6, 7]))  # - –≤–µ—Ä–Ω–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏

# –õ–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é 
def d(A, B):
    x1, y1 = A
    x2, y2 = B
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

print(d([4, 5], [6, 7]))
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: if, elif, else
'''
n = int(input())
if n > 0:  # if - –µ—Å–ª–∏ 
    print('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')
elif n == 0:  # elif - –∏–Ω–∞—á–µ –µ—Å–ª–∏ 
    print('–†–∞–≤–Ω–æ –Ω—É–ª—é')
else:  # else - –∏–Ω–∞—á–µ
    print('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ')
'''


# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not, in, not in
'''
flag = True
print(not flag)  # False
print(not(not flag))  # True

s = '728346372864783264'
for x in s:
    if x in '02468':
        print(x, end=' ')  # 2 8 4 6 2 8 6 4 8 2 6 4
print()

for x in s:
    if x not in '02468':
        print(x, end=' ')  # 7 3 3 7 7 3 
print()


a, b, c = 4, 5, 6
if a > 0 and b > 0 and c > 0:
    print('and - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤–µ—Ä–Ω—ã–µ')
if a > 0 or b > 0 or c > 0:
    print('or - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ–µ')


if (a > 0) + (b > 0) + (c > 0) == 1:
    print('–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) >= 1:
    print('–•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) <= 2:
    print('–ù–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
'''

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
