# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - это однострочный комментарий

'''
- это многострочный комментарий (блок)
'''

# переменная - это удобный способ взаимодействия с ячейками памяти компьютера
'''
x = 5
print(x)  # 5
print(type(x))  # <class 'int'>
'''

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(2+2))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(type(b))  # <class 'float'>
print(type(2 + 3.0))  # <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

s = 5,0
print(type(s))  # <class 'tuple'>

c = '5'  # str (string) - строковый тип данных
print(a, c)  # 5 5
print(a*4, c*4)  # 20 5555
print("Hello " * 4)  # Hello Hello Hello Hello - при умножении строки на число строка дублируется

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # 'Hello, world!' - конкатенация строк (склеивание)

d1 = True  # bool (Boolean) - Основы Булевой алгебры / математическая логика
d0 = False

print(4 < 10)  # True
print(10 < 4)  # False

print(4 % 2 == 0)  # True
'''


# Типы данных коллекций/последовательность
'''
A = [1, 2, 3]  # list (список)
# 1. Могут содержать неограниченное кол-во элементов
# 2. Элементы могут содержать различные типы данных (в отличие от массивов)
# 3. Все элементы имеют свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы мы можем изменять элементы списка (в отличие от строк и кортежей)
'''

'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']


# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print('Первый элемент списка L:', L[0])
print('Последний элемент списка L:', L[4])
print('Последний элемент списка L:', L[-1])

s = 'abcde'
print(s[0])  # a
print(s[-1])  # e

M = [2, '2', 2.0, True, 2+2, '2'*2, 7/2, 4<10, [1, 2, 3], (1, 2, 3)]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'str'> 2
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'str'> 22
    # <class 'float'> 3.5
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
'''

'''
B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичный спискам, но нельзя изменять элементы

b = 5.0  # float (число с плавающей точкой)
print(type(b))  # <class 'float'>

s = 5,0
print(type(s))  # <class 'tuple'>
print(s)  # (5, 0)


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. Не могут содержать копий - копии удаляются


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ

print(D)  # {'один': 'one', 'два': 'two'}

print(D['один'])  # one

# 3. Ключи повторяться не могут - иначе они перезаписываются
D['три'] = 'three'
D['один'] = '1'
print(D)  # {'один': '1', 'два': 'two', 'три': 'three'}

for key, value in D.items():
    print(key, value)
    # один 1
    # два two
    # три three

print(D.keys())  # dict_keys(['один', 'два', 'три'])
print(D.values())  # dict_values(['1', 'two', 'three'])

print(D.items())  # dict_items([('один', '1'), ('два', 'two'), ('три', 'three')])

my_students = {5172615190: ('SavelyBoBrIK.py', '21:00', 12000, 'Савелий', 8, 0, 'Среда', 'https://clck.ru/3MxxGp')}

id = 5172615190
file_name = my_students[id][0]
price = my_students[id][2]
'''


# Конвертация типов данных
'''
a = 5
print(type(a), a)  # <class 'int'> 5

a = str(a)
print(type(a), a)  # <class 'str'> 5

a = float(a)
print(type(a), a)  # <class 'float'> 5.0

a = int(a)
print(type(a), a)  # <class 'int'> 5


A = [1, 2, 2, 3, 3, 3]
print(type(A), A)  # <class 'list'> [1, 2, 2, 3, 3, 3]

A = tuple(A)
print(type(A), A)  # <class 'tuple'> (1, 2, 2, 3, 3, 3)

A = set(A)
print(type(A), A)  # <class 'set'> {1, 2, 3}

A = list(A)
print(type(A), A)  # <class 'list'> [1, 2, 3]
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')
print(type(s), s)

n = int(input('Введите число: '))
print(type(n), n)
'''


# Работа с f-строкой
# Сегодня облачно, а температура 24 градуса!
'''
from random import choice
weather = choice(('облачно', 'солнечно', 'пасмурно'))
temperature = int(input('Введите температуру: '))

print('Сегодня ', weather, ', а температура ', temperature, ' градуса! ')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса! ')
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''


# Базовая арифметика
'''
a = 7
b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'  # \n - переход на новую строку в консоли 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В любой функции print() есть переход на новую строку \n

# Деления в Пайтон:
print(f'{a} / {b} = {a / b}')  # 3.5 - обыкновенное вещественное деление
print(f'{a} // {b} = {a // b}')  # 3 - целочисленное деление
print(f'{a} % {b} = {a % b}')  # 1 - остаток от деления (7/2 = 3 целых и 1/2)

print()

print(123 // 10)  # 12
print(123 % 10)  # 3
print(-123 % 10)  # 7

print()

n = int(input('n: '))
if n % 2 == 0:
    print('Число четное | Число делится 2 | Число кратно 2')
if n % 3 == 0:
    print('Число делится 3 | Число кратно 3')
if n % 10 == 3:
    print('Число оканчивается на 3')
if n % 100 == 23:
    print('Число оканчивается на 23')

print()


from math import sqrt
print(f'Возведем число 7 в степень 2: {7 ** 2}')
print(f'Возьмем квадратный корень от 16: {sqrt(16)}')
print(f'Возьмем квадратный корень от 16: {16 ** (1/2)}')
print(f'Возьмем кубический корень от 27: {27 ** (1/3)}')
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
