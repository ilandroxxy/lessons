# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# переменная - это удобный способ взаимодействия с памятью компьютера

X: int = 5
print(X, type(X))  # 5 <class 'int'>


# Типа дынных переменных
'''
a = 5  # int (integer) - Целочисленные значения
print(2 + 2, type(2 + 2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - Вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = "5"  # str (string) - Строковый тип данных, хранит в себе буквы, слова, тексты и тд
print(a * 4, c * 4)  # 20 5555 - При умножении строки на целое число - строка дублируется
new_message = 'Hello, ' + 'world!'  # Конкатенация строк (склеивание)
print(new_message)  # Hello, world!

d1 = True
d0 = False  # bool (Boolean) - Основы Булевой алгебры (Математическая логика)

print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list() - Список

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # a - Первый элемент списка М
print(M[-1])  # e - Последний элемент списка М

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

# 1. Могут хранить неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент списка имеет свой порядковый номер: индексы
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы массива можно брать через индексы, а еще изменять их значение

B = (1, 2, 3)  # tuple() - Кортеж
# 1. Полностью идентичны спискам, кроме пункта: в кортеже нельзя изменять элементы

C = {1, 2, 3, 2, 3}  # set() - Множество
print(C)  # {1, 2, 3} - Удаляет копии элементов


# P = {2, 3, 5, 7, 11, 13, 17, 19, ..., +inf} - Множество простых чисел
# N = {1, 2, 3, 4, ..., +inf} - Множество натуральных чисел
# Z = {-inf, ..., -2, -1, 0, 1, 2, ..., +inf} - Множество целых чисел (N < Z)

# R = {P < N < Z < Q < I} - Множество вещественных чисел

D = {'один': 'one', 'два': 'two'}  # dict() - Словарь
# 1. Элементы словаря делятся на две части: ключ и значение
# 2. Доступ к значению элемента осуществляется через его ключ
# 3. Ключ элемента не может повторяться - происходит замена

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2' * 2, 2 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 3.5
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''

# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
print(s, type(s))  # 56 <class 'str'>

n = int(input('Введите число: '))
print(n, type(n))  # 56 <class 'int'>
# ValueError: invalid literal for int() with base 10: '56a'
'''

# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Работа с f-строками
'''
# 'Сегодня облачно, а температура 24 градуса!'
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
# TypeError: can only concatenate str (not "int") to str
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''

# Базовая арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'  # \n - символ перехода на новую строку 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку \n

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обыкновенное вещественное деление (результат всегда float)
      f'{a} // {b} = {a // b} \n'  # 3 - Взятие только целой части 
      f'{a} % {b} = {a % b}')  # 1 - Взятие остатка от деления

print()


# Функция abs() - взятие модуля от числа
n = 123
print(n // 10)  # 12
print(n % 10)  # 3
print(-n % 10)  # 7
print(abs(-n) % 10)  # 3


print()


from math import sqrt
print(f'Возведем число 7 в степень 2: {7 ** 2}')  # 49
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1 / 2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1 / 3)}')  # 3.0

'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
