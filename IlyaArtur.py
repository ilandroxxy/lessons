# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************
'''
print('x y z w')
for x in 0, 1:
    for y in 0, 1:
        for z in 0, 1:
            for w in 0, 1:
                F = (not(z <= w)) or (x <= y) or (not x)
                if F == 0:
                    print(x, y, z, w)
'''


# Тип данных списки list()
'''
# i   0    1    2    3    4     5       6
M = ['a', 'b', 'c', 'd', 'e', True, [1, 2, 3]]
# -i -7   -6  - -5  -4   -3    -2      -1

print(M[0])  # 'a' - Первый элемент списка М
print(M[-1])  # '[1, 2, 3]' - Последний элемент списка М

M[0] = 'A'
M[-1] = 'G'
print(M)  # ['A', 'b', 'c', 'd', 'e', True, 'G']

# 1. Могут хранить в себе неограниченное кол-во элементов, различных типов данных (что отличает их от массивов и строк)
# 2. Каждый элемент списка имеет свой порядковый номер, индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы мы можем не только брать, но и изменять значения элементов списка (в отличие от кортежей и строк)


B = ('a', 'b', 'c', 'd', 'e', True, [1, 2, 3])  # tuple (кортеж)
# 1. Полностью идентичны списка, кроме: НЕЛЬЗЯ ИЗМЕНЯТЬ ЗНАЧЕНИЯ КОРТЕЖЕЙ


s = 'Hello, world!'  # str (строка) 
s = 'Привет' + s[5:]
print(s)  # Привет, world!
'''

# Срезы списков и строк
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
s = 'abcde'

# СРЕЗ [ START : STOP-1 : STEP]

print(M[0], s[0])  # a a

print(M[1:4])  # ['b', 'c', 'd']
print(s[1:4])  # 'bcd'

print(M[2:])  # ['c', 'd', 'e'] - Все элементы начиная с 2 (включительно)
print(M[:4])  # ['a', 'b', 'c', 'd'] - Все элементы до 4 (не включительно)

print(M[0::2])  # ['a', 'c', 'e'] - Все элементы с четными индексами
print(M[1::2])  # ['b', 'd'] - Все элементы с нечетными индексами


# Особенно полезные срезы:

n = 8
print(bin(n))  # 0b1000
print(bin(n)[2:])  # 1000 - Взяли все элементы кроме первых двух

print(oct(8))  # 0o10
print(oct(8)[2:])  # 10

s = '12345'
print(s[-3:])  # '345' - Три последних элементы строки

print(s[1:-1])  # '234' - Все элементы, кроме первого и последнего

print(s[::-1])  # '54321' - Все элементы в обратном порядке
'''


# Функции списков и строк
'''
m = [1, 2, 2, 3, 3, 4]
s = '122334'

print(list(s))  # ['1', '2', '2', '3', '3', '4']

print(len(m), len(s))  # 6 6 - Функция len() возвращает длину списка/строки (Кол-во элементов списка/строки)
print(sum(m))  # 15 - Возвращает сумму элементов списка (только чисел)
print(min(m), max(m))  # 1 4
print(min(s), max(s))  # 1 4

print(sorted(m))  # [1, 2, 2, 3, 3, 4] - Сортируем в порядке возрастания
print(sorted(s))  # ['1', '2', '2', '3', '3', '4'] - Сортируем в порядке возрастания строку и получаю список строчных элементов
print(sorted(s, reverse=True))  # ['4', '3', '3', '2', '2', '1'] Сортируем в порядке убывания
print(sorted(m)[::-1])  # [4, 3, 3, 2, 2, 1] -  Сортируем в порядке убывания

print(set(m))  # {1, 2, 3, 4}
print(set(s))  # {'3', '4', '2', '1'} - конвертируем в множество set() убирая таким образом копии элементов
'''

# Метод - это частный случай функции, когда фукнкция работает только с определенным типом данных

# Все методы списков в Python, которые понадобятся на ЕГЭ


# Метод .append() используется для добавления элемента в конец списка.
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)
print(my_list)  # Вывод: [1, 2, 3, 4]

# Можно реализовать через конкатенацию (склеивание) списков:
my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]
'''


# Метод .reverse() изменяет порядок элементов в списке на обратный.
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Метод .count() возвращает количество вхождений заданного элемента в список.
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3
'''


# Метод .remove() удаляет первое вхождение указанного элемента из списка.
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

# Можно удалить элемент через его индекс используя del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке.
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # Вывод: 1
'''


# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или
# в обратном порядке, если передан аргумент reverse=True.
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''

# 🐍 Все методы строк в Python, которые понадобятся на ЕГЭ

# 1⃣ .strip()
# Метод strip() удаляет пробелы (или другие символы) из начала и конца строки.
# Это полезно для очистки пользовательского ввода.
'''
text = "    Привет, мир!       "
cleaned_text = text.strip()
print(cleaned_text)  # "Привет, мир!"
'''


# 2⃣ .lower() и .upper()
# Эти методы позволяют изменять регистр строки. lower() преобразует строку в нижний регистр, а upper() – в верхний.
'''
text = "ПрIvEt"
print(text.lower())  # "прivet"
print(text.upper())  # "ПРIVET"
'''


# 3⃣ .replace()
# Метод replace(old, new, count) заменяет подстроку old на new в строке count раз.
'''
text = "Я люблю Python!"
new_text = text.replace("Python", "программирование")
print(new_text)  # "Я люблю программирование!"

text = '11323213213123'
text = text.replace('1', '*')  # Заменить сразу все вхождения 
print(text)  # **3232*32*3*23

text = text.replace('*', '1', 2)  # Заменить только первых два найденных вхождения 
print(text)  # 113232*32*3*23
'''

# 4⃣  .split()
# Метод split(separator) разделяет строку на части по указанному разделителю.
# Если разделитель не указан, используется пробел.

text = "яблоко груша банан"
fruits = text.split()  # по умолчанию разделяет по пробелам
print(fruits)  # ['яблоко', 'груша', 'банан']


text = "яблоко * груша * банан"
fruits = text.split(' * ')  # по умолчанию разделяет по пробелам
print(fruits)  # ['яблоко', 'груша', 'банан']

# 5⃣ .join()
# Метод join(iterable) соединяет элементы списка (или другого итерируемого объекта)
# в строку с указанным разделителем.

fruits = ['яблоко', 'груша', 'банан']
result = ', '.join(fruits)
print(result)  # "яблоко, груша, банан"


# 6⃣ .find()
# Метод find(substring) ищет подстроку в строке и возвращает индекс, с которого
# начинается первая встреча. Если подстрока не найдена, возвращает -1.

text = "Привет, мир! Красивый мир"
index1 = text.find("мир")
index2 = text.index("мир")
print(index1, index2)  # 8 8

text = "Привет, мир! Красивый мир"
index1 = text.rfind("мир")
index2 = text.rindex("мир")
print(index1, index2)  # 8


# 7⃣ .count()
# Метод count(substring) возвращает количество вхождений подстроки в строку.

text = "яблоко, груша, яблоко"
count = text.count("яблоко")
print(count)  # 2


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6]
# КЕГЭ  = []
# на следующем уроке:
