# region –î–æ–º–∞—à–∫–∞: ******************************************************************


'''
a = int(input())
b = 0
c = 1
while a > 0:
    b += a%10
    c *= a%10
    a //= 10
print(c)
print(b)
'''
from xml.sax.handler import property_xml_string

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************

# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: if, elif, else
'''
n = int(input())
if n > 0:  # if - –µ—Å–ª–∏
    print('–ß–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ')
elif n < 0:  # elif - –∏–Ω–∞—á–µ –µ—Å–ª–∏ 
    print('–ß–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ')
else:  # else - –∏–Ω–∞—á–µ
    print('–ß–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é ')
'''


# –ü–æ–ª–µ–∑–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ 27 –Ω–æ–º–µ—Ä–∞
'''
# x = int(input('x: '))
# y = int(input('y: '))
x, y = 5, 6
if x > 0 and y > 0:
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏')
print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''

# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not –∏ —Ç–¥
'''
flag = True
print(not flag)  # False
print(not(not flag))  # True

a, b, c = 5, 6, 7
if a > 0 and b > 0 and c > 0:
    print('and - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å')
if a > 0 or b > 0 or c > 0:
    print('or - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ')
    
    
if (a > 0) + (b > 0) + (c > 0) == 1:
    print('–í—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ')
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('–í—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ —É—Å–ª–æ–≤–∏—è')
if (a > 0) + (b > 0) + (c > 0) >= 1:
    print('–í—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ')
'''


# –ß–µ—Ä–µ–∑ —Å–æ—á–µ—Ç–∞–Ω–∏–µ ctrl + B - –º–æ–∂–Ω–æ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏/–±–∏–±–ª–∏–æ—Ç–µ–∫–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

# –¢–æ–∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é help()
# print(help(len))
'''
len(obj, /)
    Return the number of items in a container.
'''


# –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
'''
import math  # –°–∞–º—ã–π —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
print(f'–í—ã—á–∏—Å–ª–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {math.sqrt(16)}')

import math as m  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º
print(f'–í—ã—á–∏—Å–ª–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {m.sqrt(16)}')

from math import sqrt, factorial  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(f'–í—ã—á–∏—Å–ª–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {sqrt(16)}')

from math import *  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(f'–í—ã—á–∏—Å–ª–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –æ—Ç —á–∏—Å–ª–∞ 16: {sqrt(16)}')
print(f'–í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 5: {factorial(5)}')
'''

# –ü—Ä–∏–º–µ—Ä –ø–æ—á–µ–º—É –æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —á–µ—Ä–µ–∑ *
'''
count = 0
from itertools import permutations
for p in permutations('abcd'):
    count += 1
    print(count, p)
print(count)

count = 0
from itertools import *
for p in permutations('abcd'):
    count += 1
    print(count, p)
print(count)
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ!

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product, permutations

combinations = list(product([1, 2, 3], repeat=2))
for combination in combinations:
    print(combination)
    # (1, 1)
    # (1, 2)
    # (1, 3)
    # (2, 1)
    # (2, 2)
    # (2, 3)
    # (3, 1)
    # (3, 2)
    # (3, 3)

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''

# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(10000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
'''


# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch, re –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è 24 –Ω–æ–º–µ—Ä–æ–≤:
'''
from fnmatch import *
if fnmatch('123', '*?3'):
    pass


from re import *
if fullmatch('[1-9]*[02468]3', '123')
    pass
'''

# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[^_`{|}~
'''


# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
from math import ceil, floor, dist

print(4 / 3)  # 1.33333
print(ceil(4 / 3))  # 2 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
print(floor(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑


# –ù–∞–π—Ç–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 
print(dist([3, 4], [5, 6]))
'''

from math import dist
clustersB = [[], [], []]

for s in open('0. files/27_B.txt'):
    s = s.replace(',', '.')
    x, y = [float(i) for i in s.split()]
    if y > 5:
        clustersB[0].append([x, y])
    elif y < -5:
        clustersB[1].append([x, y])
    else:
        clustersB[2].append([x, y])

# def d(A, B):
#     x1, y1 = A
#     x2, y2 = B
#     return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
#
# print(d([4, 5], [5, 6]))
# print(dist([4, 5], [5, 6]))

def center(cl):
    R = []
    for p in cl:
        summa = 0
        for g in cl:
            summa += dist(p, g)
        R.append([summa, p])
    return min(R)[1]

cl1 = clustersB[0]
cl2 = clustersB[0]
cl3 = clustersB[0]
center1 = center(cl1)
center2 = center(cl2)
center3 = center(cl3)
print(center1)
PxB = (center1[0] + center2[0] + center3[0]) / 3
PyB = (center1[1] + center2[1] + center3[1]) / 3
print(PxB * 10000, PyB * 10000)

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ: –ì–æ–≤–æ—Ä–∏–º –ø—Ä–æ —Ü–∏–∫–ª—ã

