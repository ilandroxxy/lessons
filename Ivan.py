# region Домашка: ******************************************************************

# https://stepik.org/lesson/1309434/step/8?unit=1324550
'''
n = input()
maxn = 0
minn = 9
for i in n:
    # if int(i) > maxn:
    #     maxn = int(i)
    maxn = max(maxn, int(i))
    if int(i) < minn:
        minn = int(i)
print(maxn)
print(minn)
'''


# https://stepik.org/lesson/1309434/step/9?unit=1324550
'''
n = int(input())
summa = 0
count = 0
total = 1
while n > 0:
    x = n % 10

    summa += x
    count += 1
    total *= x

    n //= 10
print(summa)
print(count)
print(total)
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# 1. Могут содержать неограниченное кол-во элементов
# 2. Элементы могут быть различных типов данных
# 3. Каждый элемент имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
print(f'Первый элемент списка L {L[0]}')
print(f'Последний элемент списка L {L[4]}')
print(f'Последний элемент списка L {L[-1]}')

# 5. Через индексы мы можем изменять элементы списков (в отличие от кортежей и строк)
L[0], L[-1] = 'e', 'a'
print(L)  # ['e', 'b', 'c', 'd', 'a']
'''


# Срезы списков, строк и других коллекций...
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']

# СРЕЗ[START : STOP-1 : STEP]

print(L[1:4])  # ['b', 'c', 'd'] - все элементы начиная с 1 и до 4 (не включая конец)
print(L[:4])  # ['a', 'b', 'c', 'd'] - все элементы слева до 4 по индексу (не включая конец)
print(L[2:])  # ['c', 'd', 'e'] - все элементы начиная с 2 по индексу (включительно)

print(L[2:])  # - все элементы кроме первых двух
print(L[-3:])  # - последние три элемента

print(L[:])
print(L[::])  # - просто все элементы без ограничений

print(L[::2])  # ['a', 'c', 'e'] - все элементы с четными индексами
print(L[1::2])  # ['b', 'd'] - все элементы с нечетными индексами

print(L[::-1])  # ['e', 'd', 'c', 'b', 'a'] - все элементы в обратном порядке 
'''


# Функции списков
'''
L = [1, 3, 3, 3, 2, 2]

print(len(L))  # - Возвращает кол-во элементов в списке (длину списка)
print(sum(L))  # - Возвращает сумму числовых элементов списка
print(max(L), min(L))  # - Возвращают максимальный и минимальный элемент списка

print(sorted(L))  # - Возвращает список в порядке возрастания
print(sorted(L, reverse=True))  # - Возвращает список в порядке убывания

print(reversed(L))  # <list_reverseiterator object at 0x102b1b010>
print(list(reversed(L)))  # [2, 2, 3, 3, 3, 1] - Возвращает перевернутый список

print(set(L))  # {1, 2, 3} - при конвертации в множество убираются копии 
'''


# Все методы списков в Python, которые понадобятся на ЕГЭ

# .APPEND()
# Метод .append() используется для добавления элемента в конец списка. Пример:
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)
print(my_list)  # Вывод: [1, 2, 3, 4, 5]
'''
# Можно реализовать через конкатенацию (склеивание) списков:
'''
my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]
'''

# .REVERSE()
# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# Можно записать по другому через срез:
'''
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# .COUNT()
# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3
'''


# .REMOVE()
# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # Первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

my_list = [1, 2, 3, 2, 4]
while 2 in my_list:
    my_list.remove(2)
print(my_list)  # [1, 3, 4]
'''
# Можно удалить элемент через его индекс используя del:
'''
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # Индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# .INDEX()
# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # Вывод: 1
'''


# .SORT()
# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном порядке, если передан аргумент reverse=True. Пример:
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
'''
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]


alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
print(alp)  # ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
'''


# Генераторы списков (списочные выражения)

# ГЕНЕРТОР[что_кладем_в_список откуда_берем_этот_элементы]
# ГЕНЕРТОР[что_кладем_в_список откуда_берем_этот_элементы при_каком_условии]

M = [x for x in range(10)]  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]

M = [x ** 2 for x in range(10) if x % 2 == 0]  # [0, 4, 16, 36, 64]

from random import randint
n = randint(5, 15)
M = [randint(0, 100) for _ in range(n)]


chet = [x for x in M if x % 2 == 0]
nechet = [x for x in M if x % 2 != 0]

N = [x for x in M if x % 10 == 7 and x % 100 == 27]
L = [x for x in M if len(str(abs(x))) == 2]  # - Все двузначные элементы


# Пример использования генераторов в 17 номере
# № 23276 Основная волна 11.06.25 (Уровень: Базовый)

M = [int(x) for x in open('0. files/17.txt')]
A = [x for x in M if len(str(abs(x))) == 4]
B = [x for x in M if abs(x) % 100 == 25]
R = []
for i in range(len(M)-2):
    x, y, z = M[i], M[i+1], M[i+2]
    if (x in A) + (y in A) + (z in A) <= 2:
        if (x + y + z) <= max(B):
            R.append(x + y + z)
print(len(R), max(R))



# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
