# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# № 23764 Демоверсия 2026 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10, найдите все числа,
# соответствующие маске 3?12?14*5, делящиеся на 1917 без остатка.
# В ответе запишите в первом столбце таблицы все найденные
# числа в порядке возрастания, а во втором столбце – соответствующие им
# результаты деления этих чисел на 1917.
'''
from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x, x // 1917)

from re import *
for x in range(1917, 10**10, 1917):
    if fullmatch('3[0-9]12[0-9]14[0-9]*5', str(x)):
        print(x, x // 1917)
'''


# Функция поиска делителей числа
'''
import time
start = time.time()

def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]
print(divisors(1_000_000_000))

end = time.time()
print(end - start)  # 17.994 - 0.0011
'''



# № 23763 Демоверсия 2026 (Уровень: Базовый)
# Пусть M – сумма минимального и максимального натуральных делителей целого числа,
# не считая единицы и самого числа. Если таких делителей у числа нет,
# то значение M признаётся равным нулю.
# Напишите программу, которая перебирает целые числа, бо́льшие 800 000,
# в порядке возрастания и ищет среди них такие, для которых
# M оканчивается на 4. В ответе запишите в первом столбце таблицы
# первые пять найденных чисел в порядке возрастания,
# а во втором столбце – соответствующие им значения M.
'''
def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):  # 2 - не считая единицы и самого числа.
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

cnt = 0
for x in range(800_000+1, 10**10):
    d = divisors(x)
    if len(d) >= 2:
        M = min(d) + max(d)
        if M % 10 == 4:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''


# № 21422 Досрочная волна 2025 (Уровень: Базовый)
# Напишите программу, которая перебирает целые числа,
# бóльшие 1 125 000, в порядке возрастания и ищет среди них такие, у которых
# есть натуральный делитель, оканчивающийся на цифру 7
# и не равный ни самому числу, ни числу 7.
# В ответе запишите в первой строке таблицы первые пять
# найденных чисел в порядке возрастания,
# а во втором столбце – наименьший делитель для каждого из них,
# оканчивающийся цифрой 7, не равный ни самому числу, ни числу 7.
'''
def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

cnt = 0
for x in range(1_125_000+1, 10**10):
    d = [j for j in divisors(x) if j % 10 == 7 and j != 7 and j != x]
    if len(d) > 0:
        print(x, min(d))
        cnt += 1
        if cnt == 5:
            break
'''


# № 22430 (Уровень: Средний)
# (Л. Шастин) Обозначим через M сумму двух минимальных
# и двух максимальных простых делителей целого числа, не считая самого числа.
# Если количество простых делителей у числа меньше 4,
# то считаем значение M равным нулю. Напишите программу,
# которая перебирает целые числа, большие 456 789,
# в порядке возрастания и ищет среди них такие, для которых
# значение M при делении на 114 даёт в остатке 39.
# Выведите первые 5 найденных чисел в порядке возрастания,
# справа от каждого числа запишите соответствующее значения M.
'''
def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))


cnt = 0
for x in range(456_789+1, 10**10):
    d = [j for j in divisors(x) if len(divisors(j)) == 0]
    if len(d) >= 4:
        M = d[0] + d[1] + d[-2] + d[-1]
        if M % 114 == 39:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''


# Проверка на простые числа:
'''
def prime(x):
    if x <= 1:
        return False
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True

print([x for x in range(1, 100) if prime(x)])  # - простые числа
print([x for x in range(1, 100) if not prime(x)])  # - составные числа


def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

print([x for x in range(1, 100) if len(divisors(x)) == 0])  # - простые числа
print([x for x in range(1, 100) if len(divisors(x)) != 0])  # - составные числа
'''


# № 23569 Пересдача 03.07.25 (Уровень: Средний)
# Напишите программу, которая перебирает целые числа, большие 6 086 055,
# в порядке возрастания и ищет среди них числа, представленные в виде
# произведено двух простых множителей, не обязательно различных,
# каждый из которых содержит в своей записи ровно одну цифру 6.
# В ответе в первом столбце таблицы запишите первые 5 найденных
# чисел в порядке возрастания, а во втором столбце -
# для каждого из них соответствующий наибольший из найденных множителей.

def prime(x):
    if x <= 1:
        return False
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            return False
    return True

def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):
        if x % j == 0:
            if prime(j) and prime(x // j):
                d += [j, x // j]
    return sorted(d)

cnt = 0
for x in range(6_086_055+1, 10**10):
    d = [j for j in divisors(x) if str(j).count('6') == 1]
    if len(d) >= 2:
        print(x, max(d))
        cnt += 1
        if cnt == 5:
            exit()


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 14, 8, 25]
# КЕГЭ = []
# на следующем уроке:
