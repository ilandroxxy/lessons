# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************



# Три типа делений:
'''
a, b = 7, 2

print(a / b)  # 3.5 - вещественное деление (дробное) (всегда float)
print(a // b)  # 3 - целочисленное (всегда int)
print(a % b)  # 1 - остаток от деления (всегда int)

n = 123
print(n // 10)  # 12
print(n % 10)  # 3
print(-n % 10)  # 7
print(abs(-n) % 10)  # 3

n = int(input('n: '))
if n % 2 == 0:
    print('Четное | Делится на 2 | Кратно 2')
if n % 3 == 0:
    print('Делится на 3 | Кратно 3')
if n % 10 == 3:
    print('Число оканчивается на 3')
if n % 100 == 23:
    print('Число оканчивается на 23')
'''
from tkinter.dnd import dnd_start

# Типы данных:
'''
a = 5  # int

b = 5.0  # float
print(4/2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str
# Строка при умножении на целое число - дублируется
print('hello' * 4)  # hello hello hello hello

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # 'Hello, world!' - конкатенация строк (склеивание)

d1 = True  # bool
d0 = False
print(4 < 10)  # True
'''


# Типы данных коллекций
'''
A = [1, 2, 3]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов
# 2. Элементы могут быть различными типами данных (в отличие от массивов)
# 3. Каждый элемент имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы можно изменять элементы списка (в отличие от кортежей и строк)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка L: {L[0]}')
print(f'Последний элемент списка L: {L[4]}')
print(f'Последний элемент списка L: {L[-1]}')

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']

M = [2, 2.0, '2', True, 2+2, 4<10, 4/2, '2'*2, [1, 2, 3], (1, 2, 3)]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'bool'> True
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)

B = (1, 2, 3)  # tuple (кортеж)

C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3} - не могут повторяться числа, то есть копии удаляются

D = {'один': 'one'}  # dict (словарь)
print(D['один'])  # one
'''


# Срезы списков и строк (последовательностей)
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# СРЕЗ[ START : STOP-1 : STEP]
print(L[2:4])  # ['c', 'd'] - крайний правый не берется
print(L[:4])  # ['a', 'b', 'c', 'd'] - все что слева от 4 (не включая 4)
print(L[2:])  # ['c', 'd', 'e'] - все что справа от 2 индекса

print(L[2:])  # - все элементы кроме первых двух
print(L[-3:])  # - последние три элемента (-3 -2 -1)

print(L[:])  # - все элементы без исключений
print(L[::])  # ['a', 'b', 'c', 'd', 'e']

print(L[::2])  # ['a', 'c', 'e'] - все элементы с четными индексами
print(L[1::2])  # ['b', 'd'] - все элементы с нечетными индексами

print(L[::-1])  # ['e', 'd', 'c', 'b', 'a'] - в обратную сторону 


s = '1234321'  # палиндром 
if s == s[::-1]:
    print('Палиндром')
else:
    print('Не палиндром')
'''


# Сочетание клавиш: ctrl + B - открыть содержимое библиотеки


# Какие способы подключения библиотек
'''
import math   # Самый простой способ подключения библиотеки 
print(math.sqrt(16))

import math as m  # Подключение библиотеки с коротким именем (своим именем*) 
print(m.sqrt(16))

from math import sqrt, factorial  # Подключаю конкретные функции/константы 
print(sqrt(16))

from math import *  # Подключение сразу всего содержимого 
print(sqrt(16))
print(factorial(5))
'''

# Пример конфликта имен:
'''
count = 0
from itertools import permutations
for p in permutations('abc'):
    count += 1
    print(count, p)
    # 1 ('a', 'b', 'c')
    # 2 ('a', 'c', 'b')
    # 3 ('b', 'a', 'c')
    # 4 ('b', 'c', 'a')
    # 5 ('c', 'a', 'b')
    # 6 ('c', 'b', 'a')

count = 0
from itertools import *
for p in permutations('abc'):
    count += 1
    print(count, p)
# TypeError: unsupported operand type(s) for +=: 'type' and 'int'
'''

# Список библиотек, которые мы будем использовать на ЕГЭ

# 1⃣ Библиотека черепашки для решения 6 номера кодом:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''

# 2⃣ Библиотека itertools для решения 1, 8, 9, 24 номеров кодом:
'''
from itertools import permutations, product

combinations = list(product('abc', repeat=2))
for combination in combinations:
    print(combination)
    # ('a', 'a')
    # ('a', 'b')
    # ('a', 'c')
    # ('b', 'a')
    # ('b', 'b')
    # ('b', 'c')
    # ('c', 'a')
    # ('c', 'b')
    # ('c', 'c')

perms = list(permutations("abc", r=3))
for perm in perms:
    print(perm)
    # ('a', 'b', 'c')
    # ('a', 'c', 'b')
    # ('b', 'a', 'c')
    # ('b', 'c', 'a')
    # ('c', 'a', 'b')
    # ('c', 'b', 'a')
'''

# 3⃣ Библиотека ipaddress для решения нового 13 номера:
'''
from ipaddress import *
net = ip_network('адрес узла/маска', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4⃣ Две библиотеки для решения 16 номера:

# Одна увеличивает глубину рекурсии:
'''
import sys
sys.setrecursionlimit(10000)
'''
# Вторая ускоряет вычисления через использование кэширования:
'''
from functools import *
@lru_cache(None)
def F(n):
'''

# 5⃣ Библиотеки fnmatch и re для решения 25 номера с масками и 24 номера с регулярными выражениями:


# Богданов А.
# Найдите все натуральные числа, не превышающие 10¹⁰,
# которые соответствуют маске 1?1?1?1*1
# и при этом без остатка делятся на 2023,
# а сумма цифр числа равна 22.
# В ответе запишите все найденные числа в порядке возрастания.
'''
from fnmatch import *
for x in range(2023, 10**10, 2023):
    if fnmatch(str(x), '1?1?1?1*1'):
        if sum(map(int, str(x))) == 22:
            print(x)

from re import *
for x in range(2023, 10**10, 2023):
    if fullmatch('1[0-9][0-9]1[0-9]1[0-9]*1', str(x)):
        if sum(map(int, str(x))) == 22:
            print(x)
'''


# 6⃣ Библиотека string хранит в себе много полезных элементов:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?^_`{|}~
'''

# 7⃣ Библиотека math хранит в себе много полезных математических функций:
'''
from math import floor, ceil, dist

print(4 / 3)  # 1.33333
print(round(4 / 3))  # 1 - округление по правилам математики
print(ceil(4 / 3))  # 2 - строгое округление вверх
print(floor(4 / 3))  # 1 - строгое округление вниз


def d(A, B):
    x1, y1 = A
    x2, y2 = B
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

print(d([4, 5], [6, 7]))  # 2.828
print(dist([4, 5], [6, 7]))  # 2.828
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
