# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


x = 5

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(x), x)  # <class 'int'> 5

b: str = '5'  # str (string) - строковый тип данных для текста, слова и тд тп
print(a, b)
print(a*4, b*4)
# При умножении строки на целое число - строка дублируется

c = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

d0 = False
d1 = True  # bool (Boolean) - Основы Булевой алгебры (Математическая логика)
print(4 < 10)  # True

print(True + True + False)  # 2 - то есть True == 1, False == 0
'''

# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '5', [1, 2, 3]]  # list (список)

# i   0    1    2    3
M = ['a', 'b', 'c', 'd']
# -i -4   -3   -2   -1

# 1. Может хранить в себе неограниченное кол-во элементов различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индекс)
# 3. Индексы начинают свою нумерацию слева-направо с нуля или справа-налево с -1
# 4. В отличие от массивов и кортежей в списках можно изменять элементы через индексы

M[0], M[-1] = 'A', 'D'
print(M)  # ['A', 'b', 'c', 'D']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Тоже самое, что и списки, но нельзя изменять элементы 


C = {1, 2, 3, 3, 3, 3}  # set (множество)
# 1. Не может содержать двух одинаковых элементов - копии удаляются
print(C)  # {1, 2, 3}

D = {}
print(type(D))  # <class 'dict'>

D = {'one':'один', 'two':'два', 'one': 'ОДИН'}
# 1. В словаре элементы делятся на две части: ключ и значение
# 2. Значение словаря можно достать через его ключ

print(D['one'])  # ОДИН

my_students = {18924378291: ('Илья', 'Ilya.py', 7000, 4),
               58927398572: ('Илья', 'Ilya.py', 7000, 4)}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Работу с f-строками
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Привет, сегодня', weather, ', а температура', temperature, 'градуса!')
print('Привет, сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Привет, сегодня {weather}, а температура {temperature} градуса!')
'''



# Базовая арифметикам

# a = 7
# b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b}')

print(f'{a} * {b} = {a * b}')


print()

# Деление в Пайтон:
print(f'{a} / {b} = {a / b} \n'  # 7 / 2 = 3.5 - вещественное деление, результат которого всегда float
      f'{a} // {b} = {a // b} \n'  # 7 // 2 = 3 - целочисленное деление, результат всегда int 
      f'{a} % {b} = {a % b}')  # 7 % 2 = 1 - взятие остатка от деления, результат всегда int

n = 28
print(n % 2 == 0)  # Четное ли переменная n / Переменная n делится на 2
print(n % 3 != 0)  # Переменная n не кратна 3 / Переменная n не делится на 3
print(n % 10)  # 8 - взяли последнюю цифру числа, то есть проверили на что число заканчивается
print(n % 100)  # 8 - взяли последнюю цифру числа, то есть проверили на что число заканчивается

print()

from math import sqrt
print(f'Возведем число {a} в степень {b}: {a} ** {b} = {a**b}')  # Возведем число 7 в степень 2: 7 ** 2 = 49
print(f'Возьмем квадратный корень от числа 16: {16} ** {0.5} = {sqrt(16)}')
print(f'Возьмем квадратный корень от числа 16: {16} ** {0.5} = {16**0.5}')
print(f'Возьмем кубический корень от числа 27: {27} ** {1/3} = {27**(1/3)}')

print()

n = 8
# Если нам нужно изменить число, то это можно сделать двумя способами

n += 1  # n = n + 1
n -= 1  # n = n - 1
n *= 2  # n = n * 2
n //= 2  # n = n // 2
print(n)


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Библиотеки перечислить, Условные операторы, Циклы


