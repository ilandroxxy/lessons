# region –î–æ–º–∞—à–∫–∞: ******************************************************************


# https://stepik.org/lesson/1309431/step/11?unit=1324547
'''
n = int(input())
b = [int(i) for i in str(n)]
b1 = sum(b)
j = 1
for i1 in b:
    j = i1*j
print(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä: {j}")
print(f"–°—É–º–º–∞ —Ü–∏—Ñ—Ä: {b1}")


from math import prod
n = int(input())
b = [int(i) for i in str(n)]
b1 = sum(b)
j = prod(b)  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
print(f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä: {j}")
print(f"–°—É–º–º–∞ —Ü–∏—Ñ—Ä: {b1}")


num = int(input())
a = num // 1000
b = (num // 100) % 10
c = (num // 10) % 10
e = num % 10
pro = a * b * c * e
summa = a + b + c + e
print(f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ü–∏—Ñ—Ä: {pro}')
print(f'–°—É–º–º–∞ —Ü–∏—Ñ—Ä: {summa}')
'''


# https://stepik.org/lesson/1309431/step/13?unit=1324547
'''
n = int(input())
b = n + int((str(n)) + (str(n))) + int((str(n) + str(n) + str(n)))
print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª: {b}")


n = int(input())
n = str(n)
print(f"–°—É–º–º–∞ —á–∏—Å–µ–ª: {int(n) + int(n * 2) + int(n * 3)}")
'''

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************


# –ü–æ —Å—É—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ .py —Ñ–∞–π–ª
'''
import math
print(math.sqrt(16))

# –°–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à ctrl + B –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

print(help(math.sqrt)) # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ—É–Ω–∫—Ü–∏–∏
# sqrt(x, /)
#     Return the square root of x.
'''

# –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ Python
'''
import math  # –≠—Ç–æ —Å–∞–º–æ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(math.sqrt(16))

import math as m  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º m
print(m.sqrt(16))

from math import sqrt, factorial  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(sqrt(16))

from math import *  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(sqrt(16))
print(factorial(5))
'''

# –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —á–µ—Ä–µ–∑ * –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω
# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω
'''
count = 0
from itertools import permutations
for p in permutations('abcd'):
    count += 1
    print(count, p)
print(count)

count = 0
from itertools import *
for p in permutations('abcd'):
    count += 1
    print(count, p)
print(count)
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful


# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import permutations, product

combinations = list(product([1, 2, 3], repeat=2))
for combination in combinations:
    print(combination)
    # (1, 1)
    # (1, 2)
    # (1, 3)
    # (2, 1)
    # (2, 2)
    # (2, 3)
    # (3, 1)
    # (3, 2)
    # (3, 3)

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''

# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(10000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
'''

# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ re –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏ –∏ –≤—Ç–æ—Ä–∞—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 24 –Ω–æ–º–µ—Ä–∞:
'''
from fnmatch import *
for x in range(169, 10**9, 169):
    if fnmatch(str(x), '123*567?'):
        print(x, x // 169)

from re import *
for x in range(169, 10**9, 169):
    if fullmatch('123[0-9]*567[0-9]', str(x)):
        print(x, x // 169)
'''

# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[^_`{|}~
'''

# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è 19-21 –Ω–æ–º–µ—Ä–∞ 
from math import ceil, floor

print(4 / 3)  # 1.333333
print(ceil(4 / 3))  # 2 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
print(floor(4 / 3))  # 1 - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è 27 –Ω–æ–º–µ—Ä–∞
from math import dist
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
print(dist([4, 5], [6, 7]))  # 2.8284271
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: if, elif, else
'''
# x = int(input('x: '))
# y = int(input('y: '))

x, y = -5, 6
if x > 0 and y > 0:  # if - –µ—Å–ª–∏
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:  # elif - –∏–Ω–∞—á–µ –µ—Å–ª–∏ 
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:  # else - –∏–Ω–∞—á–µ
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å—è—Ö')
print('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
'''


# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not –∏ ^
'''
flag = True
print(not flag)  # False
print(not (not flag))  # True


a, b, c = -4, 5, -6
if a > 0 and b > 0 and c > 0:
    print('and - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è ')
if a > 0 or b > 0 or c > 0:
    print('or - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ')
if (a > 0) ^ (b > 0):
    print('^ - –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—ã')


if (a > 0) + (b > 0) + (c > 0) == 1:
    print('–¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('–¢–æ–ª—å–∫–æ –¥–≤–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) >= 1:
    print('–•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
if (a > 0) + (b > 0) + (c > 0) <= 2:
    print('–ù–µ –±–æ–ª–µ–µ –¥–≤—É—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
'''


# –ü–æ–≥–æ–≤–æ—Ä–∏–º –ø—Ä–æ 27 –Ω–æ–º–µ—Ä
'''
from math import dist
clustersB = [[], [], []]

for s in open('0. files/27_B.txt'):
    s = s.replace(',', '.')
    x, y = [float(i) for i in s.split()]
    if y > 5:
        clustersB[0].append([x, y])
    elif y < -5:
        clustersB[1].append([x, y])
    else:
        clustersB[2].append([x, y])


# def d(A, B):
#     x1, y1 = A
#     x2, y2 = B
#     return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
#
# print(d([4, 5], [5, 6]))
# print(dist([4, 5], [5, 6]))
'''

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ: