# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(a, type(a))  # 5 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественное значение/дроби
print(4 + 5.0, type(4 + 5.0))  # 9.0 <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе текст/слова и тд тп
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello - дублирование строки путем умножения ее на целое число

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # Hello, world! - конкатенация (склеивание) строк
# print('hello' + 4)  # TypeError: can only concatenate str (not "int") to str

d1 = True  # 1 - bool (Boolean) - элементы Булевой алгебры (основы математической логики)
d0 = False  # 0

print(True + True + True)  # 3
print(4 == 4)  # True
print(4 == 10)  # False
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '4', 5.0, True, [1, 2, 3]]  # list (список)
# 1. Может хранить в себе неограниченное кол-во элементов
# 2. Эти элементы могут быть различных типов данных (в отличие от массивов)
# 3. Каждый элемент списка имеет порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. В отличие от кортежей и строк - в списках можно изменять значения элементов через индексы

print(f'Первый элемент списка А: {A[0]}')  # 1
print(f'Последний элемент списка А: {A[-1]}')  # [1, 2, 3]

A[-1] = '1 2 3'
print(A)  # [1, 2, 3, '4', 5.0, True, '1 2 3']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Все тоже самое, что и у списков, только нельзя изменять элементы кортежа

C = {1, 2, 2, 3, 3, 3}  # set (множество)
# 1. Не могут содержать копии элементов
print(C)  # {1, 2, 3}

# Множество простых чисел
# P = {2, 3, 5, 7, 11, 13, 17, 19, ..., +inf}

# # Множество составных чисел
# S = {1, 4, 6, 8, 9, 10, 12, 14, ...,+inf}

# Множество натуральных чисел
# N = {1, 2, 3, 4, ..., 1000, ..., 10**6, ..., +inf}

# Множество целых чисел
# Z = {-inf, ..., -1000, ..., -2, -1, 0, 1, 2, ..., 1000, ..., +inf}
# Множество N принадлежит множеству Z


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента осуществляется через ключ
print(D['один'])  # one

# 3. Ключи индивидуальны, при использовании двух одинаковых - старое значение удаляется
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}


M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 4==2,  [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> False
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
text = input('Введите свой текст: ')
print(text, type(text))

temperature = int(input('Введите температуру: '))
print(temperature, type(temperature))
'''


# Использование f-строки
"""
'''Сегодня облачно, а температура 24 градуса!'''

temperature = int(input('Введите температуру: '))
weather = 'облачно'
print('Сегодня ', weather, ', а температура ', temperature,' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
"""


# Базовая арифметика

# a = 7
# b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

# Деления в Пайтон:
print(f'{a} / {b} = {a / b} \n'  # 3.5 - обыкновенное вещественное деление - результат всегда float
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление - взятие только целой части 
      f'{a} % {b} = {a % b}')  # 1 - остаток от деления 7 / 2 = 3 целых и (1/2)

print()

# n = int(input('n: '))
n = 5
if n % 2 == 0:
    print('Четное | Делится на два | Кратно двум')
elif n % 3 == 0:
    print('Делится на три | Кратно трем')
elif n % 10 == 7:
    print('Число оканчивается на 7')
elif n % 100 == 73:
    print('Число оканчивается на 73')
elif n % 1000 == 734:
    print('Число оканчивается на 734')

print()

print(f'Возведем число 4 в степень 2: {4**2}')
print(f'Возведем число 4 в степень 3: {4**3}')


from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Поговорить про библиотеки, про функцию help(), про условные операторы
