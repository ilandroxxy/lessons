# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# переменная - это удобный способ взаимодействия с данными

# ctrl + / - однострочный комментарий (на несколько строк)
'''
- Это многострочный комментарий
'''

# Типы данных переменных
'''
a = 5  # int (integer)

b = 5.0  # float (число с плавающей точкой)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'
print(a * 4, c * 4)  # 20 5555
# При умножении строки на целое число n - строка дублируется n раз
message = 'Hello, ' + 'world!'
print(message)  # Конкатенация строк (склеивание)

message = 'Hello, ' + str(45)
print(message)  # Hello, 45
# TypeError: can only concatenate str (not "int") to str

d1 = True
d0 = False  # bool (Boolean - основы Булевой алгебры) математическая логика
print(4 < 10)  # True

# a, b = 4, 5
# print(a > 0 and b > 0)  # True
'''


# Типы данных коллекций
'''
# i   0    1    2    3    4
A = ['a', 'b', 'c', 'd', 'e']   # list (список)
# -i -5   -4   -3   -2   -1

print(A[0])  # Первый элемент списка A
print(A[-1])  # Последний элемент списка A
print(A[1:-1])  # ['b', 'c', 'd'] - Все элементы, кроме первого и последнего

A[0], A[-1] = 'A', 'E'
print(A)  # ['A', 'b', 'c', 'd', 'E']

s = 'abcde'
# s[0] = 'A'
# TypeError: 'str' object does not support item assignment

s = 'A' + s[1:-1] + 'E'
print(s)  # AbcdE

# 1. Могут хранить в себе неограниченное кол-во элементов, различных значений (в отличие от массивов и строк)
# 2. Каждый элемент списка имеет свой порядковый номер, индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы мы можем не только брать элементы списка, но и ИЗМЕНЯТЬ их значения (в отличие от кортежей и строк)

B = (1, 2, 3)
# 1. Полностью идентичен спискам, но нельзя изменять элементы кортежа!
B = ()
B = tuple()
print(type(B))  # <class 'tuple'>

C = {1, 2, 3, 2, 3}  # set (множества)
# 1. В множестве нельзя хранить копии элементов, все копии удаляются
print(C)  # {1, 2, 3}
C = set()
print(type(C))  # <class 'set'>

D = {'один': 'one', 'два': 'two'}  # dict (словарь)
print(type(D))  # <class 'dict'>
print(D['один'])  # one
# 1. Конструкция элементы которой делятся на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. В словаре не может быть одинаковых ключей, в таком случае они перезаписываются

D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}


D = {'один': 'one', 'два': 'two'}  # dict (словарь)

print(D.items())  # dict_items([('один', 'one'), ('два', 'two')])
print(D.keys())  # dict_keys(['один', 'два'])
print(D.values())  # dict_values(['one', 'two'])

for key, value in D.items():
    print(key, value)
    # один one
    # два two
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
print(s, type(s))  # 54 <class 'str'>

n = int(input('Введите число: '))
print(n, type(n))  # 54 <class 'int'>
'''


# Работа с f-строкой
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))

print('Сегодня облачно, а температура: 24 градуса!')
print('Сегодня ', weather, ', а температура: ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура: ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура: {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура: {temperature} градуса!')
'''

# Базовая арифметика
'''
# P = {2, 3, 5, 7, 11, 13, 17, 19, 23, ... +inf}
# N = {1, 2, 3, ..., + inf} - Множество натуральных чисел P ∈ N
# Z = {-inf, ..., -2, -1, 0, 1, 2, ..., + inf} - Множество целых чисел P ∈ N ∈ Z
# Q = {-inf, ..., -3/2, -2/1, -1/1, 0, 1/1, 1/2, 2/1, ..., + inf} - Множество рациональных чисел P ∈ N ∈ Z ∈ Q
# I = {-inf, ..., -pi, 0, 1.32132132 , pi, ..., + inf} - Множество иррациональных чисел P ∈ N ∈ Z ∈ Q ∈ I
# R = P + N + Z + Q + I - Множества вещественных (действительных) чисел 
# C = a + ib, где a - вещественное число, а b - мнимое 
'''

'''
a, b = 7, 2
print(f'{a} / {b} = {a / b} \n'  # 3.5 - вещественное деление, результат всегда float
      f'{a} // {b} = {a // b} \n'  # 3 - взятие только целой части
      f'{a} % {b} = {a % b} \n')  # 1 - взятие остатка от деления

num = 123
print(num // 10)  # 12
print(num % 10)  # 3

num = -123
print(num // 10)  # -13
print(num % 10)  # 7

num = abs(-123)
print(num // 10)  # 12
print(num % 10)  # 3

print()

print(f'Возведем число {a} в степень {b}: {a ** b}')  # 49

print()

import math
print(f'Возьмем квадратный корень от числа 16: {math.sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0
'''

# Условные операторы
'''
# x = int(input('x: '))
# y = int(input('y: '))
x, y = 0, 0

if x > 0 and y > 0:
    print('Первая четверть')
elif x < 0 and y > 0:
    print('Вторая четверть')
elif x < 0 and y < 0:
    print('Третья четверть')
elif x > 0 and y < 0:
    print('Четвертая четверть')
else:
    print('Лежит осях')
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
