# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

x = 50  # переменная - это удобный способ взаимодействия с памятью
print(x, type(x))  # 50 <class 'int'>

# - это однострочный комментарий

'''
- это многострочный комментарий 
'''


# Типа данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(2 + 2))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(type(2 + 4.0))  # <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных для хранения текста
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
# При умножении строки на целое число - строка дублируется
print('hello ' * 4)  # 'hello hello hello hello '

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # 'Hello, world!' - конкатенация строк (склеивание)

d1 = True  # bool (Boolean) - Основы Булевой алгебры / Математическая логика
d0 = False
print(4 < 10)  # True
print(4 == 10)  # False

n = 7
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Могут хранить неограниченное кол-во элементов
# 2. Элементы могут принимать различные типы данных (в отличие от массивов)
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы мы можем изменять значения элементов (в отличие от кортежей и строк)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print('Первый элемент списка L: ', L[0])
print('Последний элемент списка L: ', L[4])
print('Последний элемент списка L: ', L[-1])

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']


M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 4 < 10, [1, 2, 3], (1, 2 ,3)]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)


B = (1, 2, 3)  # tuple (кортеж)
c = 5,0
print(c, type(c))  # (5, 0) <class 'tuple'>
# 1. Полностью идентичный спискам, но нельзя изменять элементы


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. Множества не могут содержать копий элементов (все различные элементы)


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через ключ

print(D['один'])  # one

# 3. Ключи не могут повторяться, иначе произойдет перезапись значения
D['три'] = 3
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two', 'три': 3}
'''


# Конвертация типов данных
'''
a = 5
print(type(a), a)  # <class 'int'> 5

a = float(a)
print(type(a), a)  # <class 'float'> 5.0

a = str(a)
print(type(a), a)  # <class 'str'> 5
# ValueError: invalid literal for int() with base 10: '5.0'


a = int(a)
print(type(a), a)  # <class 'int'> 5


A = [1, 2, 2, 3, 3, 3]
print(type(A), A)  # <class 'list'> [1, 2, 2, 3, 3, 3]

A = tuple(A)
print(type(A), A)  # <class 'tuple'> (1, 2, 2, 3, 3, 3)

A = set(A)
print(type(A), A)  # <class 'set'> {1, 2, 3}

A = list(A)
print(type(A), A)  # <class 'list'> [1, 2, 3]
'''


# Ввод данных с клавиатуры
'''
number = int(input('Введите число: '))
print('Квадрат числа:', number ** 2)

name = input('Введите свое имя: ')
print('Меня зовут: ', name)
print(type(name))
'''

# Напишите программу, которая запрашивает у пользователя
# три числа и выводит следующие арифметические операции:
# разность первого и второго чисел, сумму первого и третьего числа,
# остаток от деления первого числа на второе.
# Результаты каждой операции должны быть выведены на экран,
# каждое на отдельной строке.
'''
a = int(input())
b = int(input())
c = int(input())
print(a - b)
print(a + c)
print(a % b)
'''

# Как работать с f-строкой
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))

print('Привет, сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Привет, сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Привет, сегодня {weather}, а температура {temperature} градуса!')
'''


# Базовая арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'  # \n - переход на новую строку в консоли 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку \n

print(f'{a} / {b} = {a / b}')  # 3.5 - вещественное деление (дробь) 
print(f'{a} // {b} = {a // b}')  # 3 - целочисленное деление (всегда int) 
print(f'{a} % {b} = {a % b}')  # 1 - остаток от деления (всегда int) 
# 7 / 2 = 3 целых и 1/2 

print(123 // 10)  # 12
print(123 % 10)  # 3

n = int(input())
if n % 2 == 0:
    print('Четное число | Делится на 2 | Кратно 2')
if n % 3 == 0:
    print('Делится на 3 | Кратно 3')
if n % 10 == 3:
    print('Число заканчивается на 3')
if n % 100 == 23:
    print('Число заканчивается на 23')
    
print()

print(f'Возведем число 7 в 2 степень: {7**2}')
print(f'Возведем число 7 в 3 степень: {7**3}')

print()

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
