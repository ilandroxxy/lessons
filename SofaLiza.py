# region –î–æ–º–∞—à–∫–∞: ******************************************************************

# –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º
# P = [2, 3, 5, 7, 11, 13, 17, + inf]
# N = [1, 2, 3, 4, 5, ... + inf]
# Z = [-inf, -2, -1, 0, 1, 2, .., +inf]
# –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ü–µ–ª—ã–º


# –ü–æ–∏—Å–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π —á–∏—Å–ª–∞:
'''
def divisors(n):
    div = []
    for j in range(1, n+1):
        if n % j == 0:
            div.append(j)
    return div


def prime(n):
    if n <= 1:
        return False
    for j in range(2, n):
        if n % j == 0:
            return False
    return True


for n in range(1, 50):
    # if len(divisors(n)) == 2:
    #     print(n, end=' ')  # 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47
    if prime(n):
        print(n, end=' ')  # 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47
'''
from runpy import run_path

# –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
# https://stepik.org/lesson/1309435/step/12?unit=1324551
'''
a = int(input())
b = int(input())
for n in range(a, b+1):
    d = 0
    for j in range(1, n + 1):
        if n % j == 0:
            d += 1
    if d == 2:
        print(n)
'''

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–ø–∏—Å–∫–æ–≤ list()
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# 1. –ú–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π
# 2. –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
# 3. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: –∏–Ω–¥–µ–∫—Å
# 4. –°—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –º—ã –º–æ–∂–µ–º —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å 0 –∏–ª–∏ —Å–ø—Ä–∞–≤–∞-–Ω–∞–ª–µ–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å -1
# 5. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ—Ä—Ç–µ–∂–µ–π –∏ —Å—Ç—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã

print(f'–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ L: {L[0]}') # a
print(f'–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ L: {L[-1]}')  # e

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']

M = [2, 2.0, '2', True, [1, 2, 3], (1, 2, 3), {1, 2, 3}]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
'''

# –†–∞–±–æ—Ç–∞ —Å —Ü–∏–∫–ª–∞–º–∏ for
'''
# i   0    1    2    3    4
L = ['A', 'b', 'c', 'd', 'E']

for x in L:
    print(x, end=' ')  # A b c d E
print()

for x in L:
    if x.islower():
        print(x, end=' ')  # b c d
print()

print(len(L))  #  5 - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ L

for i in range(len(L)):
    # print(i, end=' ')  # 0 1 2 3 4
    print(L[i], end=' ')  # A b c d E
print()

for i in range(len(L)):
    L[i] = L[i] * i
print(L)  # ['', 'b', 'cc', 'ddd', 'EEEE']
'''


# –°–†–ï–ó–´ —Å–ø–∏—Å–∫–æ–≤, —Å—Ç—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
'''
# –°–†–ï–ó–´[START : STOP-1 : STEP]

# i  01234
s = 'abcde'
print(s[1:4])  # 'bcd'

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']

print(L[1:4])  # ['b', 'c', 'd']
print(L[:4])  # ['a', 'b', 'c', 'd'] - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ 4 –∏–Ω–¥–µ–∫—Å–∞ (–Ω–µ –≤–∫–ª—é—á–∞—è –∫–æ–Ω–µ—Ü)
print(L[2:])  # ['c', 'd', 'e'] - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å 2 –∏–Ω–¥–µ–∫—Å–∞

print(L[2:])  # - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö
print(L[-3:])  # - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞

print(L[:]) # - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ
print(L[::])  # ['a', 'b', 'c', 'd', 'e']

print(L[0::2])  # ['a', 'c', 'e'] - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
print(L[1::2])  # ['b', 'd'] - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏

print(L[::-1])  # ['e', 'd', 'c', 'b', 'a'] - –í—Å–µ —ç–ª–µ–º–µ–Ω—ã—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ 
'''


# –§—É–Ω–∫—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤
'''
L = [1, 2, 2, 3, 3, 3]

print(len(L))  # - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ (–∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
print(sum(L))  # - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
print(max(L), min(L))  # - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã

print(sorted(L))  # [1, 2, 2, 3, 3, 3]
print(sorted(L, reverse=True))  # [3, 3, 3, 2, 2, 1]

print(reversed(L))  # <list_reverseiterator object at 0x100bee020>
print(list(reversed(L)))  # [3, 3, 3, 2, 2, 1] - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫

print(set(L))  # {1, 2, 3} - —É–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã 
'''


# üñ• –í—Å–µ –º–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–æ–≤ –≤ Python, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–∞ –ï–ì–≠

# .APPEND()
# –ú–µ—Ç–æ–¥ .append() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4, 5]
'''
# –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é (—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ) —Å–ø–∏—Å–∫–æ–≤:
'''
my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # –í—ã–≤–æ–¥: [0, 1, 2, 3, 4, 5]
'''


# .REVERSE()
# –ú–µ—Ç–æ–¥ .reverse() –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''
# –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É —á–µ—Ä–µ–∑ —Å—Ä–µ–∑:
'''
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''


# .COUNT()
# –ú–µ—Ç–æ–¥ .count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [1, 2, 2, 3, 4, 2, '2', '2']
print(my_list.count(2))  # –í—ã–≤–æ–¥: 3
print(my_list.count('2'))  # –í—ã–≤–æ–¥: 2
'''


# .REMOVE()
# –ú–µ—Ç–æ–¥ .remove() —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # –ü–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –¥–≤–æ–π–∫–∞
print(my_list)  # –í—ã–≤–æ–¥: [1, 3, 2, 4]

my_list = [1, 2, 3, 2, 4]
while 2 in my_list:
    my_list.remove(2)
print(my_list)  # [1, 3, 4]
'''
# –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É—è del:
'''
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # –ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
print(my_list)  # –í—ã–≤–æ–¥: [1, 3, 2, 4]

my_list = [1, 2, 3, 2, 4]
del my_list[1::2]
print(my_list)  # [1, 3, 4]
'''

# .INDEX()
# –ú–µ—Ç–æ–¥ .index() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # –í—ã–≤–æ–¥: 1
'''


# .SORT()
# –ú–µ—Ç–æ–¥ .sort() —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç reverse=True. –ü—Ä–∏–º–µ—Ä:
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''
# –°–∫–∞–∂—É —á–µ—Å—Ç–Ω–æ —è –Ω–µ –ª—é–±–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞, —Å—á–∏—Ç–∞—é, —á—Ç–æ —É–¥–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sorted():
'''
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # –í—ã–≤–æ–¥: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # –í—ã–≤–æ–¥: [4, 3, 2, 1]
'''


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ø–∏—Å–∫–æ–≤

# –ì–ï–ù–ï–†–ê–¢–û–†[—á—Ç–æ_–∫–ª–∞–¥–µ–º –æ—Ç–∫—É–¥–∞_–±–µ—Ä–µ–º]
# –ì–ï–ù–ï–†–ê–¢–û–†[—á—Ç–æ_–∫–ª–∞–¥–µ–º –æ—Ç–∫—É–¥–∞_–±–µ—Ä–µ–º –ø—Ä–∏_–∫–∞–∫–æ–º_—É—Å–ª–æ–≤–∏–∏]

'''
n = int(input())
R = []
for i in range(n):
    x = int(input('x: '))
    R.append(x)
print(R)

print([int(input('x: ')) for x in range(int(input()))])
'''

# –ì–ï–ù–ï–†–ê–¢–û–†[—á—Ç–æ_–∫–ª–∞–¥–µ–º –æ—Ç–∫—É–¥–∞_–±–µ—Ä–µ–º]
M = [x for x in range(10)]  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# –ì–ï–ù–ï–†–ê–¢–û–†[—á—Ç–æ_–∫–ª–∞–¥–µ–º –æ—Ç–∫—É–¥–∞_–±–µ—Ä–µ–º –ø—Ä–∏_–∫–∞–∫–æ–º_—É—Å–ª–æ–≤–∏–∏]
M = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]

M = [x**2 for x in range(10) if x % 2 == 0]  # [0, 4, 16, 36, 64]

from random import randint
n = randint(10, 20)
M = [randint(0, 100) for x in range(n)]
print(M)  # [59, 78, 94, 29, 54, 92, 72, 75, 74, 15, 5, 20, 22, 49, 35]

chet = [x for x in M if x % 2 == 0]
print(chet)  # [78, 94, 54, 92, 72, 74, 20, 22]

nechet = [x for x in M if x not in chet]
print(nechet)  # [59, 29, 75, 15, 5, 49, 35]

copied = [x for x in M if M.count(x) > 1]
print(copied)  # []

not_copied = [x for x in M if M.count(x) == 1]
print(not_copied)  # [59, 78, 94, 29, 54, 92, 72, 75, 74, 15, 5, 20, 22, 49, 35]

A = [x for x in M if x % 10 == 5]
print(A)  # [75, 15, 5, 35]

B = [x for x in M if len(str(x)) == 2]
print(B)  # [59, 78, 94, 29, 54, 92, 72, 75, 74, 15, 20, 22, 49, 35]

AB = [x for x in M if x in A and x in B]
print(AB)  # [75, 15, 35]

# endregion –£—Ä–æ–∫: *************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************


# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠ = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
