# region Домашка: ******************************************************************

# Пример кода для 2 номера с 0,1 в условии
'''
print('x y z w F')
for x in 0, 1:
    for y in 0, 1:
        for z in 0, 1:
            for w in 0, 1:
                # F = ((y → w) ≡ (x → ¬z)) ∧ (x ∨ w).
                F = ((y <= w) == (x <= (not z))) and (x or w)
                print(x, y, z, w, int(F))
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Встроенные функции перевода в различные системы счисления
'''
n = 8

# Перевод в 2-ю систему из 10-й
print(bin(n)[2:])  # 1000
print(f'{n:b}')  # 1000
# Перевод из 2-й в 10-ю систем счисления
print(int('1000', 2))  # 8


# Перевод в 8-ю систему из 10-й
print(oct(n)[2:])  # 10
print(f'{n:o}')  # 10
# Перевод из 8-й в 10-ю систем счисления
print(int('10', 8))  # 8


# Перевод в 16-ю систему из 10-й
print(hex(n)[2:])  # 8
print(f'{n:x}')  # 8
# Перевод из 16-й в 10-ю систем счисления
print(int('8', 16))  # 8

print(int('212', 3))  # 23
# ValueError: int() base must be >= 2 and <= 36, or 0
'''

# Универсальная функция перевода из 10-й в b-ю систему
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r

print(convert(8, 2))  # 1000
print(convert(10**8, 16))  # 5F5E100
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
#
# Укажите минимальное число N, после обработки которого с помощью этого алгоритма
# получается число R, не меньшее 200
'''
RES = []
for n in range(1, 10000):
    s = bin(n)[2:]  # s = f'{n:b}'
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)
    if r >= 200:
        RES.append(n)
print(min(RES))
'''


# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается
# на 4, переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с
# помощью этого алгоритма получается число R, меньшее 100.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')
def convert(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r

RES = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 100:
        RES.append(n)
print(max(RES))
'''


# № 23189 Основная волна 10.06.25 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то к этой записи дописываются три последние
# двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью этого
# алгоритма получается число R, меньшее 130.
'''
RES = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)
    if r < 130:
        RES.append(n)
print(max(RES))
'''


# № 17859 Демоверсия 2025 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1
# и справа дописывается 01.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число R, которое может быть результатом работы
# данного алгоритма, при условии, что N не больше 12.
'''
RES = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if n <= 12:
        RES.append(r)
print(max(RES))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5]
# КЕГЭ = []
# на следующем уроке: Списки домашка и практика на след. уроке
