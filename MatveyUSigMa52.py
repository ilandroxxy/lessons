# region –î–æ–º–∞—à–∫–∞: ******************************************************************

'''
a = int(input())
summa = 0
proiz = 1
p1 = a // 10000
p2 = (a // 1000) % 10
p3 = (a // 100) % 10
p4 = (a // 10) % 10
p5 = a % 10
summa = p1 + p2 + p3 + p4 + p5
proiz = p1 * p2 * p3 * p4 * p5
print(proiz)
print(summa)
'''

'''
import math

a = int(input())
p1 = a // 10000
p2 = (a // 1000) % 10
p3 = (a // 100) % 10
p4 = (a // 10) % 10
p5 = a % 10
# –ò–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ math –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é prod,
# –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print(math.prod([p1, p2, p3, p4, p5]))
print(sum([p1, p2, p3, p4, p5]))
'''

# endregion –î–æ–º–∞—à–∫–∞: ******************************************************************
# #
# #
# region –£—Ä–æ–∫: ********************************************************************


# –°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ Python
'''
M = [1, 2, 3, 4, 5]

import math
print(math.prod(M))  # 120

import math as m  # –ü–æ–¥–∫–ª—é—á–∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º m
print(m.prod(M))  # 120

from math import prod, sqrt, pow  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
print(prod(M))  # 120

from math import *  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
print(prod(M))  # 120
print(sqrt(16))  # 4.0
'''


# üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ! #tpy #useful

# 1‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 6 –Ω–æ–º–µ—Ä–∞ –∫–æ–¥–æ–º:
'''
import turtle as t

t.tracer(0)

t.fd(10)  # t.bk(10)
t.rt(90)  # t.lt(90)

t.up()
t.down()

x, y = 0, 0
t.goto(x, y)
t.dot(2, 'red')

t.done()
'''


# 2‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ itertools –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 1, 8, 9, 12, 24 –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–¥–æ–º:
'''
from itertools import product, permutations

combinations = list(product('abc', repeat=3))
for combination in combinations:
    print(''.join(combination))
    # aaa
    # aab
    # aac
    # aba
    # abb
    # abc
    # aca
    # acb
    # acc
    # baa
    # bab
    # bac
    # bba
    # bbb
    # bbc
    # bca
    # bcb
    # bcc
    # caa
    # cab
    # cac
    # cba
    # cbb
    # cbc
    # cca
    # ccb
    # ccc

perms = list(permutations("abc"))
for perm in perms:
    print(''.join(perm))
    # abc
    # acb
    # bac
    # bca
    # cab
    # cba
'''


# 3‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ipaddress –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ 13 –Ω–æ–º–µ—Ä–∞:
'''
from ipaddress import *
net = ip_network('–∞–¥—Ä–µ—Å —É–∑–ª–∞/–º–∞—Å–∫–∞', 0)
print(net, net.netmask, net.num_addresses)
'''


# 4‚É£ –î–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 16 –Ω–æ–º–µ—Ä–∞:
'''
# –û–¥–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏:
import sys
sys.setrecursionlimit(10000)


# –í—Ç–æ—Ä–∞—è —É—Å–∫–æ—Ä—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
from functools import *
@lru_cache(None)
def F(n):
'''

# 5‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ fnmatch –¥–ª—è —Ä–µ—à–µ–Ω–∏—è 25 –Ω–æ–º–µ—Ä–∞ —Å –º–∞—Å–∫–∞–º–∏:
'''
from fnmatch import fnmatch
if fnmatch('123', '*?3'):
    pass
'''


# 6‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
'''
import string
alphabet = string.ascii_uppercase
print(alphabet)  # ABCDEFGHIJKLMNOPQRSTUVWXYZ

print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
'''

# 7‚É£ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ math —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
'''
import math as m
print(m.sqrt(16))
print(m.ceil(7/2))
'''


# –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–≤–µ—Ç–≤–ª–µ–Ω–∏–µ): if, elif, else

# x = int(input('x: '))
# y = int(input('y: '))
'''
x, y = -6, 7

if x > 0 and y > 0:
    print('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y > 0:
    print('–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x < 0 and y < 0:
    print('–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å')
elif x > 0 and y < 0:
    print('–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')
else:
    print('–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å—è—Ö')
print('–ö–æ–Ω–µ—Ü')
'''


# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏: and, or, not, ^, !=, ==, =
'''
flag = True
print(not flag)  # False: not - –∏–Ω–≤–µ—Ä—Å–∏—è (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)
print(not(not flag))  # True

a, b, c = 5, -6, -7
if a > 0 and b > 0:  # and - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
    print('YES 1')
if a > 0 or b > 0:  # or - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    print('YES 2')
if (a > 0) ^ (b > 0):  # ^, != - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    print('YES 3')
if (a > 0) != (b > 0):
    print('YES 3')
    
print(True + True + False)  # 2
# –¢–æ–ª—å–∫–æ –¥–≤–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è 
if (a > 0) + (b > 0) + (c > 0) == 2:
    print('YES 4')
# –•–æ—Ç—è –±—ã –¥–≤–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
if (a > 0) + (b > 0) + (c > 0) >= 2:
    print('YES 5')
'''

# endregion –£—Ä–æ–∫: ********************************************************************
# #
# #
# region –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************

# endregion –†–∞–∑–æ–±—Ä–∞—Ç—å: *************************************************************
# #
# #
# –§–ò–ü–ò = []
# –ö–ï–ì–≠  = []
# –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ:
