# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - однострочный комментарий ctrl + /

'''
- Многострочный комментарий
'''

print('Сегодня я прочитал книгу "Война и мир", очень понравилась.')


# x = 5  # переменная - это удобный способ взаимодействия с ячейкой памяти
# print(x, type(x))  # 5 <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(2+2, type(2+2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, который хранит в себе символы, буквы, слова, тексты и тд тп
print(a * 4, c * 4)  # 20 5555 - при умножении строки на целое число строка дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello
new_message = 'Hello, ' + 'world!'
print(new_message)  # Hello, world! - это операция конкатенации (склеивание) строк
# TypeError: can only concatenate str (not "int") to str

d1 = True
d0 = False  # bool (Boolean) - Элементы Булевой алгебры (Математическая логика)
print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательности)
'''
A = [1, 2, 3, 5.0, True, [1, 2, 3]]  # list (список)
# 1. Может хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой индивидуальный порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно брать через индексы, а также изменять их значение

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # 'a' - первый элемент списка M
print(M[-1])  # 'e' - последний элемент списка M
M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, за исключением: нельзя изменять элементы кортежа

C = {1, 2, 3, 2, 3}  # set (множество)
# 1. В множестве элементы не могут повторять, то есть копии удаляются
print(C)  # {1, 2, 3}


D = {'один': 'one', 'два': 'two', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря разбиты на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи дублироваться не могут, если такое происходит, то значение по ключу перезаписывается

print(D['один'])  # one
D['один'] = 'ONE'
print(D)  # {'один': 'ONE', 'два': 'two', 'автобус': 'bus'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2<10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
print(s, type(s))  # 56 <class 'str'>

n = int(input('Введите число: '))
print(n, type(n))
'''


# Пример работы с f-строкой
'''
# Напишите текст: "Сегодня облачно, но температура 24 градуса!"
weather = 'облачно'
temperature = 24
print('Сегодня ', weather, ', но температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', но температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, но температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, но температура {temperature} градуса!')
'''


# Базовая арифметика

a, b = 7, 2

print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждой функции print() есть переход на новую строку через '/n'

print(f'{a} / {b} = {a/b} \n'  # Вещественное деление (дроби)
      f'{a} // {b} = {a//b} \n'  # Взятие только целой части от деления
      f'{a} % {b} = {a%b}')  # Взятие остатка от деления

print(123 // 10)  # 12
print(123 % 10)  # 3


print(f'Возведем число {a} в степень {b}: {a ** b}')  # 49
from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1 / 2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1 / 3)}')  # 3.0


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
