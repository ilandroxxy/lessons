# region Домашка: ******************************************************************

# № 13094 (Уровень: Средний)
# Сколько существует 9-значных девятеричных чисел, в записи которых не
# встречается цифра 0, любые две соседние цифры имеют разную чётность, и никакая цифра не повторяется больше 3 раз?
'''
from itertools import product
a2 = '2468'
a1 = '1357'
cnt = 0
for p in product(a1, a2, a1, a2, a1, a2, a1, a2, a1):
    num = ''.join(p)
    if all(num.count(x) <= 3 for x in num):
        cnt += 1
print(cnt * 2)
'''

'''
num = 0
from itertools import *
for per in product('012345678', repeat=9):
    s = ''.join(per)
    if '0' not in s:
        if s.count('1') <= 3 and s.count('2') <= 3 and s.count('3') <= 3 and s.count('4') <= 3 and s.count('5') <= 3 and s.count('6') <= 3 and s.count('7') <= 3 and s.count('8') <= 3:
        #all(s.count(x) <= 3 for x in s)
            s = s.replace('3', '1').replace('5', '1').replace('7','1')
            s = s.replace('4', '2').replace('6', '2').replace('8', '2')
            if '11' not in s and '22' not in s:
                num += 1
print(num)
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 234.95.131.37
# Маска: 255.255.192.0
'''
# Адрес сети = IP-адрес узла & Маска сети

# & - побитовая конъюнкция (логическое умножение) (1 and 1 = 1)

print(12 & 6)  # 4
print(bin(12)[2:])
print(bin(6)[2:])

# IP - это четыре числа на каждое из которых выделено по 1 байту (бит)
# Из этого следует, что сила лежат в диапазоне от 0 до 255 (так как они восьмибитные)
print(bin(255)[2:])  # 11111111


print('.'.join([bin(int(x))[2:].zfill(8) for x in '234.95.131.37'.split('.')]))
print('.'.join([bin(int(x))[2:].zfill(8) for x in '255.255.192.0'.split('.')]))
# Маска сети имеет длину 32 символа: 11111111.11111111.11000000.00000000
# И вид сначала 1, а затем нули: 111111.....0000
'''


# Тип 13 №5062
# По заданным IP-адресу узла и маске определите адрес сети.
# IP-адрес узла: 234.95.131.37
# Маска: 255.255.192.0
'''
from ipaddress import *
net = ip_network('234.95.131.37/255.255.192.0', 0)
print(net)  # 234.95.128.0/18, где 18 это кол-во единиц в маске
'''


# Тип 13 №13542
# Для узла с IP-адресом 136.128.196.48 адрес сети равен 136.128.192.0.
# Чему равно наибольшее возможное значение третьего слева байта маски?
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
for mask in range(32+1):
    net = ip_network(f'136.128.196.48/{mask}', 0)
    print(net, net.netmask)
    # 136.128.192.0/18 255.255.192.0
    # 136.128.192.0/19 255.255.224.0
    # 136.128.192.0/20 255.255.240.0
    # 136.128.192.0/21 255.255.248.0
'''
'''
from ipaddress import *
maxi = 0
for mask in range(32+1):
    net = ip_network(f'136.128.196.48/{mask}', 0)
    if str(net) == f'136.128.192.0/{mask}':
        print(net, net.netmask)
        maxi = max(maxi, int(str(net.netmask).split('.')[2]))
print(maxi)
'''


# Тип 13 №27238
# Узлы с IP-адресами 84.77.47.132 и 84.77.48.132 находятся в одной сети.
# Укажите наибольшее возможное значение
# третьего слева байта маски этой сети.
# Ответ запишите в виде десятичного числа.
'''
from ipaddress import *
R = []
for mask in range(32+1):
    net1 = ip_network(f'84.77.47.132/{mask}', 0)
    net2 = ip_network(f'84.77.48.132/{mask}', 0)
    if net1 == net2:
        R.append(str(net1.netmask).split('.')[2])

print(max(R))
'''


# № 17867 Демоверсия 2025 (Уровень: Базовый)
# Сеть задана IP-адресом 172.16.168.0 и маской сети 255.255.248.0.
# Сколько в этой сети IP-адресов, для которых количество единиц
# в двоичной записи IP-адреса не кратно 5?
'''
from ipaddress import *
net = ip_network('172.16.168.0/255.255.248.0', 0)
cnt = 0
for ip in net:
    b = f'{ip:b}'
    if b.count('1') % 5 != 0:
        cnt += 1
print(cnt)
'''
# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 12, 13, 14]
# КЕГЭ  = []
# на следующем уроке:
