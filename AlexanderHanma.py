# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Тип 23 №13525
# У исполнителя есть две команды, которым присвоены номера.
# 1. Прибавить 1.
# 2. Прибавить 3.
#
# Сколько существует программ, для которых при исходном числе 1
# результатом является число 15 и при этом траектория вычислений содержит число 8?
'''
def F(a, b):
    if a > b:
        return 0
    elif a == b:
        return 1
    else:
        return F(a + 1, b) + F(a + 3, b)


print(F(1, 8) * F(8, 15))
'''

'''
def F(a, b):
    if a >= b:
        return a == b
    return F(a + 1, b) + F(a + 3, b)

print(F(1, 8) * F(8, 15))
'''

# Тип 23 №56523
# У исполнителя есть четыре команды, которым присвоены номера.
# 1. Прибавить 1.
# 2. Прибавить 2.
# 3. Умножить на 2.
# 4. Умножить на 3.
#
# Сколько существует программ, которые преобразуют исходное число 1 в число 11
# и при этом содержат ровно одну команду умножения?
'''
def F(a, b, c):
    if a >= b:
        return a == b and c.count('3') + c.count('4') == 1
    return F(a+1, b, c+'1') + F(a+2, b, c+'2') + F(a*2, b, c+'3') + F(a * 3, b, c+'4')


print(F(1, 11, ''))
'''


# Тип 23 №36036
# У исполнителя есть две команды, которым присвоены номера:
# 1. Вычесть 2.
# 2. Вычесть 5.
#
# Сколько существует программ, которые число 23 преобразуют в число 2?
'''
def F(a, b):
    if a <= b:
        return a == b
    return F(a-2, b) + F(a-5, b)


print(F(23, 2))
'''


# Тип 23 №17386
# У исполнителя есть три команды, которым присвоены номера.
# 1. Прибавить 1.
# 2. Умножить на 2.
# 3. Прибавить 5.

# Сколько существует программ, которые преобразуют исходное число 1 в число 18
# и при этом траектория вычислений содержит число 9 и не содержит числа 11?
'''
def F(a, b):
    if a >= b or a == 11:
        return a == b
    return F(a+1, b) + F(a*2, b) + F(a+5, b)


print(F(1, 9) * F(9, 18))
'''


# Тип 15 №15634
# Для какого наименьшего целого неотрицательного числа А выражение
# (y + 2x < A) ∨ (x > 30) ∨ (y > 20)
# тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных x и y?
'''
def F(x, y, A):
    return (y + 2*x < A) or (x > 30) or (y > 20)

for A in range(0, 1000):
    if all(F(x, y, A) for x in range(100) for y in range(100)):
        print(A)
        break
'''

'''
def F(x, y, A):
    return (y + 2*x < A) or (x > 30) or (y > 20)


for A in range(1000):
    flag = True
    for x in range(100):
        for y in range(100):
            if F(x, y, A) == False:
                flag = False
                break
                
    if flag == True:
        print(A)
        break
'''

'''
def F(x, y, A):
    return (y + 2*x < A) or (x > 30) or (y > 20)


for A in range(0, 300):
    k = 0
    for x in range(0, 300):
        for y in range(0, 300):
            if F(x, y, A):
                k += 1
    if k == 90_000:
        print(A)
        break
'''


# Тип 15 №68516
# Для какого наибольшего натурального числа А логическое выражение
# ¬ДЕЛ(x, А) → (ДЕЛ(x, 14) → ¬ДЕЛ(x, 4))
# истинно (т.е. принимает значение 1) при любом целом положительном значении переменной х?
'''
def F(x, A):
    return (x % A != 0) <= ((x % 14 == 0) <= (x % 4 != 0))


R = []
for A in range(1, 1000):
    if all(F(x, A) for x in range(0, 10000)):
        R.append(A)
print(max(R))
'''


# print(12 & 6)  # 4

'''
def F(x, A):
    return (x & 33 == 0) <= ((x & 45 != 0) <= (x & A != 0))


R = []
for A in range(0, 1000):
    if all(F(x, A) for x in range(0, 10000)):
        R.append(A)
print(min(R))
'''


# Тип 15 №34543
# На числовой прямой даны два отрезка: P=[3, 13] и Q=[12, 22].
# Какова наибольшая возможная длина интервала A, что формула
# ((х ∈ A) → (х ∈ Р)) ∨ (х ∈ Q)
# тождественно истинна, то есть принимает значение 1 при любом значении переменной х.

'''
def F(x, a1, a2):
    P = 3 <= x <= 13
    Q = 12 <= x <= 22
    A = a1 <= x <= a2
    return (A <= P) or Q


M = [x / 10 for x in range(0 * 10, 30 * 10)]
print(M)
R = []
for a1 in M:
    for a2 in M:
        if all(F(x, a1, a2) for x in M):
            R.append(a2 - a1)

print(max(R))  # 19.0 -> 19, 19.n -> 20
'''


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 12, 13, 14, 16, 23, 25]
# КЕГЭ  = []
# на следующем уроке:
