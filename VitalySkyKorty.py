# region Домашка: ************************************************************


# endregion Домашка: *********************************************************
# #
# #
# region Урок: ************************************************************

x = 5  # переменная - это удобный способ взаимодействовать с данными
y: int = 5  # явно указываем типизацию данных (переменной)
print(type(x))  # <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(4+4))  # # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(type(4 / 2))  # 2.0 <class 'float'>

c = "5"  # str (string) - строковый тип данных, хранит в себе все символы
print(a * 4, c * 4)  # 20 5555 - строка при умножении на целое число - дублируется
print('hello ' * 4)  # hello hello hello hello
print('Hello, ' + 'world! ')  # Hello, world! - конкатенация строк (склеивание)

d1 = True  # bool (Boolean) - элементы Булевой алгебры (Математическая логика)
d0 = False
print(4 < 10)  # True
'''

# Типы данных коллекция (последовательностей)
'''
# i  0  1  2
A = [1, 2, 3]  # list (список)
# 1. Могут содержать неограниченное кол-во элементов различных типов данных
# 2. Каждый элемент имеет порядковый номер (индекс), счет начинается с 0
# 3. По индексу можно брать элементы списка и изменять их
print(A[0])  # 1
A[0] = 100
print(A)  # [100, 2, 3]


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, но в нем нельзя изменять элементы


C = {1, 2, 3, 3, 3}  # set (множество)
# 1. Не могут содержать копии элементов
print(C)  # {1, 2, 3}


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря состоят из двух частей: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его (индивидуальный) ключ
print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2==2, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(x, type(x))
    # 2 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 2.0 <class 'float'>
    # 22 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 'one', 'два': 'two'} <class 'dict'>
'''


# Конвертация типов данных:
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'


a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))   # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')  # принимает с клавиатуры строковый тип данных
x = int(input('Введите число: '))
print(s*4, x*4)  # 5555 20
'''

# f-строки

# Базовая арифметика
'''
a = 7
b = 2
a, b = 7, 2

print(7 + 2)  # 9
print(7 - 2)  # 5
print(7 * 2)  # 14

# Деления:
print(7 / 2)  # 3.5 - обычное вещественное деление
print(7 // 2)  # 3 - взятие только лишь целой части
print(7 % 2)  # 1 - взятие остатка от деления


# Проверяем на какое число заканчивается n (последние цифры)

n = 123
print(n % 10)  # 3
print(n % 100)  # 23

print(7**2)  # 49 - возведение числа 7 в степень 2
print(16 ** (1/2))  # 4.0 - взятие квадратного корня
print(27 ** (1/3))  # 3.0 - взятие кубического корня
'''

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
