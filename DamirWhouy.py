# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# - это однострочный комментарий

# https://stepik.org/lesson/1038703/step/4?unit=1062210
# ctrl + click можно открыть ссылку

'''
- это многострочный комментарий
'''
from modulefinder import replacePackageMap
from secrets import choice

# x = 5  # переменная - удобный способ взаимодействия с памятью
# print(type(x), x)  # <class 'int'> 5


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(2 + 2), 2 + 2)  # <class 'int'> 4


b = 5.0  # float (число с плавающей точкой) - вещественные значения (дробь)
print(type(4 / 2), 4 / 2)  # <class 'float'> 2.0


c = '5'  # str (string) - строковый тип данных для хранения текста
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555

print('hello ' * 4)  # hello hello hello hello - при умножении строки на целое число строка дублируется

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # 'Hello, world!'  - конкатенация строк (склеивание)


d1 = True  # bool (Boolean) - Булева алгебра/математическая логика
d0 = False
print(4 < 10)  # True
'''


# Типы данных коллекций/последовательностей
'''
A = [1, 2, 3]  # list (список)

# 1. Могут содержать неограниченное кол-во элементов
# 2. Элементы могут принимать различные типы данных
# 3. Каждый элемент словаря имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы мы можем изменять элементы списков (в отличие от кортежей и строк)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print('Первый элемент списка L:', L[0])
print('Последний элемент списка L:', L[4])
print('Последний элемент списка L:', L[-1])

L[0], L[-1] = L[-1], L[0]
print(L)  # ['e', 'b', 'c', 'd', 'a']


M = [2, 2.0, '2', True, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, но нельзя изменять элементы кортежа


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. Удаляют копии элементов - все элементы различные


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словарей разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи не могут повторяться иначе придется сделать "перезапись" значения

print(D['один'])  # one
D['три'] = 3
print(D)  # {'один': 'one', 'два': 'two', 'три': 3}
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two', 'три': 3}
'''


# Конвертация типов данных
'''
a = 5
print(type(a), a)  # <class 'int'> 5

a = str(a)
print(type(a), a)  # <class 'str'> 5

a = float(a)
print(type(a), a)  # <class 'float'> 5.0

a = int(a)
print(type(a), a)  # <class 'int'> 5


A = [1, 2, 2, 3, 3, 3]
print(type(A), A)  # <class 'list'> [1, 2, 2, 3, 3, 3]

A = tuple(A)
print(type(A), A)  #  <class 'tuple'> (1, 2, 2, 3, 3, 3)

A = set(A)
print(type(A), A)  # <class 'set'> {1, 2, 3}

A = list(A)
print(type(A), A)  # <class 'list'> [1, 2, 3]
'''


# Ввод данных с клавиатуры
'''
number = int(input('Введите число: '))
print(type(number), number)

name = input('Введите свое имя: ')
print('Имя пользователя:', name)
'''


# Пример работы f-строки
''' Привет, Илья! Сегодня облачно, а температура 24 градуса! '''
"""
from random import choice
name = input('Введите свое имя: ')
weather = choice(['облачно', 'мрачно', 'солнечно'])
print('Сегодня погода:', weather)
temperature = int(input('Введите температуру: '))

print('Привет, ', name, '! Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Привет, ' + name + '! Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, {}! Сегодня {}, а температура {} градуса!'.format(name, weather, temperature))
print(f'Привет, {name}! Сегодня {weather}, а температура {temperature} градуса!')
"""


# Базовая арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'   # \n - переход на новую строку 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b} ')

print()  # В каждой функции print() есть переход на новую строку \n

# Три типа деления в программировании
print(f'{a} / {b} = {a / b}')  # 3.5 - обыкновенное вещественное деление (результат float)
print(f'{a} // {b} = {a // b}')  # 3 - взятие только целой части от деления (результат int)
print(f'{a} % {b} = {a % b}')  # 1 - взятие остатка от деления (результат int)
# 7 / 2 = 3 целых и 1/2

print()

n = 123
print(n // 10)  # 12
print(n % 10)  # 3

n = int(input('n: '))
if n % 2 == 0:
      print('Число четное | делится на 2 | кратно 2')
if n % 2 != 0:
      print('Число нечетное | не делится на 2 | не кратно 2')
if n % 3 == 0:
      print('Число делится на 3 | кратно 3')
if n % 10 == 3:
      print('Число оканчивается на 3')
if n % 100 == 54:
      print('Число оканчивается на 54')

print()


from math import sqrt
print(f'Возведем число 7 в степень 2: {7 ** 2}')
print(f'Взять квадратный корень от числа 16: {sqrt(16)}')
print(f'Взять квадратный корень от числа 16: {16 ** (1/2)}')
print(f'Взять кубический корень от числа 27: {27 ** (1/3)}')
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
