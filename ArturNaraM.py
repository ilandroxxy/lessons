

a: int = 5
b: float = 5.5
c: str = '5'
d: bool = True

# Типы данных коллекций (последовательность) -> массив
'''
A: list = [1, 2, 3]  # Список
M = [4, 5]  # list
# 1. Могут хранить неограниченное кол-во элементов - различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индекс)
# 3. Индексы считаются слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно брать через индексы и менять через индексы

B: tuple = (1, 2, 3)  # Кортеж
# 1. Элементы кортежа менять нельзя!

C: set = {1, 2, 3, 2, 3}  # Множество
print(C)  # {1, 2, 3}
# 1. Не могут содержать копии элементов

D: dict = {'один': 'one', 'автобус': 'bus'}
print(D['автобус'])  # bus
# 1. Элементы словаря разбиваются на две части: ключи и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи повторяться не могут, поэтому новое значение будет заменять старое

D['один'] = 1
print(D)  # {'один': 1, 'автобус': 'bus'}

for key, value in D.items():
    print(key, value)
    # один 1
    # автобус bus
'''



'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2 < 4, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'автобус': 'bus'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'автобус': 'bus'}
'''

'''
# i   0    1    2    3    4        5
L = ['a', 'b', 'c', 'd', True, (1, 2, 3)]
# -i -6   -5   -4   -3    -2      -1

print(len(L))  # 6 Функция len() - возвращает кол-во элементов в списке (последовательности)

print(L[5])  # (1, 2, 3)
L[1] = 'B'
print(L)  # ['a', 'B', 'c', 'd', True, (1, 2, 3)]

print(f'Первый элемент списка: {L[0]}')
print(f'Последний элемент списка: {L[-1]}')
'''

# Функции для списков
'''
M = [1, 3, 2, 3, 2, 5, 6]

print(len(M))  # Длина списка (кол-во элементов в нем)
print(sum(M))  # Возвращает сумму элементов списка
print(max(M), min(M))  # Возвращает максимальный и минимальный элементы списка
print(set(M))  # {1, 2, 3, 5, 6} - удаляет копии элементов
print(sorted(M))  # [1, 2, 2, 3, 3, 5, 6] - сортирует элементы списка по возрастанию
print(sorted(M, reverse=True))  # [1, 2, 2, 3, 3, 5, 6] - сортирует элементы списка по убыванию
'''

from random import randint
M = [randint(0, 20) for _ in range(10)]
print(M)


print(f'Сумма элементов списка: {sum(M)}')

summa = 0
for x in M:
    summa += x
print(f'Сумма элементов списка: {summa}')

# Найдите сумму максимального и минимального элементов
print(max(M) + min(M))

# И сумму всех остальных элементов:
print(sum(M) - max(M) - min(M))

M_sort = sorted(M)
# Найдите сумму максимального и минимального элементов
print(M_sort[0] + M_sort[-1])

# И сумму всех остальных элементов:
print(sum(M_sort[1:-1]))   # Взяли все элементы от второго до последнего-1


# Срезы списков - способ взять часть списка

# A[start : stop-1 : step]

# i  0  1  2  3  4  5
A = [2, 3, 2, 5, 6, 7]
print(A[2:5])  # [2, 5, 6]
print(A[:5])  # [2, 3, 2, 5, 6] - Все элементы слева до 5 по индексу не включая
print(A[2:])  # [2, 5, 6, 7]
print(A[::2])  # [2, 2, 6] - Все элементы под четными индексами
print(A[1::2])  # [3, 5, 7] - Все элементы под нечетными индексами

