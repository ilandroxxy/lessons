# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Встроенные функции перевода из 10-й в b-ю
'''
n = 8

# Перевод в 2-ю систему
print(bin(n)[2:])
print(f'{n:b}')
# Перевод из 2-й в 10-ю
print(int('1000', 2))  # 8

# Перевод в 8-ю систему
print(oct(n)[2:])
print(f'{n:o}')
# Перевод из 8-й в 10-ю
print(int('10', 8))

# Перевод в 16-ю систему
print(hex(n)[2:])
print(f'{n:x}')
print(f'{n:X}')
# Перевод из 16-й в 10-ю
print(int('8', 16))
# ValueError: int() base must be >= 2 and <= 36, or 0
'''
from pydoc import apropos

# Универсальная функция перевода
'''
# Вариант 1
from string import digits, ascii_uppercase
alp = digits + ascii_uppercase
# 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

# Вариант 2
# alp = '0123456789ABC...'

# Вариант 3
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

print(convert(8, 2))   # 1000
print(convert(8, 8))   # 10
print(convert(8, 16))  # 8
print(convert(8, 3))   # 22
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
#
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, не меньшее 200
'''
RES = []
for n in range(1, 10000):
    # s = bin(n)[2:]
    s = f'{n:b}'
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + f'{x:b}'
    r = int(s, 2)
    if r >= 200:
        RES.append(n)
print(min(RES))
'''


# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
#
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то слева к нему приписывается «1», а справа «02»;
# б) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого
# с помощью этого алгоритма получается число R, меньшее 100.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 100:
        RES.append(n)
print(max(RES))
'''


# Замена через третью переменную:
'''
s = '123132312313213231'
s = s.replace('3', '*')
# 12*1*2*12*1*21*2*1
s = s.replace('1', '3')
# 32*3*2*32*3*23*2*3
s = s.replace('*', '1')
# 321312132131231213
'''


# № 22267 (Уровень: Средний)
# (О. Лысенков) На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится семеричная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если семеричная запись оканчивается на 2,
# то все тройки в записи меняются на единицы,
# а все единицы меняются на тройки после к числу приписывается 21 слева;
# б) если семеричная запись оканчивается не на 2,
# то к записи справа приписывается 36, а первый разряд полученной записи заменяется на 1.

# Укажите минимальное число N, для которого результатом работы
# алгоритма является наибольшее число R, меньшее 744.
'''
alp = sorted('0123456789QWERTYUIOPASDFGHJKLZXCVBNM')

def convert(n, b):
    r = ''
    while n > 0:
        r += alp[n % b]
        n //= b
    return r[::-1]

RES = []
for n in range(1, 10000):
    s = convert(n, 7)
    if s[-1] == '2':
        s = s.replace('3', '*')
        s = s.replace('1', '3')
        s = s.replace('*', '1')
        s = '21' + s
    else:
        # то к записи справа приписывается 36,
        # а первый разряд полученной записи заменяется на 1.
        s = '1' + s[1:] + '36'
    r = int(s, 7)
    if r < 744:
        if r == 664:
            print(r, n)
        RES.append(r)  # 664
print(max(RES))
'''


# № 20896 Апробация 05.03.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи числа чётная,
# то к этой записи справа дописывается 0, а затем два левых разряда заменяются на 10;
# б) если сумма цифр в двоичной записи числа нечётная,
# то к этой записи справа дописывается 1, а затем два левых разряда заменяются на 11.
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого с помощью этого
# алгоритма получается число R, большее 19.
# В ответе запишите это число в десятичной системе счисления.
'''
RES = []
for n in range(1, 10000):
    # s = bin(n)[2:]
    s = f'{n:b}'
    if s.count('1') % 2 == 0:
        s = '10' + s[2:] + '0'
    else:
        s = '11' + s[2:] + '1'
    r = int(s, 2)
    if r > 19:
        RES.append(n)
print(min(RES))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [5]
# КЕГЭ  = []
# на следующем уроке:
