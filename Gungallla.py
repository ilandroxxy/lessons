# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(4 + 5, type(4 + 5))  # 9 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы, слова, текст и тд
print(a * 4, c * 4)  # 20 5555

print('Hello ' * 4)  # Hello Hello Hello Hello
# При умножении строки на целое число, строка дублируется
print('Hello, ' + 'world!')
# Строки можно между собой конкатенировать (склеивать)

d0 = False  # bool (Boolean) - элементы Булевой алгебры (Математическая логика)
d1 = True
print(4 % 2 == 0)  # True
print('3' not in '02468')  # True

n = int(input('Введите число: '))
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]   # list (список)
# 1. Могу хранить в себе неограниченное кол-во данных, любых типов (в отличие от массива)
# 2. Каждый элемент имеет свой порядковый номер - индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Используя индексы элементов мы можем изменять их


# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0], M[-1])  # Выводим первый и последний элементы списка М
M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Почти полностью идентичен спискам, но нельзя изменять элементы кортежа

C = {1, 2, 3}  # set (множество)
# 1. В множествах не может храниться несколько копий элементов, то есть
# все элементы множества - различные

print({1, 2, 3, 3, 4})  # {1, 2, 3, 4}
'''


'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2'*2, 2 != 4, [1, 2, 3], (1, 2, 3), {1, 2, 3}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>


a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 4]
print(A, type(A))  # [1, 2, 2, 3, 3, 4] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 4) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3, 4} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3, 4] <class 'list'>

A = list(A)
print(A, set(A))  # [1, 2, 3, 4] {1, 2, 3, 4}
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
