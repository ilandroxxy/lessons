# region Домашка: ************************************************************

# Сколько раз?
'''
s = input()  # bcd+a++++**31415
print(f'Символ + встречается {s.count("+")} раз')
print(f'Символ * встречается {s.count("*")} раз')
'''

# Анализ строки #1
'''
s = input()
l = len(s)
print(l)

r = s * 3
print(r)

print(s[0])
print(s[:3])
print(s[-3:])
print(s[::-1])
print(s[1:-1])
'''

'''
# «two»
s = input()
s = s.replace('22', 'two')
print(s)
'''

# endregion Домашка: *********************************************************
#
# #
# region Урок: ************************************************************

# Тип 5 №18434
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.

# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два
# разряда по следующему правилу:
#
# а) складываются все цифры двоичной записи числа N,
# и остаток от деления суммы на 2 дописывается в конец числа (справа).
#
# б) над этой записью производятся те же действия — справа
# дописывается остаток от деления суммы её цифр на 2.
#
# Укажите минимальное число R, которое превышает число 55
# и может являться результатом работы данного алгоритма.
# В ответе это число запишите в десятичной системе счисления.
'''
R = []
for n in range(1, 1000):
    s = f'{n:b}'  # s = bin(n)[2:]  # 1. Строится двоичная запись числа N.
    for i in range(2):
        s += str(s.count('1') % 2)
    r = int(s, 2)  # '1000' -> 8
    if r > 55:
        R.append(r)
print(min(R))
'''


# Тип 5 №59738
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
#
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
#
# а) если число N делится на 3, то в этой записи дописываются справа три последние двоичные цифры;
#
# 6) если число N на 3 не делится, то остаток от деления умножается на 3,
# переводится в двоичную запись и дописывается в конец числа.
#
# Полученная таким образом запись является двоичной записью искомого числа R.
#
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число R, не превышающее 137, которое может быть получено
# с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(1, 1000):
    s = f'{n:b}'
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + f'{x:b}'
    r = int(s, 2)
    if r < 137:
        R.append(r)
print(max(R))
'''


# Тип 5 №33507
# Алгоритм получает на вход натуральное число N > 1 и строит по нему новое число R следующим образом:
# 1. Строится двоичная запись числа N.
# 2. Вместо последней (самой правой) двоичной цифры дважды
# записывается вторая слева цифра двоичной записи.
# 3. Результат переводится в десятичную систему.
#
# При каком наименьшем числе N в результате работы алгоритма получится R > 92?
# В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(2, 1000):
    s = f'{n:b}'
    s = s[:-1] + s[1] * 2
    r = int(s, 2)
    if r > 92:
        R.append(n)
print(min(R))
'''


#
# № 16316 Открытый вариант 2024 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1
# и справа дописывается 01.
# Полученная таким образом запись является двоичной записью искомого числа R.

# Укажите минимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, большее чем 516.
# В ответе запишите это число в десятичной системе счисления.
'''
R = []
for n in range(1, 1000):
    s = f'{n:b}'
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r > 516:
        R.append(n)
print(min(R))
'''


# № 9828 Основная волна 27.06.23 (Уровень: Средний)
# На вход алгоритма подаётся натуральное число N.
# Алгоритм строит по нему новое число R следующим образом.

# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то слева к троичной записи приписывается «1», а справа «02»;
# 6) если число N на 3 не делится, то остаток от деления на 3 умножается на 4,
# переводится в троичную запись и дописывается в конец троичной записи.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью этого
# алгоритма получается число R, меньшее 199.
'''
def convert(num, base):
    r = ''
    while num > 0:
        r = str(num % base) + r
        num //= base
    return r


R = []
for n in range(1, 1000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '1' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 199:
        R.append(n)
print(max(R))
'''

'''
R = []
for n in range(1, 1000):
    
    # N = f'{num:b}'
    num = n
    base = 2
    N = ''
    while num > 0:
        N = str(num % base) + N
        num //= base

    if n % 3 == 0:
        N = N.replace("0", "11")
    else:
        N = N.replace("1", "10")
    r = int(N, 2)
    if r <= 161:

        R.append(r)
print(max(R))


num = int(input())
base = 2
N = ''
while num > 0:
    N = str(num % base) + N
    num //= base
print(N)
'''

'''
R = []
for n in range(1, 1000):

    N = f'{n:b}'

    if n % 3 == 0:
        N = N.replace("0", "11")
    else:
        N = N.replace("1", "10")
    r = int(N, 2)
    if r <= 161:
        R.append(r)
print(max(R))
'''
# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# ФИПИ = [2, 6]
# КЕГЭ = []
# на следующем уроке:
