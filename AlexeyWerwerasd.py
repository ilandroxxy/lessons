# region Домашка: ************************************************************


# endregion Домашка: *********************************************************
# #
# #
# region Урок: ************************************************************

# Математические множества
# P = {2, 3, 5, 7, 11, 13, 17, ...} - множество простых чисел P ∈ N
# N = {1, 2, 3, ..., 1000, ..., +inf} - множество натуральных чисел
# Z = {-inf, ..., -1000, ..., -1, 0, 1, ..., 1000, ..., +inf} - множество целых чисел P ∈ N ∈ Z
# Q = {-inf, ..., -3.5, -2/4, ..., -1, 0, 1, ..., 3/4, ..., +inf} - множество рациональных чисел P ∈ N ∈ Z ∈ Q
# I = {-inf, ..., -3.5378465(784), ..., -1, 0, 1, ..., pi, ..., +inf} - множество иррациональных чисел P ∈ N ∈ Z ∈ Q ∈ I
# R = P ∈ N ∈ Z ∈ Q ∈ I - множество вещественных/действительных чисел
# C - множество комплексных чисел


X = 5  # Переменная - это удобная способ взаимодействия с данными

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(a))  # <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественное значение (дробь)
print(7 / 2)  # 3.5
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, буквы и тд
print(a * 4, c * 4)  # 20 5555 - дублировали '5' четыре раза
print('hello ' * 4)  # hello hello hello hello
print('Hello, ' + 'world!')  # Hello, world! - конкатенация строк (склеивание)

d1 = True  # bool (Boolean) Булевой алгебры (Математическая логика)
d0 = False
print(4 < 10)  # True
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Может хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент списка имеет свой порядковый номер (индекс) начинающийся с 0
# 3. Через индексы можно брать элементы и изменять их значения

B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичны спискам, но изменять элементы нельзя

C = {1, 2, 3}  # set (множество)
# 1. Не может содержать дубликаты (копии) элементов
print({1, 2, 3, 1, 2})  # {1, 2, 3}

D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению словаря осуществляется через его (индивидуальный) ключ

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}

for key, value in D.items():
    print(key, value)
    # один 1
    # два two
'''

'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2' * 2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'two'}]
for x in M:
    print(x, type(x))
    # 2 <class 'int'>
    # 2.0 <class 'float'>
    # 2 <class 'str'>
    # True <class 'bool'>
    # 4 <class 'int'>
    # 3.5 <class 'float'>
    # 22 <class 'str'>
    # True <class 'bool'>
    # [1, 2, 3] <class 'list'>
    # (1, 2, 3) <class 'tuple'>
    # {1, 2, 3} <class 'set'>
    # {'один': 'one', 'два': 'two'} <class 'dict'>
'''

# Конвертация типов данных:
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))   # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
x = int(input('Введите число: '))
print(s*2, x*2)
'''

# Как работать с f-строками
'''
weather = input('Введите погоду: ')
temperature = int(input('Введите температуру: '))
# Сегодня облачно, но температура 24 градуса!

print('Сегодня ', weather, ', но температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', но температура ' + str(temperature) + ' градуса!')
print('Сегодня {}, но температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, но температура {temperature} градуса!')
# TypeError: can only concatenate str (not "int") to str
'''


# Базовая арифметика
'''
a, b = 7, 2
print(a, b)
print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждой функции print() есть переход на новую строку '/n'

print(f'{a} + {b} = {a+b}')
print(f'{a} - {b} = {a-b}')
print(f'{a} * {b} = {a*b}')

print()

# Деление в программировании:
print(f'{a} / {b} = {a/b}')  # 3.5 - Вещественное деление (обычно деленипе дробью)
print(f'{a} // {b} = {a//b}')  # 3 - Только целая часть от деления
print(f'{a} % {b} = {a%b}')  # 1 - Взятие остатка от деления

print()

x = 152
print(x % 2 == 0)  # Четное, Делится на 2, Кратно 2
print(x % 2 != 0)  # Нечетное, Не делится на 2, Не кратно 2
print(x % 10 == 2)  # Если число оканчивается на 2
print(x % 100 == 52)  # Если число оканчивается на 52

print(f'Возведем число 7 в степень 2: {7 ** 2}')
print(f'Возьмем квадратный корень от числа 16: {16 ** 0.5}')
# Возьмем квадратный корень от числа 16: 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')
# Возьмем кубический корень от числа 27: 3.0
'''

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************

# endregion Разобрать: *************************************************************
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
