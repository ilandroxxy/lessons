# region Домашка: ************************************************************


# endregion Домашка: *********************************************************
# #
# #
# region Урок: ************************************************************


# № 13968 (Уровень: Базовый)
# A. Прибавить 2
# B. Прибавить 3
# C. Умножить на 2
# Сколько существует программ, для которых при исходном числе 7 результатом является число 32,
# и при этом траектория вычислений содержит число 14 и не содержит 21?

'''
def F(a, b):
    if a > b or a == 21:
        return 0
    elif a == b:
        return 1
    else:
        return F(a+2, b) + F(a+3, b) + F(a*2, b)


print(F(7, 14) * F(14, 32))
'''

'''
def F(a, b):
    if a >= b or a == 21:
        return a == b  # True/False
    h = [F(a+2, b), F(a+3, b), F(a*2, b)]
    return sum(h)


print(F(7, 14) * F(14, 32))
'''

# № 20811 Апробация 05.03.25 (Уровень: Базовый)
# 1 куча: +1, +4, *2 | >= 51 | 1 ≤ S ≤ 50
'''
# s - это кол-во камней в куче 
# n - это актуальный шаг игры

# n = 1: Петя первый ход
# n = 2: Ваня первый ход
# n = 3: Петя Второй ход
# n = 4: Ваня Второй ход
'''

'''
def F(s, n):
    if s >= 51:
        return n % 2 == 0  # True - Ваня, False - Петя
    if n == 0:
        return 0  # False - не нашлось благоприятных исходов
    h = [F(s+1, n-1), F(s+4, n-1), F(s*2, n-1)]
    return any(h) if (n - 1) % 2 == 0 else all(h)

print([s for s in range(1, 51) if F(s, 2)])
print([s for s in range(1, 51) if F(s, 3) and not F(s, 1)])
print([s for s in range(1, 51) if F(s, 4) and not F(s, 2)])
'''


# № 17638 Основная волна 19.06.24 (Уровень: Базовый)
'''
def F(s, n):
    if s >= 39:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(s+1, n-1), F(s+3, n-1), F(s*2, n-1)]
    return any(h) if (n - 1) % 2 == 0 else all(h)

print([s for s in range(1, 39) if F(s, 2)])
print([s for s in range(1, 39) if F(s, 3) and not F(s, 1)])
print([s for s in range(1, 39) if F(s, 4) and not F(s, 2)])
'''


# № 18144 (Уровень: Базовый)
# 1 куча: -4, -6, /2 вверх | <= 19 | S ≥ 20
'''
from math import ceil, floor
# ceil - округляет вверх
# floor - округляет вниз

def F(s, n):
    if s <= 19:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(s-4, n-1), F(s-6, n-1), F(ceil(s/2), n-1)]
    return any(h) if (n - 1) % 2 == 0 else all(h)

print([s for s in range(20, 1000) if F(s, 2)])
print([s for s in range(20, 1000) if F(s, 3) and not F(s, 1)])
print([s for s in range(20, 1000) if F(s, 4) and not F(s, 2)])
'''

# № 18144 (Уровень: Базовый)
# 2 кучи: a+1, s+1, a*2, s*2 | a + s <= 81 | 1 ≤ S ≤ 73 | в превой куче 7
'''
def F(a, s, n):
    if a+s >= 81:
        return n % 2 == 0
    if n == 0:
        return 0
    h = [F(a+1, s, n-1), F(a, s+1, n-1), F(a*2, s, n-1), F(a, s*2, n-1)]
    return any(h) if (n - 1) % 2 == 0 else all(h)  # При любом ходе Пети
    # return any(h) if (n - 1) % 2 == 0 else any(h)  # После неудачного первого хода Пети

print([s for s in range(1, 74) if F(7, s, 2)])  # [19, 
print([s for s in range(1, 74) if F(7, s, 3) and not F(7, s, 1)])  # [33, 36]
print([s for s in range(1, 74) if F(7, s, 4) and not F(7, s, 2)])  # [32, 
'''

# endregion Урок: ************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# ФИПИ = [1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19-21, 22, 23, 25]
# КЕГЭ = [5, 8]
# на следующем уроке:

# Второй пробник 10.02.25:
# 7/29 -> 42 вторичных баллов +[1, 4, 6, 12, 14, 15, 16] -[3, 5, 8, 23, 25]
