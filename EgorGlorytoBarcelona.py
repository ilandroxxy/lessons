# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Переменная - это удобный способ взаимодействия с памятью компьютера
X: int = 5
print(X, type(X))  # 5 <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(2 + 2, type(2 + 2))  # 4 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>
print(2 + 2.0, type(2 + 2.0))  # 4.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе буквы, цифры, символы, слова, текст и тд тп
print(a * 4, c * 4)  # 20 5555 - При умножении строки на целое число строка дублируется
print('hello ' * 4)  # hello hello hello hello

new_message = 'hello, ' + 'world!'  # Конкатенация строк (склеивание)
print(new_message)  # hello, world!

d0 = False
d1 = True  # bool (Boolean) - Основы Булевой алгебры (ака Математическая логика)
print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # 'a' - Первый элемент списка М
print(M[-1])  # 'e' - Последний элемент списка М

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

A = [1, 2, 3]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов различных типов данных
# 2. Каждый элемент имеет свой порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы мы можем обращаться к элементам массива или изменять их значение


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, но: нельзя изменять элементы кортежа


C = {1, 2, 3, 2, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. Не могут хранить в себе копии элементов


# s = input('Введите строку: ')
# if len(set(s)) == len(s):
#     print('Нет копий')
# else:
#     print('Копии есть')


D = {'one': 'один', 'two': 'два'}  # dict (словарь)
# 1. Элементы словаря состоят из двух частей: ключ и значение
# 2. Доступ к значению элемента осуществляется через его ключ
# 3. Ключи не могут дублироваться, то есть будет происходить перезапись значения

print(D['one'])  # один
D['one'] = 1
print(D)  # {'one': 1, 'two': 'два'}
'''

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2' * 2, 2 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'one': 'один', 'two': 'два'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'one': 'один', 'two': 'два'}
'''

# Конвертация типов данных:
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''

# Ввод данных с клавиатуры:
'''
s = input()  # Ввод с клавиатуры строки
print(s, type(s))  # 65 <class 'str'>


n = int(input())  # Ввод с клавиатуры числа
print(n, type(n))  # 65 <class 'int'>
'''


# Работа с f-строками:
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
# TypeError: can only concatenate str (not "int") to str
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''


# Базовая арифметика
'''
a, b = 7, 2
print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

print(f'{a} / {b} = {a / b} \n'  # 3.5 - обыкновенное вещественное деление (результат всегда float) 
      f'{a} // {b} = {a // b} \n'  # 3 - взятие только целой части от деления
      f'{a} % {b} = {a % b}')  # 1 - взятие только остатка от деления

print()

n = 123
print(n // 10)  # 12
print(n % 10)  # 3
print(-n % 10)  # 7
print(abs(-n) % 10)  # 3  - abs() - взятие модуля от числа

print()

import math
print(f'Возведем число 7 в степень 2: {7 ** 2}')  # 49
print(f'Взять квадратный корень от числа 16: {math.sqrt(16)}')  # 4.0
print(f'Взять квадратный корень от числа 16: {16**(1/2)}')  # 4.0
print(f'Взять кубический корень от числа 27: {27**(1/3)}')  # 3.0
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
