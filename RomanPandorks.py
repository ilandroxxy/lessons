# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Срезы строк и списков (последовательностей)
'''
s = 'abcde'

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# СРЕЗ [ START : STOP-1 : STEP]

print(L[2:4])  # ['c', 'd']
print(L[:4])  # ['a', 'b', 'c', 'd'] - Все, что слева от 4 индекса (не включая)
print(L[2:])  # ['c', 'd', 'e'] - Все элементы справа от 2 индекса

print(L[2:])  # Все элементы кроме первых двух
print(L[-3:])  # Последние три элемента

print(L[:])  # - Выводим все содержимое
print(L[::])  # ['a', 'b', 'c', 'd', 'e']

print(L[0::2])  # ['a', 'c', 'e'] - Все элементы под четными индексами
print(L[1::2])  # ['b', 'd'] - Все элементы под нечетными индексами

print(L[::-1])  # ['e', 'd', 'c', 'b', 'a'] - Все элементы в обратном порядке
'''


'''
name = input('Введите ваше имя: ')
print(f'Его зовут: {name}')
'''


# Встроенные функции перевода:
'''
n = 1000000
print(bin(n)[2:])  # 11110100001001000000
print(f'{n:b}')  # 11110100001001000000
print(int('11110100001001000000', 2))  # 1000000

print(oct(n)[2:])  # 3641100
print(f'{n:o}')  # 3641100
print(int('3641100', 8))  # 1000000

print(hex(n)[2:])  # f4240
print(f'{n:x}')  # f4240
print(int('f4240', 16))  # 1000000
# ValueError: int() base must be >= 2 and <= 36, or 0
'''


# Своя функция перевода
'''
def G(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r
'''
# Универсальная функция перевода
'''
# alp = '0123456789ABC...'
alp = sorted('1234567890QWERTYUIOPASDFGHJKLZXCVBNM')
def G(n, b):
    r = ''
    while n > 0:
        r = alp[n % b] + r
        n //= b
    return r
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются
# её три последние двоичные цифры;
# б) если число N на 3 не делится, то остаток от деления
# умножается на 3, переводится в двоичную запись и дописывается в конец числа.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого
# с помощью этого алгоритма получается число R, не меньшее 200
'''
M = []
for n in range(1, 10000):
    s = bin(n)[2:]  # s = f'{n:b'}
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)

    if r >= 200:
        M.append(n)
print(min(M))
'''


# № 23551 Пересдача 03.07.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1
# и справа дописывается 01
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите максимальное число N, после обработки которого с помощью
# этого алгоритма получается число R, меньшее, чем 30.
# В ответе запишите это число в десятичной системе счисления.
'''
M = []
for n in range(1, 1000):
    s = f'{n:b}'
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r < 30:
        M.append(n)
print(max(M))
'''


# № 23264 Основная волна 11.06.25 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# a) если число N делится на 3, то к этой записи дописываются две последние троичные цифры;
# б) если число N на 3 не делится, то остаток от деления умножается на 5,
# переводится в троичную запись и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число R, большее 150, которое может быть
# получено с помощью описанного алгоритма.

def G(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

M = []
for n in range(1, 10000):
    s = G(n, 3)
    if n % 3 == 0:
        s = s + s[-2:]
    else:
        x = (n % 3) * 5
        s = s + G(x, 3)
    r = int(s, 3)
    if r > 150:
        M.append(r)
print(min(M))






# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6]
# КЕГЭ = []
# на следующем уроке:


