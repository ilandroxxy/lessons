# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения

b = 5.0  # float - число с плавающей точкой
print(type(0.5))  # <class 'float'>
print(4/2, type(4/2))  # 2.0 <class 'float'>

c = 0,5  # c = (0, 5)
print(type(c))  # <class 'tuple'>

d = '5'  # str (string) - строковый тип данных для хранения текста
print(a, d)  # 5 5
print(a * 4, d * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello

# Конкатенация строк (склеивание)
d1 = 'Hello'
d2 = ', '
d3 = 'world!'
print(d1 + d2 + d3)  # Hello, world!


f0 = False  # bool (Boolean) - это основы Булевой алгебры (Математическая логика)
f1 = True
print(4 == 4)  # True
print(4 > 10)  # False
'''

# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во переменных, причем различных типов данных
# 2. Каждый элемент списка имеет свой порядковый номер: индекс
# 3. Индексы же могут считаться слева-направо начиная с 0, или справа-налево начиная с -1
# 4. В списках можно изменять элементы через их индексы, в отличие от строк и кортежей

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # первый элемент списка M
print(M[-1])  # последний элемент списка M

B = (1, 2, 3)  # tuple (кортеж)
# 1. Все тоже самое, что и списки, только нельзя изменять элементы

C = {1, 2, 2, 3, 3, 3}  # set (множество)
# 2. Удаляет копии элементов
print(C)  # {1, 2, 3}

С = set()  # способ создания пустого множества
print(type(С))  # <class 'set'>

C.add(1)  # добавить новый элемент в множество
C.add(2)
C.add(2)
C.add(3)
print(C)  # {1, 2, 3}

# Проверить строчку или список на "различные элементы"

s = '213213214231'
if len(s) == len(set(s)):
    print('Все элементы различные')
else:
    print('Есть повторения')



D = {'один':'one', 'два':'two'}  # dict (словарь)
# 1. Каждый элемент словаря сопровождается индивидуальным ключом
# 2. То есть доступ к значению элемента осуществляется через ключ

print(D['один'])  # one
D['один'] = '1'
print(D)  # {'один': '1', 'два': 'two'}

for key, value in D.items():
    print(key, value)
    # один 1
    # два two
'''


# Конвертация типов данных:
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5.0 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите текст: ')
print(s)

n = int(input('Введите целое число: '))
print(n)
'''


# Работа с f-строками
'''
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Сегодня', weather, ', а температура: ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура: ' + str(temperature) + ' градуса!')
print('Сегодня {}, а температура: {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура: {temperature} градуса!')
'''

# Переводы в различные системы счисления
'''
n = 8
print(bin(n))  # 0b1000
print(bin(n)[2:])  # 1000
print(f'{n:b}')  # 1000
'''


# Базовая арифметика
"""
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # в каждой функции print() есть один переход на новую строку /n

# Деления в python
print(f'{a} / {b} = {a / b} \n'  # 3.5 - вещественное деление, то есть результат всегда float (дробь)
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление, то есть взятие только целой части 
      f'{a} % {b} = {a % b}')  # 1 - взятие остатка от деления
'''
n = int(input('n: '))
if n % 2 == 0:
    print('Четное / Делится на два / Кратно двум')
elif n % 3 == 0:
    print('Кратное трем / Делится на три')
elif n % 10 == 7:
    print('Число n оканчивается на 7')
elif n % 100 == 12:
    print('Число n оканчивается на 12')
'''

from math import ceil, floor, sqrt

print(4/3)  # 1.33333333333

# floor - это округление вниз
print(floor(4/3))  # 1

# ceil - это округление вверх
print(ceil(4/3))  # 2

print(f'Возведем число {a} в степень числа {b}: {a} ** {b} = {a**b}')  # 49
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: 16 ** 0.5 = {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: 27 ** (1/3)) = {27 ** (1/3)}')  # 3.0
"""


# Условные операторы: if, elif, else

x = int(input('x: '))
y = int(input('y: '))

if x > 0 and y > 0:
      print('Первая четверть')
elif x < 0 and y > 0:
      print('Вторая четверть')
elif x < 0 and y < 0:
      print('Третья четверть')
elif x > 0 and y < 0:
      print('Четвертая четверть')
else:
      print('Попали на ось')

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Библиотеки перечислить, Условные операторы, Циклы


