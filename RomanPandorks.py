# region Домашка: ******************************************************************

'''
m = int(input())  # 24
total = 1
for j in range(1, m+1):
    if m % j == 0:
        total *= j
print(total)
'''


'''
n = int(input())
print(n)

n = str(n)
print(n)

n = list(n)
print(n)

print(max(n))
print(min(n))
'''

'''
n = int(input())  # 3267
mini = 10**10
maxi = 0
while n > 0:
    x = n % 10
    mini = min(mini, x)
    maxi = max(maxi, x)
    n //= 10
print(maxi, mini)
'''

'''
n = int(input())
summa = 0
count = 0
total = 1
while n > 0:
    x = n % 10

    summa += x
    count += 1
    total *= x

    n //= 10

print(summa)
print(count)
print(total)
'''

'''
n = int(input())
cnt_1 = 0
cnt_2 = 0
for i in range(n):
    x = int(input())
    if x % 2 == 0:
        cnt_2 += 1
    else:
        cnt_1 += 1
print(cnt_2)
print(cnt_1)
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']  # list (список)
# -i -5   -4   -3   -2   -1
'''
# 1. Могут хранить неограниченное кол-во элементов
# 2. Элементы могут быть различных типов данных
# 3. Каждый элемент имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
print(f'Первый элемент списка L: {L[0]}')
print(f'Последний элемент списка L: {L[-1]}')

# 5. Через индексы можно изменять элементы списка
L[0], L[-1] = 'e', 'a'
print(L)  # ['e', 'b', 'c', 'd', 'a']
'''

# Взаимодействие списков с циклом for
'''
for x in L:  # пробегаем элементы списка напрямую через переменную x
    print(x, end=' ')  # e b c d a
print()

print(len(L))  # 5 - Функция len() возвращает длину списка (кол-во элементов в нем)

for i in range(len(L)):
    print(L[i], end=' ')  # e b c d a
print()


# Пробегая элементы списка через индексы мы можем изменять их
for i in range(len(L)):
    L[i] = L[i] * i
print(L)  # ['', 'b', 'cc', 'ddd', 'aaaa']
'''


# Срезы списков (и строк)

# СРЕЗ[START : STOP-1 : STEP]
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
s = 'abcde'  # для строк срезы работают аналогично 

print(L[1:3])  # ['b', 'c'] - не включая элемент под 3 индексом (правый)
print(L[:3])  # ['a', 'b', 'c'] -['d', 'e'] все, что лежит слева от 3 индекса
print(L[1:])  # ['b', 'c', 'd', 'e'] - все, что справа от индекса 1
print(L[:])  # ['a', 'b', 'c', 'd', 'e']
print(L[::])  # ['a', 'b', 'c', 'd', 'e']
print(L[::2])  # ['a', 'c', 'e'] - все элементы с четными индексами
print(L[1::2])  # ['b', 'd'] - все элементы с нечетными индексами
print(L[2:])  # ['c', 'd', 'e'] - все элементы кроме первых двух
print(L[-2:])  # ['d', 'e'] - последние два элемента 
print(L[::-1])  # ['e', 'd', 'c', 'b', 'a'] - все элементы в обратном порядке
'''


# Функции списков list
'''
L = [3, 3, 3, 1, 2, 2]

print(len(L))  # - Возвращает длину списка (кол-во элементов в нем)

print(sum(L))  # - Возвращает сумму элементов списка (но только если в списке числа)

print(min(L), max(L))  # - Возвращают минимальный и максимальный элементы списка

print(min(['4', '7', 'a']))  # '4'
print(max(['4', '7', 'a']))  # 'a'

print(sorted(L))  # [1, 2, 2, 3, 3, 3] - отсортировать по возрастанию
print(sorted(L, reverse=True))  # [3, 3, 3, 2, 2, 1] - отсортировать по убыванию

print(list(reversed(L)))  # [2, 2, 1, 3, 3, 3] - просто перевернуть элементы списка

print(set(L))  # {1, 2, 3} - конвертирует список в множество, но при этом удаляет копии элементов 
'''


# Все методы списков в Python, которые понадобятся на ЕГЭ

# .APPEND()
# Метод .append() используется для добавления элемента в конец списка. Пример:
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)
print(my_list)  # Вывод: [1, 2, 3, 4, 5]
'''
# Можно реализовать через конкатенацию (склеивание) списков:
'''
my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]
'''


# .REVERSE()
# Метод .reverse() изменяет порядок элементов в списке на обратный. Пример:
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]
'''
# Можно записать по другому через срез:
'''
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# .COUNT()
# Метод .count() возвращает количество вхождений заданного элемента в список. Пример:
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3
'''


# .REMOVE()
# Метод .remove() удаляет первое вхождение указанного элемента из списка. Пример:
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # Первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]
'''
# Можно удалить элемент через его индекс используя del:
'''
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # Индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# .INDEX()
# Метод .index() возвращает индекс первого вхождения заданного элемента в списке. Пример:
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # Вывод: 1
'''


# .SORT()
# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или в обратном порядке, если передан аргумент reverse=True. Пример:

my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
'''
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Генераторы списков


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке: Генераторы списков, строки


