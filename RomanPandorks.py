# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# № 20951 (Уровень: Базовый)
# (М. Попков) На вход алгоритма подаётся натуральное число N.
# 1. Строится троичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи в конец дописываются три первые троичные цифры;
# б) если число N на 3 не делится, то сумма цифр полученной троичной записи умножается на 5,
# переводится в троичную систему счисления и дописывается в конец числа.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное нечётное число R, большее 2500, которое может
# быть получено с помощью описанного алгоритма. В ответе запишите это число в десятичной системе счисления.
'''
def convert(n, b):
    r = ''
    while n > 0:
        r += str(n % b)
        n //= b
    return r[::-1]


R = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = s + s[:3]
    else:
        summa = s.count('1') + s.count('2') * 2
        s = s + convert(summa * 5, 3)
    r = int(s, 3)
    if r % 2 != 0 and r > 2500:
        R.append(r)

print(min(R))
'''

# № 19237 ЕГКР 21.12.24 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1.    Строится троичная запись числа N.
# 2.    Далее эта запись обрабатывается по следующему правилу:
# а) если число N делится на 3, то к этой записи дописываются две последние троичные цифры;
# б) если число N на 3 не делится, то вычисляется сумма цифр полученной троичной записи,
# эта сумма переводится в троичную систему счисления и дописывается в конец числа.
# Полученная таким образом запись является троичной записью искомого числа R.
# 3.    Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное чётное число R, большее 220,
# которое может быть получено с помощью описанного алгоритма.

'''
def convert(n, b):
    r = ''
    while n > 0:
        r += str(n % b)
        n //= b
    return r[::-1]

M = []
for n in range(1, 10000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = s + s[-2:]
    else:
        summa = sum(map(int, s))  # Сумма цифр строки s 
        s = s + convert(summa, 3)
    r = int(s, 3)
    if r % 2 == 0 and r > 220:
        M.append(r)
print(min(M))
'''

# № 17668 Пересдача 04.07.24 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр в двоичной записи чётная, то к этой записи справа дописывается 0,
# а затем два левых разряда заменяются на 10;
# б) если сумма цифр в двоичной записи нечётная, то к этой записи справа дописывается 1,
# а затем два левых разряда заменяются на 11.

# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число R, которое может быть результатом работы данного алгоритма, при условии, что N больше 27.

'''
N = []
for n in range(1, 10000):
    # s = f'{n:b}'
    s = bin(n)[2:]
    summa = sum(map(int, s))
    if summa % 2 == 0:
        s = s + "0"
        s = "10" + s[2:]
    else:

        s = s + "1"
        s = "11" + s[2:]
    r = int(s, 2)
    if n > 27:
        N.append(r)
print(min(N))
'''

# № 17624 Основная волна 19.06.24 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи числа N, и остаток от деления суммы на 2 дописывается в конец числа (справа). Например, запись 11100 преобразуется в запись 111001;
# б) над этой записью производятся те же действия — справа дописывается остаток от деления суммы её цифр на 2.
# Полученная таким образом запись (в ней на два разряда больше, чем в записи исходного числа N) является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.
# Укажите минимальное число R, которое превышает число 75 и может являться результатом работы данного алгоритма.

'''
R = []
for n in range(1, 10000):
    s = f"{n:b}"
    for i in range(2):
        summa = sum(map(int, s))
        s = s + str(summa % 2)

    r = int(s, 2)
    if r > 75:
        R.append(r)
print(min(R))
'''

# № 17518 Основная волна 07.06.24 (Уровень: Базовый)
# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если сумма цифр двоичной записи числа чётная, то к этой записи справа дописывается 0,
# а затем два левых разряда заменяются на 10;
# б) если сумма цифр двоичной записи числа нечётная, то к этой записи справа дописывается 1,
# а затем два левых разряда заменяются на 11;
# Полученная таким образом запись является двоичной записью искомого числа R.
# 3. Результат переводится в десятичную систему и выводится на экран.

# Укажите минимальное число N, после обработки которого с помощью этого алгоритма получается число R, большее 50.
'''       
Res = []
for n in range(1, 10000):
    s = f"{n:b}"
    summa = sum(map(int, s))
    if summa % 2 == 0:
        s = s + "0"
        s = "10" + s[2:]
    else:
        s = s + "1"
        s = "11" + s[2:]
    r = int(s, 2)
    if r > 50:
        Res.append(n)
print(min(Res))
'''

# n - N по условию
# r - R по условию
# s - двоична запись


# № 16316 Открытый вариант 2024 (Уровень: Базовый)

# На вход алгоритма подаётся натуральное число N.
# 1. Строится двоичная запись числа N.
# 2. Далее эта запись обрабатывается по следующему правилу:
# а) если число чётное, то к двоичной записи числа слева дописывается 10;
# б) если число нечётное, то к двоичной записи числа слева дописывается 1 и справа дописывается 01.
# Полученная таким образом запись является двоичной записью искомого числа R.

# Укажите минимальное число N, после обработки которого с помощью э
# того алгоритма получается число R, большее чем 516.

'''    
Res = []
for n in range(1, 10000):
    s = f"{n:b}"
    if n % 2 == 0:
        s = "10" + s
    else:
        s = "1" + s 
        s = s + "01"
    r = int(s, 2)
    if r > 516:
        Res.append(n)
print(min(Res))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6]
# КЕГЭ = []
# на следующем уроке:
