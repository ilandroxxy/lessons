# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Пару слов про 13 номер
'''
# бит   8   8  8  8  (32 бита)
# байт  1   1  1  1  (4 байта)
# ip = 111.22.255.44
# 0 <= x <= 255, потому что 255_10 -> 11111111_2


# Адрес сети = Узел сети & Маска сети
# & - побитовая конъюнкция
print(14 & 5)  # 4

print(f'{14:b}')  # 1110
print(f'{5:b}')   # 0101
#    14 & 5 =     # 0100  -> 4_10

# from ipaddress import *
# Адрес сети = ip_network('Узел/Маска')


# Варианты задач
# 1. Есть узел и Маска - ищем Адрес сети и ip адреса
# 2. Есть узел и Адрес сети - ищем что-то про маску
# 3. Есть два узла - ищем через маску и адрес сети что-то


# Маска сети имеет длину 32 бита и определенный вид:
# [Единиц: 0, Нулей: 32] 000000....000
# [Единиц: 1, Нулей: 31] 100000....000
# [Единиц: 2, Нулей: 30] 110000....000
# [Единиц: 3, Нулей: 29] 111000....000
# [Единиц: 4, Нулей: 28] 111100....000
# [Единиц: 5, Нулей: 27] 111110....000
# ....
# [Единиц: 31, Нулей: 1] 111111....110
# [Единиц: 32, Нулей: 0] 111111....111

# for mask in range(0, 32+1):
#     print(mask)


# 255.255.255.248 - маска сети в десятичной записи
# 11111111.11111111.11111111.11111000 - маска сети в двоичной записи
# 122.159.136.144/29 - 29 это кол-во единиц в двоично записи маски
'''


# № 15326 Досрочная волна 2024 (Уровень: Базовый)
# Сеть задана IP-адресом 105.224.200.224 и сетевой маской 255.255.255.224.
# Сколько в этой сети IP-адресов, для которых количество единиц в двоичной записи IP-адреса кратно 4?
'''
from ipaddress import *
net = ip_network('105.224.200.224/255.255.255.224', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('1') % 4 == 0:
        cnt += 1
print(cnt)

print(net.num_addresses)  # - всего адресов
'''



# № 14948 (Уровень: Базовый)
# Сеть задана IP-адресом 192.168.32.128 и маской сети 255.255.255.192.
# Сколько в этой сети IP-адресов,
# для которых сумма единиц в двоичной записи IP-адреса чётна?
'''
from ipaddress import *
net = ip_network('192.168.32.128/255.255.255.192', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s.count('1') % 2 == 0:
        cnt += 1
print(cnt)
'''


# № 14358 (Уровень: Базовый)
# Сеть задана IP-адресом 192.168.32.64 и сетевой маской 255.255.255.192.
# Сколько в этой сети IP-адресов, двоичная запись которых оканчивается на 101?
'''
from ipaddress import *
net = ip_network('192.168.32.64/255.255.255.192', 0)
cnt = 0
for ip in net:
    s = f'{ip:b}'
    if s[-3:] == "101":
        cnt += 1
print(cnt)
'''


# № 23751 Демоверсия 2026 (Уровень: Базовый)
# Адрес сети и широковещательный адрес не могут быть использованы для адресации сетевых устройств.

# Сеть задана IP-адресом одного из входящих в неё узлов 191.128.66.83 и сетевой маской 255.192.0.0.
# Найдите в данной сети наибольший IP-адрес, который может быть назначен компьютеру.
# В ответе укажите найденный IP-адрес без разделителей.
'''
from ipaddress import *
net = ip_network('191.128.66.83/255.192.0.0', 0)
for ip in net.hosts():
    print(ip)
# 191.191.255.254 -> 191191255254

'''



# № 23856 (Уровень: Базовый)
# Сеть задана IP-адресом одного из входящих в неё узлов 172.95.116.174 и сетевой маской 255.255.192.0.
# Найдите наименьший в данной сети IP-адрес, в котором количество единиц в двоичной записи кратно 5.
# В ответе укажите сумму числовых значений октетов найденного IP-адреса.
'''
from ipaddress import *
net = ip_network('172.95.116.174/255.255.192.0', 0)
cnt = 0
for ip in net.hosts():
    s = f'{ip:b}'
    if s.count('1') % 5 == 0:
        print(ip)
        break

# 172.95.64.15 -> 346
print(172 + 95 + 64 + 15)
'''

# № 23855 (Уровень: Базовый)
# Сеть задана IP-адресом одного из входящих в неё узлов 172.95.116.174 и сетевой маской 255.255.192.0.
# Найдите наименьший в данной сети IP-адрес, который может быть назначен компьютеру.
# В ответе укажите сумму числовых значений октетов найденного IP-адреса.
'''
from ipaddress import *

net = ip_network('172.95.116.174/255.255.192.0', 0)
for ip in net.hosts():
    s = f'{ip:b}'
    print(ip)  # 172.95.64.1
    print(str(ip))  # '172.95.64.1'
    print(str(ip).split('.'))  # ['172', '95', '64', '1']
    print([x for x in str(ip).split('.')])  # ['172', '95', '64', '1']
    print([int(x) for x in str(ip).split('.')])  # [172, 95, 64, 1]
    print(sum([int(x) for x in str(ip).split('.')]))  # 332
    break
'''


# № 10150 (Уровень: Базовый)
# Для узла с IP-адресом 145.192.94.230 адрес сети равен 145.192.80.0.
# Чему равен третий слева байт маски?
'''
from ipaddress import *
for mask in range(0, 32+1):
    net = ip_network(f'145.192.94.230/{mask}', 0)
    if '145.192.80.0' in str(net):
        print(net, mask, net.netmask)
        # 145.192.80.0/20 20 255.255.240.0
'''


# № 10152 (Уровень: Базовый)
# Для узла с IP-адресом 215.181.200.27 адрес сети равен 215.181.192.0.
# Чему равно наибольшее возможное значение третьего слева байта маски?
'''
from ipaddress import *
for mask in range(0, 32+1):
    net = ip_network(f'215.181.200.27/{mask}', 0)
    if '215.181.192.0' in str(net):
        print(net, mask, net.netmask)
'''


# № 18955 (Уровень: Средний)
# Два узла, находящиеся в одной сети, имеют IP-адреса 200.154.190.12 и 200.154.184.0.
# Укажите наибольшее возможное количество единиц в маске этой сети.
'''
from ipaddress import *
for mask in range(32+1):
    net1 = ip_network(f'200.154.190.12/{mask}', 0)
    net2 = ip_network(f'200.154.184.0/{mask}', 0)
    if net1 == net2:
        print(mask, 32 - mask)
'''

# № 10161 (Уровень: Средний)
# Два узла, находящиеся в одной сети, имеют IP-адреса 211.115.61.154 и 211.115.59.137.
# Укажите наибольшее возможное значение третьего слева байта маски сети.
'''
from ipaddress import *

for mask in range(0, 32 + 1):
    net1 = ip_network(f'211.115.61.154/{mask}', 0)
    net2 = ip_network(f'211.115.59.137/{mask}', 0)
    if net1 == net2:
        print(net1.netmask)
'''


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 13, 14]
# КЕГЭ = []
# на следующем уроке:
