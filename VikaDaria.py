# region Домашка: ******************************************************************



# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# № 12255 ЕГКР 16.12.23 (Уровень: Базовый)
# Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:
# — символ «?» означает ровно одну произвольную цифру;
# — символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**12,
# найдите все числа, соответствующие маске 12?3*456??9,
# делящиеся на 98591 без остатка.
# В ответе запишите в первом столбце таблицы все найденные числа
# в порядке возрастания, а во втором столбце — соответствующие
# результаты деления этих чисел на 98591.
'''
# Вариант 1
from fnmatch import *
for x in range(98591, 10**12, 98591):
    if fnmatch(str(x), '12?3*456??9'):
        print(x, x // 98591)

# Вариант 2 (регулярные выражения)
from re import *
for x in range(98591, 10**12, 98591):
    if fullmatch('12[0-9]3[0-9]*456[0-9][0-9]9', str(x)):
        print(x, x // 98591)
'''


# № 12477 PRO100 ЕГЭ 29.12.23 (Уровень: Средний)
# символ «?» означает ровно одну произвольную цифру;
# символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**7,
# найдите все простые числа, соответствующие маске 3?1111*.
'''
def prime(x):
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

from fnmatch import *
for x in range(10**7):
    if fnmatch(str(x), '3?1111*'):
        if prime(x):
            print(x)
'''


# Универсальная функция поиска делителей числа
'''
import time
start = time.time()

def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d.append(j)
            d.append(x // j)
    return sorted(set(d))

print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]


end = time.time()
print(end - start)
'''

# Проверка на простое число
'''
def prime(x):
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

# Числа простые
print([x for x in range(1, 100) if prime(x)])

# Числа составные
print([x for x in range(1, 100) if not prime(x)])
'''

'''
def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))

# Числа простые
print([x for x in range(1, 100) if len(divisors(x)) == 2])

# Числа составные
print([x for x in range(1, 100) if len(divisors(x)) > 2])
'''


# № 23763 Демоверсия 2026 (Уровень: Базовый)
'''
def divisors(x):
    d = []
    for j in range(2, int(x**0.5)+1):  # не считая единицы и самого числа
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))


cnt = 0
for x in range(800_000+1, 10**10):
    d = divisors(x)
    if len(d) >= 2:
        M = min(d) + max(d)
        if M % 10 == 4:
            print(x, M)
            cnt += 1
            if cnt == 5:
                break
'''


# № 17686 Пересдача 04.07.24 (Уровень: Базовый)
# Напишите программу, которая перебирает целые числа,
# большие 700 000, в порядке возрастания и ищет среди них такие,
# у которых есть натуральный делитель, оканчивающийся на цифру 7
# и не равный ни самому числу, ни числу 7.
# Выведите первые пять найденных чисел и для каждого -
# соответствующий наименьший делитель, оканчивающийся на цифру 7,
# не равный ни самому числу, ни числу 7.
'''
def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            # d += [j, x // j]
            d.append(j)
            d.append(x // j)
    return sorted(set(d))


cnt = 0
for x in range(700_000+1, 10**10):
    d = [j for j in divisors(x) if j % 10 == 7 and j != 7 and j != x]
    if len(d) > 0:
        print(x, min(d))
        cnt += 1
        if cnt == 5:
            break
 '''


# № 23207 Основная волна 10.06.25 (Уровень: Средний)

def prime(x):
    if x <= 1:
        return False
    for j in range(2, x):
        if x % j == 0:
            return False
    return True

def divisors(x):
    d = []
    for j in range(1, int(x**0.5)+1):
        if x % j == 0:
            d += [j, x // j]
    return sorted(set(d))


cnt = 0
for x in range(1_324_727+1, 10**10):
    d = [j for j in divisors(x) if prime(j) and '5' in str(j)]
    if len(d) >= 2:
        if min(d) * max(d) == x:
            print(x, max(d), d, d[0] * d[1])
            cnt += 1
            if cnt == 5:
                break

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 8, 14, 25]
# КЕГЭ = []
# на следующем уроке:
