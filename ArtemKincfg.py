# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

x = 5  # переменная - это удобный способ взаимодействия с ячейками памяти компьютера
print(x, type(x))  # 5 <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - Целочисленные значения
print(4+6, type(4+6))  # 10 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - Вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = "5"  # str (string) - строковый тип данных, который хранит символы, цифры, буквы, слова, тексты и тд тп
print(a * 4, c * 4)  # 20 5555 - при умножении строки на целое число строка дублируется
print('Hello ' * 4)  # Hello Hello Hello Hello
new_message = 'Hello, ' + 'world!'  # конкатенация строк, то есть строки между собой можно склеивать
print(new_message)  # Hello, world!


d1 = True
d0 = False  # bool (Boolean) - Основы Булевой алгебры (ака Математическая логика)
print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
    
# = - оператор присваивания, то есть кладем значение в переменную
# == - оператор сравнения, то есть спрашиваем: "Равны ли эти элементы"
# != - оператор сравнения, то есть спрашиваем: "не равны ли эти элементы"
'''

# Типы данных коллекций (последовательности)
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # 'a' - первый элемент списка М
print(M[-1])  # 'e' - последний элемент списка М
M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

A = [1, 2, 3, '4', True, [6, 7, 8]]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент имеет свой индивидуальны порядковый номер (индекс)
# 3. Индексы можно считать слева-направо начинся с 0 или справа-налево начиная с -1
# 4. Элементы списков можно брать через индексы, а еще изменять их значения!

B = (1, 2, 3)  # tuple (кортеж)
# 1. Он полностью идентичен с спискам, за исключением: нельзя изменять элементы кортежа

C = {1, 2, 3, 2, 3}  # set (множество)
# 1. В множествах элементы не могут дублироваться
print(C)  # {1, 2, 3} - удобно отвечать на вопрос "сколько различных значений найдется?"

D = {'один': 'one', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря делятся на две части: ключ и значение
# 2. Доступ к значению словаря осуществляется через его ключ
# 3. Ключ не могут повторяться, если такое произойдет, то старое значение заменится на новое

print(D['один'])  # one
D['один'] = 'ONE'
print(D)  # {'один': 'ONE', 'автобус': 'bus'}

for key, value in D.items():
    print(key, value)
    # один ONE
    # автобус bus
'''

'''
M = [2, 2.0, '2', True, 2+2, 4/2, '2' * 2, 2 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'ONE', 'автобус': 'bus'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 2.0
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'ONE', 'автобус': 'bus'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))   # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку: ')
print(s, type(s))

n = int(input('Введите целое число: '))
print(n, type(n))
'''


# Работа с f-строкой
'''
# Просят вывести строчку на экран: "Сегодня облачно, а температура 24 градуса!"
weather = 'облачно'
temperature = int(input('Введите температуру: '))

print("Сегодня ", weather, ", а температура ", temperature, " градуса!")
print("Сегодня " + weather + ", а температура " + str(temperature) + " градуса!")
print("Сегодня {}, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а температура {temperature} градуса!")
'''


# Базовая арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку через '\n'

print(f'{a} / {b} = {a / b} \n'  # Обычное вещественное деление, то есть результат всегда float (дробь)
      f'{a} // {b} = {a // b} \n'  # Взятие целой части, то есть деление без остатка 3.99999 // 1 = 3
      f'{a} % {b} = {a % b}')  # Взятие остатка от деления 7 % 2 = 1

print(123 // 10)  # 12
print(123 % 10)  # 3 - таким образом можно брать последнюю цифру числа через % 10

print(- 123 // 10)  # -13
print(-123 % 10)  # 7

print()

print(f'Возведем число {a} в степень {b}: {a ** b}')  # 49


from math import sqrt
print(f'Возьмите квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмите квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмите кубический корень от числа 27: {27 ** (1/3)}')  # 3.0
'''

# - это однострочный комментарий (то есть код его не видит)

'''
- Многострочный комментарий 
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
