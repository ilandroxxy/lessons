# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# № 23764 Демоверсия 2026 (Уровень: Базовый)
# – символ «?» означает ровно одну произвольную цифру;
# – символ «*» означает любую последовательность цифр произвольной длины;
# в том числе «*» может задавать и пустую последовательность.

# Среди натуральных чисел, не превышающих 10**10,
# найдите все числа, соответствующие маске 3?12?14*5,
# делящиеся на 1917 без остатка.
'''
from fnmatch import *
for x in range(1917, 10**10, 1917):
    if fnmatch(str(x), '3?12?14*5'):
        print(x, x // 1917)
'''


# № 20969 (Уровень: Базовый)
'''
# Вариант 1
from fnmatch import *
for x in range(154682, 10**11, 154682):
    if fnmatch(str(x), '*192?3*68'):
        print(x, x // 154682)

# Вариант 2
from re import *
for x in range(154682, 10**11, 154682):
    if fullmatch('[0-9]*192[0-9]3[0-9]*68', str(x)):
        print(x, x // 154682)
'''


# № 8511 Апробация 17.05 (Уровень: Базовый)
# Среди натуральных чисел, не превышающих 10**8, найдите все числа,
# соответствующие маске 12??15*6, делящиеся на 253 без остатка.
'''
from fnmatch import *
for x in range(253, 10**8, 253):
    if fnmatch(str(x), '12??15*6'):
        print(x, x // 253)
'''


# № 8481 (Уровень: Базовый)
# Найдите все натуральные числа меньшие 10**8, которые кратны 237,
# соответствуют маске «81?2*80», но не соответствуют маске «*9*».
# В ответ в первом столбике перечислите все найденные числа в порядке возрастания,
# а во втором столбце – соответствующие им результаты деления этих чисел на 237.
'''
from fnmatch import *
for x in range(237, 10**8, 237):
    if fnmatch(str(x), '81?2*80'):
        if not fnmatch(str(x), '*9*'):
            print(x, x // 237)
'''



# Универсальная функция поиска делителей числа для 25 номера
'''
def divisors(n):
    d = []
    for j in range(1, int(n**0.5)+1):
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))


print(divisors(24))  # [1, 2, 3, 4, 6, 8, 12, 24]
print(divisors(16))  # [1, 2, 4, 8, 16]
print(divisors(1_000_000_000))
'''


# № 23763 Демоверсия 2026 (Уровень: Базовый)
'''
def divisors(n):
    d = []
    for j in range(2, int(n**0.5)+1):  # не считая единицы и самого числа
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))


cnt = 0
for n in range(800_000+1, 10**10):
    d = divisors(n)
    if len(d) > 0:
        M = min(d) + max(d)
        if M % 10 == 4:
            print(n, M)
            cnt += 1
            if cnt == 5:
                break
'''


# № 21909 Открытый вариант 2025 (Уровень: Базовый)
'''
def divisors(n):
    d = []
    for j in range(1, int(n**0.5)+1):
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))


cnt = 0
for n in range(500_000+1, 10**10):
    d = divisors(n)
    if len(d) > 0:
        R = sum(d)
        if R % 10 == 6:
            print(n, R)
            cnt += 1
            if cnt == 5:
                break
'''


# № 21422 Досрочная волна 2025 (Уровень: Базовый)
'''
def divisors(n):
    d = []
    for j in range(1, int(n**0.5)+1):
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))


cnt = 0
for x in range(1_125_000+1, 10**10):
    d = [j for j in divisors(x) if j % 10 == 7 and j != x and j != 7]
    if len(d) > 0:
        print(x, min(d))
        cnt += 1
        if cnt == 5:
            break
'''


# № 20814 Апробация 05.03.25 (Уровень: Базовый)
# Пусть R - сумма различных натуральных делителей целого числа, не считая единицы и самого числа.
# Напишите программу, которая перебирает целые числа, большие 500 000,
# в порядке возрастания и ищет среди них такие, для которых R оканчивается на цифру 9.
# В ответе запишите в первом столбце таблицы первые пять
# найденных чисел в порядке возрастания, а во втором столбце - соответствующие им значения R.
'''
def divisors(n):
    d = []
    for j in range(2, int(n ** 0.5) + 1):
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))


cnt = 0
for n in range(500_000 + 1, 10 ** 10):
    d = divisors(n)
    if len(d) > 0:
        R = sum(d)
        if R % 10 == 9:
            print(n, R)
            cnt += 1
            if cnt == 5:
                break
'''


# № 17642 Основная волна 19.06.24 (Уровень: Базовый)

# Напишите программу, которая перебирает целые числа, большие 800000,
# в порядке возрастания и ищет среди них такие, у которых есть натуральный делитель,
# оканчивающийся на цифру 9 и не равный ни самому числу, ни числу 9.
# В ответе запишите в первом столбце таблицы первые пять найденных чисел
# в порядке возрастания, а во втором столбце — соответствующий минимальный делитель для каждого числа,
# оканчивающийся цифрой 9, не равный ни самому числу, ни числу 9.

def divisors(n):
    d = []
    for j in range(2, int(n ** 0.5) + 1):  # не считая единицы и самого числа.
        if n % j == 0:
            d += [j, n // j]
    return sorted(set(d))

cnt = 0
for n in range(500_000 + 1, 10 ** 10):
    d = divisors(n)
    if len(d) > 0:
        R = sum(d)
        if R % 10 == 9:
            print(n, R)
            cnt += 1
            if cnt == 5:
                break



# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 5, 6, 8, 13, 14, 25]
# КЕГЭ = []
# на следующем уроке:
