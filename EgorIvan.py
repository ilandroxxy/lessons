# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


'''
s = 'abcde'

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка M: {M[0]}')
print(f'Последний элемент списка M: {M[4]}')
print(f'Последний элемент списка M: {M[-1]}')

# Срезы - это способ взять фрагмент из списка

# СРЕЗ[START : STOP-1]
# СРЕЗ[START : STOP-1 : STEP]
# range(START, STOP-1, STEP)

print(s[2:4])  # 'cd'
print(M[2:4])  # ['c', 'd'] - все элементы от 2 по 4 индекс (не включая конец)
print(M[2:])  # ['c', 'd', 'e'] - все элементы справа от 2 индекса
print(M[:4])  # ['a', 'b', 'c', 'd'] - все элементы до 4 индекса (не включая конец)

print(M[2:])  # - все элементы кроме первых двух
print(M[-3:])  # ['c', 'd', 'e'] - последние три элемента

print(M[:])
print(M[::])  # - все элементы без изменений

print(M[::2])  # ['a', 'c', 'e'] - все элементы под четными индексами
print(M[1::2])  # ['b', 'd'] - все элементы под нечетными индексами

print(M[::-1])  # ['e', 'd', 'c', 'b', 'a'] - развернуть список в обратном порядке
'''


# Функции перевода в различные системы счисления
'''
n = 8

# Функция перевода в двоичную систему счисления
print(bin(n)[2:])  # 1000
print(f'{n:b}')  # 1000

# Функция перевода в восьмеричную систему счисления
print(oct(n)[2:])  # 10
print(f'{n:o}')  # 10

# Функция перевода в шестнадцатеричную систему счисления
print(hex(n)[2:])  # 8
print(f'{n:x}')  # 8

# Универсальный перевод для 5 номера:

def convert(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r


print(convert(n, 2))  # 1000
print(convert(n, 8))  # 10
print(convert(n, 3))  # 22
'''


# № 23742 Демоверсия 2026 (Уровень: Базовый)
'''
for n in range(1, 10000):

    # 1. Строится двоичная запись числа N.
    s = bin(n)[2:]

    # а) если число N делится на 3
    if n % 3 == 0:

        # то к этой записи дописываются её три последние двоичные цифры;
        s = s + s[-3:]
    else:
        # то остаток от деления умножается на 3
        x = (n % 3) * 3
        s = s + bin(x)[2:]

    # 3. Результат переводится в десятичную систему и выводится на экран.
    r = int(s, 2)

    # Укажите минимальное число N, после обработки которого с помощью этого
    # алгоритма получается число R, не меньшее 200

    if r >= 200:
        print(n)  # минимальное число N
        break

# Просто код:   
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)

    if r >= 200:
        print(n)  
        break
'''


# № 23551 Пересдача 03.07.25 (Уровень: Базовый)
'''
R = []
for n in range(1, 1000):
    s = f'{n:b}'
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r < 30:
        R.append(n)
print(max(R))
'''

'''
def convert(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

R = []
for n in range(1, 1000):
    s = convert(n, 2)
    if n % 2 == 0:
        s = '10' + s
    else:
        s = '1' + s + '01'
    r = int(s, 2)
    if r < 30:
        R.append(n)
print(max(R))
'''

# № 23364 Резервный день 19.06.25 (Уровень: Базовый)
'''
def convert(n, b):
    r = ''
    while n > 0:
        r = str(n % b) + r
        n //= b
    return r

R = []
for n in range(1, 1000):
    s = convert(n, 3)
    if n % 3 == 0:
        s = '10' + s + '02'
    else:
        x = (n % 3) * 4
        s = s + convert(x, 3)
    r = int(s, 3)
    if r < 100:
        R.append(n)
print(max(R))
'''


# № 23189 Основная волна 10.06.25 (Уровень: Базовый)
'''
R = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if n % 3 == 0:
        s = s + s[-3:]
    else:
        x = (n % 3) * 3
        s = s + bin(x)[2:]
    r = int(s, 2)

    if r < 130:
        R.append(n)
print(max(R))
'''


# № 17859 Демоверсия 2025 (Уровень: Базовый)
'''
R = []
for n in range(1, 10000):
    k = bin(n)[2:]
    if n % 2 == 0:
        k = "10" + k
    else:
        k = "1" + k + "01"
    r = int(k, 2)
    if n <= 12:
        R.append(r)
print(max(R))
'''


# № 17668 Пересдача 04.07.24 (Уровень: Базовый)
'''
R = []
for n in range(1, 10000):
    s = bin(n)[2:]
    if s.count('1') % 2 == 0:
        s = s + '0'
        s = '10' + s[2:]
    else:
        s = s + '1'
        s = '11' + s[2:]
    r = int(s, 2)

    if n > 27:
        R.append(r)
print(min(R))
'''

# № 17624 Основная волна 19.06.24 (Уровень: Базовый)

R = []
for n in range(1, 10000):
    s = bin(n)[2:]
    for i in range(2):
        # складываются все цифры двоичной записи числа N,
        # и остаток от деления суммы на 2 дописывается
        # в конец числа (справа)
        s = s + str(s.count('1') % 2)
    r = int(s, 2)
    if r > 75:
        R.append(r)
print(min(R))  # 78


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
