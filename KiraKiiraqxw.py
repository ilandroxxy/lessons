# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

x = 5  # Переменная - это способ удобно хранить данные в ячейках памяти
print(x, type(x))  # 5 <class 'int'>

# Типы данных переменных:
'''
a = 5  # int (integer) - целочисленные значения
print(4+6, type(4+6))  # 10 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дроби)
print(4/2, type(4/2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, хранит в себе символы, пунктуацию, цифры, слова, текст и тд тп
print(a * 4, c * 4)   # 20 5555
print('hello ' * 4)  # hello hello hello hello
print('Hello, ' + 'world!')  # Hello, world! - операция конкатенации (склеивания) строк
new_message = 'Hello, ' + 'world!'
print(new_message)  # Hello, world!

d1 = True
d0 = False  # bool (Boolean) - Элементы Булевой алгебры (Математической логики)
print(4 < 10)  # True

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (массив)
'''
A = [1, 2, 'a', True]  # list (список)

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

# 1. Может хранить в себе неограниченное кол-во элементов, различных типов данных
# 2. Каждый элемент списка имеет свой уникальный порядковый номер (индекс)
# 3. Индексы могут считаться слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно не только брать через их индексы, но и изменять их

print(M[0])  # a - первый элемент списка М
print(M[-1])  # e - последний элемент списка М

M[0], M[-1] = 'start', 'stop'
print(M)  # ['start', 'b', 'c', 'd', 'stop']


B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен спискам, но изменять элементы кортежа нельзя!


C = {1, 2, 3, 2, 3}  # set (множество)
# 1. Множества не могут хранить двух одинаковых значений.
print(C)  # {1, 2, 3}


D = {'один': 'one', 'автобус': 'bus'}  # dict (словарь)
# 1. Элементы словаря разбиты на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи дублироваться не могут, иначе произойдет перезапись значения по ключу

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'автобус': 'bus'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A) 
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Введите строку данных с клавиатуры: ')
print(s, type(s))

n = int(input('Введите число с клавиатуры: '))
print(n, type(n))
'''

# Работа с f-строкой: "@"Сегодня облачно, а температура 24 градуса!"
'''
weather = 'облачно'  # str
temperature = int(input('Введите температуру: '))  # int

print('Сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
# TypeError: can only concatenate str (not "int") to str
print('Сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Сегодня {weather}, а температура {temperature} градуса!')
'''

# Пример правильного оформления домашних работ по Пайтон
'''
a = int(input())
S = a * a
V = a ** 3
print(f'Площадь квадрата: {S}')
print(f'Объем квадрата: {V}')
'''


# Базовая арифметика:
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обыкновенное вещественное деление (результат всегда float())
      f'{a} // {b} = {a // b} \n'  # 3 - Взятие только целой части от деления 
      f'{a} % {b} = {a % b}')  # 1 - Взятие остатка от деления


n = 543
print(n // 10)  # 54
print(n % 10)  # 3

m = 1234
print(m // 100)  # 12
print(m % 100)  # 34

print(f'Возвести число 7 в степень 2: {7 ** 2}')  # 49

import math
print(f'Взять квадратный корень от числа 16: {math.sqrt(16)}')  # 4.0
print(f'Взять квадратный корень от числа 16: {16 ** (1 / 2)}')  # 4.0
print(f'Взять кубический корень от числа 27: {27 ** (1 / 3)}')  # 3.0
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
