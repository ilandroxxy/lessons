# region Домашка: ******************************************************************

# Пример работы с генераторами
'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


M = []
a = int(input())
for i in range(a):
    b = int(input())
    M.append(b ** 2)
print(M)


M = [int(input()) ** 2 for i in range(int(input()))]
print(M)
'''
from runpy import run_path

# https://stepik.org/lesson/1309453/step/6?unit=1324569
'''
M = []
n = int(input())
for i in range(n):
    b = int(input())
    M.append(b)

# M = [1, 2, 3, 4, 5]
# B = [3, 5, 7, 9]
B = []
for i in range(len(M)-1):
    x, y = M[i], M[i+1]
    B.append(x + y)
print(B)
'''

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


'''
# i  01234
s = 'abcde'

print(f'Первый элемент строки s: {s[0]}')
print(f'Последний элемент строки s: {s[-1]}')
# s[0], s[-1] = s[-1], s[0] - Так делать нельзя, потому что в строках нельзя менять элементы по индексам

# Давайте букву 'С' заменим на символы '***'
s = 'abСde'
s = s[:2] + '***' + s[3:]
print(s)  # ab***de
'''


# Срезы строк работают полностью аналогично спискам
'''
s = 'abcde'
print(s[1:-1])  # - Все элементы кроме первого и последнего 
print(s[2:])  # - Все элементы кроме первых двух
print(s[-3:])  # - Последние три элемента строки
print(s[::-1])  # - Строка в обратном порядке 
'''


# Функции строк
'''
s = 'addbbb'

print(len(s))  # - Возвращает кол-во элементов в строке (длину строки)
print(max(s), min(s))  # - Возвращает максимальный и минимальный элемент строки по алфавито

print(sorted('23498sdijkuhfERIUWH'))  # - Возвращает отсортированный строчный список символов из таблицы ASCII
# ['2', '3', '4', '8', '9', 'E', 'H', 'I', 'R', 'U', 'W', 'd', 'f', 'h', 'i', 'j', 'k', 's', 'u']

print(reversed(s))  # <reversed object at 0x104267340>
print(list(reversed(s)))  # ['b', 'b', 'b', 'd', 'd', 'a'] - разворачивает элементы строки, но возвращает в виде строчного списка

print(set(s))  # {'b', 'a', 'd'} - Перевод в множество и удаление копий 
'''


# Все методы строк в Python, которые понадобятся на ЕГЭ


# 1⃣ .strip()
# Метод strip() удаляет пробелы (или другие символы) из начала и конца строки.
# Это полезно для очистки пользовательского ввода.
'''
text = "  Привет, мир!  "
cleaned_text = text.strip()
print(cleaned_text) # "Привет, мир!"
'''

# 2⃣ .lower() и .upper()
# Эти методы позволяют изменять регистр строки.
# lower() преобразует строку в нижний регистр, а upper() – в верхний.
'''
text = "ПрIvEt"
print(text.lower())  # "привет"
print(text.upper())  # "ПРИВЕТ"
'''

# 3⃣ .replace()
# Метод replace(old, new, count) заменяет подстроку old на new в строке count раз.
'''
text = "Я люблю Python!"
new_text = text.replace("Python", "программирование")
print(new_text)  # "Я люблю программирование!"

s = '11211121122221211'
s = s.replace('12', '*')
print(s)  # 1*11*1*222*11


s = s.replace('*', '+', 2)
print(s)  # 1+11+1*222*11
'''

# 4⃣  .split()
# Метод split(separator) разделяет строку на части по указанному разделителю.
# Если разделитель не указан, используется пробел.
'''
text = "яблоко груша банан"
fruits = text.split()  # по умолчанию разделяет по пробелам
print(fruits) # ['яблоко', 'груша', 'банан']

ip = '123.45.234.5'
print(ip.split('.'))  # ['123', '45', '234', '5']
'''


# 5⃣ .join()

# Метод join(iterable) соединяет элементы списка
# (или другого итерируемого объекта) в строку с указанным разделителем.
'''
fruits = ['яблоко', 'груша', 'банан']
result = ', '.join(fruits)
print(result)  # "яблоко, груша, банан"


number = ['123', '423', '234']
print('_'.join(number))  # 123_423_234
'''

# 6⃣ .find()
# Метод find(substring) ищет подстроку в строке и возвращает индекс, с которого начинается первая встреча.
# Если подстрока не найдена, возвращает -1.
'''
text = 'abcdedcba'
print(text.find('b'))  # 1
print(text.index('b'))  # 1

print(text.rfind('b'))  # 7
print(text.rindex('b'))  # 7

print(text.find('0'))  # -1
# print(text.index('0'))  # ValueError: substring not found
'''


# 7⃣ .count()
# Метод count(substring) возвращает количество вхождений подстроки в строку.
'''
text = "яблоко, груша, яблоко"
count = text.count("яблоко")
print(count)  # 2
'''

# 8⃣ .startswith() и .endswith()
# Эти методы проверяют, начинается ли строка с указанной подстроки или заканчивается ли ею.
'''
text = "Привет, мир!"
print(text.startswith("Привет"))  # True
print(text.endswith("мир!"))  # True
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
