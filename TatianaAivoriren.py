# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# Типы данных переменных
'''
x = 5  # переменные - это удобный способ взаимодействия с ячейками памяти

a = 5  # int (integer) - целочисленные значения

b = 5.0  # float (число с плавающей точкой) - вещественное значение/дробь
print(5 + 4.0, type(5 + 4.0))  # 9.0 <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - строковый тип данных, текст и другое
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello - дублирование строки

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # Hello, world! - конкатенация (склеивание) строк

d1 = True  # bool (Boolean) - элементы Булевой алгебры (ака Математическая логика)
d0 = False
print(4 == 4)  # True
print(4 == 10)  # False

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '4', 5.0, True, [1, 2, 3]]  # list (список)
# 1. Может содержать в себе неограниченное кол-во элементов
# 2. При этом элементы могут быть различных типов данных (в отличие от массива)
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Нумерация индексов идет слева-направо начиная с 0 и справа-налево начиная с -1
# 5. Через индексы мы можем изменять значения элементов списка

print(f'Первый элемент списка А: {A[0]}')
print(f'Последний элемент списка А: {A[-1]}')

A[-2] = False
print(A)  # [1, 2, 3, '4', 5.0, False, [1, 2, 3]]


B = (1, 2, 3)  # tuple (кортеж)
# 1. Тоже самое, что список, но нельзя изменять элементы кортежа

C = {1, 2, 2, 3, 3, 3}  # set (множество)
# 1. Множество не может хранить копии элементов - все элементы различные
print(C)  # {1, 2, 3}

D = {'один':'one', 'два':'two'}
# 1. Элементы словаря делятся на две части: ключи и значение
# 2. Доступ к значению элемента осуществляется через ключ
# 3. Ключи не могут повторятсья иначе они будут перезаписываться

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}

M = [1, '2', 2.0, True, 2+2, '2' * 2, 4/2, 4==4, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один':'one', 'два':'two'}]
for x in M:
    print(type(x), x)
    # <class 'int'> 1
    # <class 'str'> 2
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'str'> 22
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'two'}
'''


# Конвертация типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
text = input('Введите свой текст: ')
print(text, type(text))

temperature = int(input('Введите температуру: '))
print(temperature, type(temperature))
'''

# Работа с f-строками
'''
# Привет, сегодня облачно, а температура 24 градуса!

temperature = int(input('Введите температуру: '))
weather = 'облачно'
print('Привет, сегодня ', weather, ', а температура ', temperature, 'градуса!')
print('Привет, сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Привет, сегодня {weather}, а температура {temperature} градуса!')
'''


# Базовая арифметика

a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print() # В каждой функции print() есть переход на новую строку /n

# Деление в Пайтон:

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Вещественное деление, обыкновенное деление 
      f'{a} // {b} = {a // b} \n'  # 3 - Целочисленное деление - берет только целую часть 
      f'{a} % {b} = {a % b}')  # 1 - Остаток от деления 7/2 = 3 (1/2)

print()

# n = int(input('n: '))
n = 5
if n % 2 == 0:
    print('Число делится на 2 / Число кратно 2 / Число четное')
elif n % 3 == 0:
    print('Число делится на 3 / Число кратно 3')
elif n % 10 == 7:
    print('Число оканчивается на 7')
elif n % 100 == 77:
    print('Число оканчивается на 77')
elif n % 1000 == 123:
    print('Число оканчивается на 123')

print()



print(f'Возведем число 4 в квадрат: {4} ** 2 = {4**2}')
print(f'Возведем число 3 в кубическую степень: {3} ** 3 = {3**3}')

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
