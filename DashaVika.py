# region Домашка: ******************************************************************
from runpy import run_path

# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************


# x = 5  # переменная - это удобный способ взаимодействия с ячейкам памяти
# print(x)
# print(x * 2)
# print(type(x))  # <class 'int'>

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print(type(2+2))  # <class 'int'>


b = 5.0  # float (число с плавающей точкой) - вещественное значение/дробь
print(4 + 5.0)  # 9.0
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>


c = '5'  # str (string) - строковый тип данных для хранения текста
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
print('Hello' * 4)  # HelloHelloHelloHello - при умножении строки на целое число - строка дублируется

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # Hello, world!


d1 = True  # bool (Boolean) - элементы Булевой алгебры (математическая логика)
d0 = False

print(4 < 10)  # True
print(4 == 10)  # False

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


'''
M = [2, 2.0, '2', True, 2+2, 7/2, '2'*2, 4<10, [1, 2, 3], (1, 2, 3), {1, 2, 3}]
for x in M:
    print(type(x), x)
    # <class 'int'> 2
    # <class 'float'> 2.0
    # <class 'str'> 2
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'float'> 3.5
    # <class 'str'> 22
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
'''


# Типы данных коллекций (последовательностей)
'''
# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print('Первый элемент списка L:', L[0])
print('Последний элемент списка L:', L[4])
print('Последний элемент списка L:', L[-1])


A = [1, 2, 3]  # list (список)
# 1. Могут хранить неограниченное кол-во элементов
# 2. Элементы могут принимать различные типы данных
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 5. Через индексы можно изменять элементы списка в отличие от кортежей и строк

L[0], L[-1] = 'e', 'a'
print(L)  # ['e', 'b', 'c', 'd', 'a']


B = (1, 2, 3)  # tuple (кортеж)
# 1. То же самое, что и список - только нельзя изменять элементы


C = {1, 2, 2, 3, 3, 3}  # set (множество)
# 1. Не могут содержать копии элементов - копии удаляются
print(C)  # {1, 2, 3}


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через ключ
print(D['один'])  # one

# 3. Ключ не могут повторяться иначе произойдет перезапись
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}
'''


# Конвертация типов данных
'''
a = 5
print(type(a), a)  # <class 'int'> 5

a = str(a)
print(type(a), a)  # <class 'str'> 5

a = float(a)
print(type(a), a)  # <class 'float'> 5.0

a = int(a)
print(type(a), a)  # <class 'int'> 5

A = [1, 2, 2, 3, 3, 3]
print(type(A), A)  # <class 'list'> [1, 2, 2, 3, 3, 3]

A = tuple(A)
print(type(A), A)  # <class 'tuple'> (1, 2, 2, 3, 3, 3)

A = set(A)
print(type(A), A)  # <class 'set'> {1, 2, 3}

A = list(A)
print(type(A), A)  # <class 'list'> [1, 2, 3]
'''


# Ввод данных с клавиатуры
'''
name = input('Введите свое имя: ')  # вводить текст с клавиатуры
print('Меня зовут -', name)

number = int(input('Введите число: '))
print(number * 2)
'''


# Пример использования f-строк
# print('Привет, Илья. Сегодня отличная солнечная погода, а температура 24 градуса!')
'''
name = input('Введите свое имя: ')
weather = 'солнечная'
temperature = int(input('Введите температуру: '))

print('Привет, ', name, '. Сегодня отличная ', weather, ' погода, а температура ', temperature, ' градуса!')
print('Привет, ' + name + '. Сегодня отличная ' + weather + ' погода, а температура ' + str(temperature) + ' градуса!')
print('Привет, {}. Сегодня отличная {} погода, а температура {} градуса!'.format(name, weather, temperature))
print(f'Привет, {name}. Сегодня отличная {weather} погода, а температура {temperature} градуса!')
'''

# Базовая арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку /n

for i in range(2, 10):
    # print(i, end='\n')
    print(i, end=' ')  # 2 3 4 5 6 7 8 9

print()

a, b = 7, 2
# Есть три типа делений
print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обыкновенное вещественное деление (результат всегда float дробь) 
      f'{a} // {b} = {a // b} \n'  # 3 - Целочисленное деление (то есть берем только целую часть) 
      f'{a} % {b} = {a % b}')  # 1 - Остаток от деления (7/2 = 3 целых и 1/2)

print()

n = int(input('n: '))  # 123   (123 // 10 = 12  |  123 % 10 = 3)
if n % 2 == 0:
    print('Число делится на 2 | Число кратно 2 | Число четное')
if n % 3 == 0:
    print('Число делится на 3 | Число кратно 3')
if n % 10 == 3:
    print('Число оканчивается на 3')
if n % 100 == 43:
    print('Число оканчивается на 43')
if n % 1000 == 243:
    print('Число оканчивается на 243')

print()

print(f'Возведем число 7 в степень 2: {7 ** 2}')
print(f'Возведем число 7 в степень 3: {7 ** 3}')

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0
'''


# - однострочный комментарий

'''
- многострочный (блочный) комментарий
'''


# https://stepik.org/lesson/1309431/step/9?unit=1324547
'''
a = int(input())
b = int(input())
print(a + b)
print(a - b)
print(a * b)
print(a / b)
'''

# https://stepik.org/lesson/1309431/step/10?unit=1324547
'''
a = int(input())
b = int(input())

P = 2 * (a + b)
S = a * b

print(f'Периметр прямоугольника: {P}')
print(f'Площадь прямоугольника: {S}')
'''
# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
