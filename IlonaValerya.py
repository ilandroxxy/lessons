# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - это однострочный комментарий


'''
- это многострочный комментарий
'''

# Переменная - это удобный способ взаимодействия с ячейками памяти компьютера

# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения
print()  # Выводит результаты на экран
print(a, type(a))  # 5 <class 'int'> - Функция type() - возвращает тип данных переменной

b = 5.0  # float (число с плавающей точкой) - Вещественные значения (дроби)
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

c = '5'  # str (string) - Строковый тип данных, хранит в себе слова, буквы, текст и тд
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello - При умножении строки на целое число строк дублируется
new_message = 'Hello, ' + 'world!'  # - Операция конкатенации (склеивание) строк
print(new_message)  # Hello, world!


text = 'Привет мир!'

name = 'ilya'
text = f'Меня зовут {name}'
print(text)  # Меня зовут ilya

text = 'Сегодня я читал роман "Война и мир"'
print(text)  # Сегодня я читал роман "Война и мир"

d0 = False
d1 = True  # bool (Boolean)  - Основы Булевой алгебры (Математическая логика)
print(4 < 10)  # True

n = 8
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов, различных типов данных (в отличие от строк и массивов)
# 2. Каждый элемент списка имеет свой порядковый номер: индекс
# 3. Считать индексы списков можно слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно не только брать через индексы, но и ИЗМЕНЯТЬ ИХ ЗНАЧЕНИЕ (в отличие от кортежей и строк)

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(M[0])  # a - Первый элемент списка M
print(M[-1])  # e - Последний элемент списка M

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']

B = (1, 2, 3)  # tuple (кортеж)
# 1. Полностью идентичен списка, кроме: изменять элементы кортежа нельзя

C = {1, 2, 3, 2, 3}  # set (множество)
# 1. В множестве не могут хранить копии двух одинаковых элементов
print(C)  # {1, 2, 3}

D = {'один': 'one', 'два': 'два'}  # dict (словарь)
# 1. Элементы словаря разбиты на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи не могут повторяться, иначе произойдет замена значения

print(D['один'])  # one
D['один'] = 1
print(D)  # {'один': 1, 'два': 'два'}
'''


'''
M = [2, '2', 2.0, True, 2+2, '2' * 4, 7 / 2, 4 < 10, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {'один': 'one', 'два': 'два'}]
for elem in M:
    print(type(elem), elem)
    # <class 'int'> 2
    # <class 'str'> 2
    # <class 'float'> 2.0
    # <class 'bool'> True
    # <class 'int'> 4
    # <class 'str'> 2222
    # <class 'float'> 3.5
    # <class 'bool'> True
    # <class 'list'> [1, 2, 3]
    # <class 'tuple'> (1, 2, 3)
    # <class 'set'> {1, 2, 3}
    # <class 'dict'> {'один': 'one', 'два': 'два'}
'''


# Конвертирование типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
s = input('Введите строку: ')
print(type(s), s)  # <class 'str'> 567

n = int(input('Введите число: '))
print(type(n), n)  # <class 'int'> 567
'''


# Работа с f-строками
'''
# "Сегодня облачно, а температура 24 градуса!"
weather = 'облачно'
temperature = int(input('Введите температуру: '))
print("Сегодня ", weather, ", а температура ", temperature, " градуса!")
print("Сегодня " + weather + ", а температура " + str(temperature) + " градуса!")
# TypeError: can only concatenate str (not "int") to str
print("Сегодня {}, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather}, а температура {temperature} градуса!")
'''


# Базова арифметика
'''
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'  # '\n' - символ перехода на новую строку 
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() есть переход на новую строку '\n'

print(f'{a} / {b} = {a / b} \n'  # 3.5 - Обыкновенное вещественное деление (результат всегда float) 
      f'{a} // {b} = {a // b} \n'  # 3 - Взятие только целой части от деления
      f'{a} % {b} = {a % b}')  # 1 - Взятие остатка от деления (числитель от деления)

print()

# Функция round - позволяет округлить результат деления
print(26 / 3)  # 8.666666666666666
print(round(26 / 3))  # 9
print(round(26 / 3, 2))  # 8.67
print(round(26 / 3, 1))  # 8.7

print()


a, b = 7, 2
print(f'Возведем число {a} в степень {b}: {a ** b}')  # 49

import math
print(f'Возьмем квадратный корень от числа 16: {math.sqrt(16)}')  # 4.0

print(f'Возьмем квадратный корень от числа 16: {16 ** (1 / 2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1 / 3)}')  # 3.0
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
