# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# Теория списков
'''
# i   0    1    2    3    4       5        6
M = ['a', 'b', 'c', 'd', 'e', [1, 2, 3], True]
# -i -7   -6   -5   -4   -3      -2       -1

s = '123'  # str (строка)
print(s[0])  # '1' - Первый элемент строки

print(M[0])  # 'a' - Первый элемент списка
print(M[-1])  # 'True' - Последний элемент списка

M[0], M[-1] = 'A', False
print(M)  # ['A', 'b', 'c', 'd', 'e', [1, 2, 3], False]


# 1. Могут хранить в себе неограниченное кол-во значений, различных типов данных (в отличие от массивов и строк)
# 2. Каждый элемент списка имеет свой порядковый номер: индекс
# 3. Индексы можно считать слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Через индексы мы можем не только брать элементы списковы, но и изменять их значение (в отличие от кортежей и строк)

B = (1, 2, 3)  # tuple (кортеж)
s = '123'  # str (строка)
'''


# Срезы списков
'''
# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']

# range(START, STOP-1, STEP)
# СРЕЗЫ [ START : STOP-1 : STEP ]

print(M[0])  # 'a'
print(M[1:4])  # ['b', 'c', 'd']
print(M[:4])  # ['a', 'b', 'c', 'd'] - Все элементы до 4 индекса (не включительно)
print(M[2:])  # ['c', 'd', 'e'] - Все элементы от 2 индекса до конца (включительно)
print(M[0::2])  # ['a', 'c', 'e'] - Все элементы с четными индексами
print(M[1::2])  # ['b', 'd'] -Все элементы с нечетными индексами

# Самые важные для ЕГЭ срезы:

n = 8
print(bin(n))  # 0b1000
print(bin(n)[2:])  # 1000 - Все символы кроме первых двух

# i  0  1  2  3  4
A = [1, 2, 3, 4, 5]
# -i          -2 -1

print(A[1:-1])  # [2, 3, 4] - Все элементы кроме превого и последнего

print(A[-3:])  # [3, 4, 5] - Последние три элементы 

print(A[::-1])  # [5, 4, 3, 2, 1] - Все элементы в обратном порядке
'''


# Функции списков
'''
M = [1, 2, 3, 2, 3, 4]
print(len(M))  # 6 - Возвращает длину списка (кол-во элементов в нем)

print(sum(M))  # 15 - Возвращает сумму элементов

print(min(M), max(M))

print(sorted(M))  # [1, 2, 2, 3, 3, 4] - Сортирует элементы по возрастанию
print(sorted(M, reverse=True))  # [4, 3, 3, 2, 2, 1] - Сортирует элементы по убыванию

print(set(M))  # {1, 2, 3, 4} - Конвертирует список в множество set() таким образом удаляя копии элементов 
'''


# Все методы списков в Python, которые понадобятся на ЕГЭ
# Методы - это функции направленные только на один конкретный тип данных


# Метод .append() используется для добавления элемента в конец списка.
'''
my_list = [1, 2, 3]
my_list.append(4)
my_list.append(5)

my_list = my_list[::-1]
my_list.append(0)
my_list = my_list[::-1]

print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]

# Можно реализовать через конкатенацию (склеивание) списков:

my_list = [1, 2, 3]
my_list = [0] + my_list + [4, 5]
print(my_list)  # Вывод: [0, 1, 2, 3, 4, 5]
'''


# Метод .reverse() изменяет порядок элементов в списке на обратный.
'''
my_list = [1, 2, 3, 4]
my_list.reverse()
print(my_list)  # Вывод: [4, 3, 2, 1]

# Можно записать по другому через срез:
my_list = [1, 2, 3, 4]
my_list = my_list[::-1]
print(my_list)  # Вывод: [4, 3, 2, 1]
'''


# Метод .count() возвращает количество вхождений заданного элемента в список.
'''
my_list = [1, 2, 2, 3, 4, 2]
print(my_list.count(2))  # Вывод: 3


my_list = [1, 2, 2, '4', '4', 2]
print(my_list.count('4'))  # Вывод: 2
'''


# Метод .remove() удаляет первое вхождение указанного элемента из списка.
'''
my_list = [1, 2, 3, 2, 4]
my_list.remove(2)  # первая найденная двойка
print(my_list)  # Вывод: [1, 3, 2, 4]

# Можно удалить элемент через его индекс используя del:
my_list = [1, 2, 3, 2, 4]
del my_list[1]  # индекс удаляемого элемента
print(my_list)  # Вывод: [1, 3, 2, 4]
'''


# Метод .index() возвращает индекс первого вхождения заданного элемента в списке.
'''
my_list = [1, 2, 3, 2, 4]
print(my_list.index(2))  # Вывод: 1
'''


# Метод .sort() сортирует элементы списка по возрастанию (по умолчанию) или
# в обратном порядке, если передан аргумент reverse=True.
'''
my_list = [4, 1, 3, 2]
my_list.sort()
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list.sort(reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

# Скажу честно я не любитель этого метода, считаю, что удобнее будет использовать функцию sorted():
my_list = [4, 1, 3, 2]
my_list = sorted(my_list)
print(my_list)  # Вывод: [1, 2, 3, 4]

my_list = sorted(my_list, reverse=True)
print(my_list)  # Вывод: [4, 3, 2, 1]

print(sorted('123dejkgh'))
# ['1', '2', '3', 'd', 'e', 'g', 'h', 'j', 'k']
'''


# Генераторы списков

# На вход программе подается натуральное число n,
# а затем n целых чисел.

'''
n = int(input())
M = []
for i in range(n):
    x = int(input())
    M.append(x)
print(M)


M = [int(input()) for i in range(int(input()))]
print(M)
'''

'''
M = [x for x in range(10)]
print(M)  # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

M = [x for x in range(10) if x % 2 == 0]
print(M)  # [0, 2, 4, 6, 8]

M = [x**2 for x in range(10) if x % 2 == 0]
print(M)  # [0, 4, 16, 36, 64]


from random import randint
N = [randint(0, 100) for i in range(10)]
print(N)  # [11, 27, 68, 62, 11, 35, 76, 86, 59, 56]

chet = [x for x in N if x % 2 == 0]
print(chet)  # [68, 62, 76, 86, 56]

nechet = [x for x in N if x % 2 != 0]
print(nechet)  # [11, 27, 11, 35, 59]

copied = [x for x in N if N.count(x) > 1]
print(copied)  # [11, 11]

not_copied = [x for x in N if N.count(x) == 1]
print(not_copied)  # [27, 68, 62, 35, 76, 86, 59, 56]
'''

'''
n = 1232224
N = [int(x) for x in str(n)]
print(N)  # [1, 2, 3, 2, 4]


from math import prod

n = int(input())
N = [int(x) for x in str(n)]
print(N.count(2))
print(N.count(N[-1]))
nechet = [x for x in N if x % 2 != 0]
print(len(nechet))
more_seven = [x for x in N if x > 7]
print(sum(more_seven))
if len(more_seven) == 0:   # если цифр больших семи нет, то вывести 11
    print(11)
elif len(more_seven) == 1:  # если такая цифра одна, то вывести ее
    print(more_seven[0])
else:
    print(prod(more_seven))  # произведение цифр, больших семи

print(N.count(0) + N.count(4))
'''

# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = [2, 6]
# КЕГЭ  = []
# на следующем уроке:
