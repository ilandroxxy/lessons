# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

X = 5  # Переменная - это удобный способ хранения данных и взаимодействия с ячейками памяти
print(X, type(X))  # 5 <class 'int'>


# Типы данных переменных
'''
a = 5   # int (integer) - целочисленные значения
b: int = 6
print(a+b, type(a+b))  # 11 <class 'int'>

b = 5.0  # float (число с плавающей точкой) - дроби (вещественные значения)
print(type(b))  # <class 'float'>
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>

b2 = 5,0
print(type(b2))  # <class 'tuple'>

c = '5'  # str (string) - строковый тип данных хранит в себе символы, слова, тексты и тд
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello
print('Hello, ' + 'world!')  # операция конкатенации строк (склеивание) - Hello, world!

d1 = True  # 1  # bool (Boolean) - Элемента Булевой алгебры (математической логики).
d2 = False  # 0

x = int(input('x: '))
if x > 0:
    print('Число положительное')
elif x < 0:
    print('Число отрицательное')
else:
    print('Чтсло равно нулю')
'''


# Типы данных коллекций
'''
A = [1, 2, 3, '2', True, [1, 2, 3]]  # list (список)

# i   0    1    2    3    4
L = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(L[0])  # первый элемент списка
print(L[-1])  # последний элемент списка

# 1. Может хранить в себе неограниченное кол-во элементов различных типов данных
# 2. Каждый элемент списка имеет порядковый номер (индекс)
# 3. Индексы считаются слева-направо начиная с 0 или справа-налево начиная с -1
# 4. Элементы списка можно брать через индексы и изменять их

B = (1, 2, 3)  # tuple (кортеж)
# 1. В отличие от списков нельзя изменять элементы кортежа

C = {1, 2, 3, 2, 3, 3}  # set (множества)
# 1. В множестве не могут храниться две одинаковые копии одного и того же элемента
print(C)  # {1, 2, 3}

D = {'one': 'один', 'two': 'два', 'bus': 'автобус'}  # dict (словарь)
print(D['one'])  # один
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Доступ к значению элемента словаря осуществляется через его ключ
# 3. Ключи дублироваться не могут, то есть они перезаписываются
D['milk'] = 'молоко'
print(D)  # {'one': 'один', 'two': 'два', 'bus': 'автобус', 'milk': 'молоко'}
D['one'] = 1
print(D)  # {'one': 1, 'two': 'два', 'bus': 'автобус', 'milk': 'молоко'}
'''


# Конвертацию типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>
# ValueError: invalid literal for int() with base 10: '5.0'

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>

A = [1, 2, 3, 2, 3]
print(A, type(A))  # [1, 2, 3, 2, 3] <class 'list'>

A = tuple(A)
print(A, type(A))  # (1, 2, 3, 2, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры
'''
s = input('Принимает только строчные значения: ')
print(s, type(s))  # 56 <class 'str'>

n = int(input('Принимает только целые значения: '))
print(n, type(n))  # 56 <class 'int'>
'''


# Работа с f-строками в Пайтон
# Задача вывести на экран предложение: "Сегодня облачная погода, а температура 24 градуса!"
'''
weather = 'облачно'
temperature = 24
print("Сегодня ", weather, " погода, а температура ", temperature, " градуса!")
print("Сегодня " + weather + " погода, а температура " + str(temperature) + " градуса!")
# TypeError: can only concatenate str (not "int") to str
print("Сегодня {} погода, а температура {} градуса!".format(weather, temperature))
print(f"Сегодня {weather} погода, а температура {temperature} градуса!")
'''

# Базовая арифметика

# a = 7
# b = 5
a, b = 7, 2


print(f'{a} + {b} = {a+b} \n'
      f'{a} - {b} = {a-b} \n'
      f'{a} * {b} = {a*b}')

print()  # В каждой функции print() есть переход на новую строку '/n'

print(f'{a} / {b} = {a/b} \n'  # обычное вещественное деление, то есть результат всегда float
      f'{a} // {b} = {a//b} \n'  # взятие только лишь целой части от деления
      f'{a} % {b} = {a%b}')  # взятие остатка от деления

print()

print(f'Возведем число {a} в степень {b}: {a ** b}')
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')

n = int(input('n: '))
if n % 2 == 0:
    print('четное')
else:
    print('нечетное')



# - одиночный комментарий ctrl + /

'''
многострочный комментарий
'''



# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ  = []
# на следующем уроке:
