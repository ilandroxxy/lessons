# region Домашка: ******************************************************************


# endregion Домашка: ******************************************************************
# #
# #
# region Урок: ********************************************************************

# - это однострочный комментарий

''' - это многострочный комментарий (блок)
x = 5
print(x, type(x))  # 5 <class 'int'>
'''


# Типы данных переменных
'''
a = 5  # int (integer) - целочисленные значения

b = 5.0  # float (число с плавающей точкой) - вещественные значения (дробь)
print(5.0 + 5)  # 10.0
print(4 / 2, type(4 / 2))  # 2.0 <class 'float'>


c = '5'  # str (string) - строковый тип данных для хранения текста
print(a, c)  # 5 5
print(a * 4, c * 4)  # 20 5555
print('Hello ' * 4)  # Hello Hello Hello Hello - при умножении на целое число строк дублируется

c1 = 'Hello, '
c2 = 'world!'
print(c1 + c2)  # Hello, world! - конкатенация (склеивание) строк


d1 = True  # bool (Boolean) - основы Булевой алгебры (ака Математическая логика)
d0 = False
print(4 == 4)  # True
print(4 == 10)  # False

n = 5
if n % 2 == 0:
    print('Четное')
else:
    print('Нечетное')
'''


# Типы данных коллекций (последовательностей)
'''
A = [1, 2, 3, '4', 5.0, True, [1, 2, 3]]  # list (список)
# 1. Могут хранить в себе неограниченное кол-во элементов
# 2. При это элементы могут быть различных типов данных (в отличие от массивов)
# 3. Каждый элемент списка имеет свой порядковый номер: индекс
# 4. Индексы можно считать слева-направо начиная с 0 или справа налево начиная с -1
# 5. Через индексы можно изменять элементы списка (в отличие от кортежей и строк)

# i   0    1    2    3    4
M = ['a', 'b', 'c', 'd', 'e']
# -i -5   -4   -3   -2   -1

print(f'Первый элемент списка М: {M[0]}')
print(f'Последний элемент списка М: {M[-1]}')

M[0], M[-1] = 'A', 'E'
print(M)  # ['A', 'b', 'c', 'd', 'E']



B = (1, 2, 3)  # tuple (кортеж)
# 1. Тоже самое, что списки, только нельзя изменять элементы кортежа


C = {1, 2, 2, 3, 3, 3}  # set (множество)
print(C)  # {1, 2, 3}
# 1. В множествах нельзя хранить копии

M = [1, 2, 1, 23, 12, 3, 12, 213, 12, 312, 312, 32, 13, 123, 12]
print(f'Различных элементов в списке: {len(set(M))}')
# Различных элементов в списке: 10


D = {'один': 'one', 'два': 'two'}  # dict (словарь)
# 1. Элементы словаря разбиваются на две части: ключ и значение
# 2. Чтобы получить значение элемента словаря надо обратиться через ключ
print(D['один'])  # one
# 3. Ключи должны быть индивидуальны, то бишь не могут иметь копий
D['один'] = 1
print(D)  # {'один': 1, 'два': 'two'}
'''


# Конвертирование типов данных
'''
a = 5
print(a, type(a))  # 5 <class 'int'>

a = str(a)
print(a, type(a))  # 5 <class 'str'>

a = float(a)
print(a, type(a))  # 5.0 <class 'float'>

a = int(a)
print(a, type(a))  # 5 <class 'int'>


A = [1, 2, 2, 3, 3, 3]
print(A, type(A))  # [1, 2, 2, 3, 3, 3] <class 'list'>

A = tuple(A) 
print(A, type(A))  # (1, 2, 2, 3, 3, 3) <class 'tuple'>

A = set(A)
print(A, type(A))  # {1, 2, 3} <class 'set'>

A = list(A)
print(A, type(A))  # [1, 2, 3] <class 'list'>
'''


# Ввод данных с клавиатуры:
'''
text = input('Введите свой текст: ')
print(text, type(text))

number = int(input('Введите число: '))
print(number, type(number))
'''


# Использование f-строки
"""
'''  Привет, сегодня облачно, а температура 24 градуса!  '''

weather = 'облачно'
temperature = int(input('Введите температуру: '))
print('Привет, сегодня ', weather, ', а температура ', temperature, ' градуса!')
print('Привет, сегодня ' + weather + ', а температура ' + str(temperature) + ' градуса!')
print('Привет, сегодня {}, а температура {} градуса!'.format(weather, temperature))
print(f'Привет, сегодня {weather}, а температура {temperature} градуса!')
"""


# Базовая арифметика

# a = 7
# b = 2
a, b = 7, 2

print(f'{a} + {b} = {a + b} \n'
      f'{a} - {b} = {a - b} \n'
      f'{a} * {b} = {a * b}')

print()  # В каждой функции print() существует переход на новую строку \n

# Поговори про деление в Пайтон
print(f'{a} / {b} = {a / b} \n'  # 3.5 - вещественное деление (обыкновенное деление) 
      f'{a} // {b} = {a // b} \n'  # 3 - целочисленное деление (всегда int) 
      f'{a} % {b} = {a % b}')  # 1 - взятие остатка от деления (всегда int) 7 / 2 = 3 (1/2)

print()

n = 7  # n = int(input('n: '))
if n % 2 == 0:
    print('Четное | Делится на 2 | Кратно 2')
if n % 3 == 0:
    print('Делится на 3 | Кратно 3')
if n % 10 == 7:
    print('Заканчивается на 7')
if n % 100 == 37:
    print('Заканчивается на 37')
if n % 1000 == 237:
    print('Заканчивается на 237')

print()

print(f'Возведем число 4 в степень 2: {4 ** 2}')  # 16
print(f'Возведем число 4 в степень 3: {4 ** 3}')  # 64

from math import sqrt
print(f'Возьмем квадратный корень от числа 16: {sqrt(16)}')  # 4.0
print(f'Возьмем квадратный корень от числа 16: {16 ** (1/2)}')  # 4.0
print(f'Возьмем кубический корень от числа 27: {27 ** (1/3)}')  # 3.0


# endregion Урок: *************************************************************
# #
# #
# region Разобрать: *************************************************************


# endregion Разобрать: *************************************************************
# #
# #
# ФИПИ = []
# КЕГЭ = []
# на следующем уроке:
